- name: default
  kind: postgres
  configuration:
    connection_info:
      database_url:
        from_env: PG_DATABASE_URL
      isolation_level: read-committed
      use_prepared_statements: false
  customization:
    naming_convention: hasura-default
  logical_models:
    - fields:
        - name: total_pnl_usd
          type:
            nullable: false
            scalar: numeric
        - name: total_volume_usd
          type:
            nullable: false
            scalar: numeric
        - name: trade_count
          type:
            nullable: false
            scalar: bigint
        - name: successful_trades
          type:
            nullable: false
            scalar: bigint
        - name: failed_trades
          type:
            nullable: false
            scalar: bigint
        - name: success_rate
          type:
            nullable: false
            scalar: numeric
      name: transaction_analytics_model
      select_permissions:
        - permission:
            columns:
              - total_pnl_usd
              - total_volume_usd
              - trade_count
              - successful_trades
              - failed_trades
              - success_rate
            filter: {}
          role: public
    - fields:
        - name: id
          type:
            nullable: false
            scalar: uuid
        - name: created_at
          type:
            nullable: false
            scalar: timestamptz
        - name: user_wallet
          type:
            nullable: false
            scalar: text
        - name: token_mint
          type:
            nullable: false
            scalar: text
        - name: token_price_usd
          type:
            nullable: false
            scalar: numeric
        - name: token_amount
          type:
            nullable: false
            scalar: numeric
        - name: success
          type:
            nullable: false
            scalar: boolean
        - name: token_value_usd
          type:
            nullable: false
            scalar: numeric
        - name: token_decimals
          type:
            nullable: false
            scalar: integer
        - name: error_details
          type:
            nullable: true
            scalar: text
      name: transaction_model
      select_permissions:
        - permission:
            columns:
              - id
              - created_at
              - user_wallet
              - token_mint
              - token_price_usd
              - token_amount
              - success
              - token_value_usd
              - token_decimals
              - error_details
            filter: {}
          role: public
    - fields:
        - name: total_value_usd
          type:
            nullable: false
            scalar: numeric
        - name: user_wallet
          type:
            nullable: false
            scalar: text
        - name: token_mint
          type:
            nullable: false
            scalar: text
      name: wallet_token_pnl_model
      select_permissions:
        - permission:
            columns:
              - total_value_usd
              - user_wallet
              - token_mint
            filter: {}
          role: public
  native_queries:
    - arguments:
        token_mint:
          description: Optional token mint to filter by
          nullable: true
          type: text
        user_wallet:
          description: Optional wallet address to filter by
          nullable: true
          type: text
      code: "WITH combined_transactions AS (\n  SELECT \n    user_wallet,\n    token_mint,\n    -token_amount as token_amount,\n    token_price_usd,\n    token_decimals,\n    error_details IS NULL as success\n  FROM token_purchase\n  \n  UNION ALL\n  \n  SELECT \n    user_wallet,\n    token_mint,\n    token_amount,\n    token_price_usd,\n    token_decimals,\n    error_details IS NULL as success\n  FROM token_sale\n),\ntransaction_stats AS (\n  SELECT \n    COALESCE(SUM(CASE \n      WHEN success THEN token_amount * token_price_usd / POW(10, token_decimals)\n      ELSE 0\n    END), 0)::numeric as total_pnl_usd,\n    COALESCE(SUM(CASE \n      WHEN success THEN ABS(token_amount * token_price_usd  / POW(10, token_decimals))\n      ELSE 0\n    END), 0)::numeric as total_volume_usd,\n    COUNT(*)::bigint as trade_count,\n    COUNT(*) FILTER (WHERE success)::bigint as successful_trades,\n    COUNT(*) FILTER (WHERE NOT success)::bigint as failed_trades,\n    ROUND(\n      (COUNT(*) FILTER (WHERE success))::numeric / \n      NULLIF(COUNT(*), 0) * 100,\n      2\n    )::numeric as success_rate\n  FROM combined_transactions\n  WHERE \n    ({{user_wallet}} IS NULL OR user_wallet = {{user_wallet}})\n    AND ({{token_mint}} IS NULL OR token_mint = {{token_mint}})\n)\nSELECT \n  total_pnl_usd,\n  total_volume_usd,\n  trade_count,\n  successful_trades,\n  failed_trades,\n  success_rate\nFROM transaction_stats;"
      returns: transaction_analytics_model
      root_field_name: transaction_analytics
    - arguments: {}
      code: "SELECT \n    id,\n    created_at,\n    user_wallet,\n    token_mint,\n    token_price_usd,\n    token_amount,\n    token_amount * token_price_usd as token_value_usd,\n    token_decimals,\n    error_details IS NULL as success,\n    error_details\nFROM token_purchase\n\nUNION ALL\n\nSELECT \n    id,\n    created_at,\n    user_wallet,\n    token_mint,\n    token_price_usd,\n    -token_amount as token_amount,  -- Negative amount for sales\n    -token_amount * token_price_usd as token_value_usd,\n    token_decimals,\n    error_details IS NULL as success,\n    error_details\nFROM token_sale;"
      returns: transaction_model
      root_field_name: transactions
    - arguments: {}
      code: "SELECT \n    user_wallet,\n    token_mint,\n    SUM(token_value_usd) as total_value_usd\nFROM (\n    SELECT \n        user_wallet,\n        token_mint,\n        token_amount * token_price_usd as token_value_usd\n    FROM token_purchase\n    WHERE error_details IS NULL\n\n    UNION ALL\n\n    SELECT \n        user_wallet,\n        token_mint,\n        -token_amount * token_price_usd as token_value_usd\n    FROM token_sale\n    WHERE error_details IS NULL\n) combined_transactions\nGROUP BY user_wallet, token_mint\nORDER BY user_wallet, token_mint;"
      returns: wallet_token_pnl_model
      root_field_name: transactions_value_aggregate
  tables: "!include default/tables/tables.yaml"
- name: timescaledb
  kind: postgres
  configuration:
    connection_info:
      database_url:
        from_env: TIMESCALE_DATABASE_URL
      isolation_level: read-committed
      pool_settings:
        connection_lifetime: 600
        idle_timeout: 180
        max_connections: 50
        retries: 3
      use_prepared_statements: true
  logical_models:
    - fields:
        - name: bucket
          type:
            nullable: false
            scalar: timestamptz
        - name: token_mint
          type:
            nullable: false
            scalar: text
        - name: open_price_usd
          type:
            nullable: false
            scalar: numeric
        - name: close_price_usd
          type:
            nullable: false
            scalar: numeric
        - name: high_price_usd
          type:
            nullable: false
            scalar: numeric
        - name: low_price_usd
          type:
            nullable: false
            scalar: numeric
        - name: volume_usd
          type:
            nullable: false
            scalar: numeric
        - name: has_trades
          type:
            nullable: false
            scalar: boolean
      name: candles_history_model
      select_permissions:
        - permission:
            columns:
              - bucket
              - token_mint
              - open_price_usd
              - close_price_usd
              - high_price_usd
              - low_price_usd
              - volume_usd
              - has_trades
            filter: {}
          role: public
    - fields:
        - name: mint
          type:
            nullable: false
            scalar: text
        - name: name
          type:
            nullable: false
            scalar: varchar
        - name: symbol
          type:
            nullable: false
            scalar: varchar
        - name: description
          type:
            nullable: false
            scalar: text
        - name: decimals
          type:
            nullable: false
            scalar: numeric
        - name: supply
          type:
            nullable: true
            scalar: numeric
        - name: image_uri
          type:
            nullable: true
            scalar: text
        - name: external_url
          type:
            nullable: true
            scalar: text
        - name: is_pump_token
          type:
            nullable: false
            scalar: boolean
        - name: volume_usd_30m
          type:
            nullable: false
            scalar: numeric
        - name: trades_30m
          type:
            nullable: false
            scalar: numeric
        - name: price_change_pct_30m
          type:
            nullable: false
            scalar: numeric
        - name: volume_usd_1m
          type:
            nullable: false
            scalar: numeric
        - name: trades_1m
          type:
            nullable: false
            scalar: numeric
        - name: price_change_pct_1m
          type:
            nullable: false
            scalar: numeric
        - name: latest_price_usd
          type:
            nullable: false
            scalar: numeric
      name: token_rolling_stats_30min_model
      select_permissions:
        - permission:
            columns:
              - mint
              - name
              - symbol
              - description
              - decimals
              - supply
              - image_uri
              - external_url
              - is_pump_token
              - volume_usd_30m
              - trades_30m
              - price_change_pct_30m
              - volume_usd_1m
              - trades_1m
              - price_change_pct_1m
              - latest_price_usd
            filter: {}
          role: public
  native_queries:
    - arguments:
        start:
          description: ""
          nullable: false
          type: timestamptz
        token_mint:
          description: ""
          nullable: false
          type: text
      code: "WITH RECURSIVE filled_buckets AS (\n  -- Generate all minute buckets from start to now\n  SELECT \n    time_bucket('1 minute', gs) as bucket\n  FROM generate_series(\n    {{start}},\n    now(),\n    '1 minute'::interval\n  ) gs\n),\nraw_candles AS (\n  -- Get the actual candle data\n  SELECT \n    b.bucket,\n    c.token_mint,\n    c.close_price_usd,\n    c.high_price_usd,\n    c.low_price_usd,\n    COALESCE(c.volume_usd, 0) as volume_usd,\n    c.close_price_usd IS NOT NULL as has_trades  -- Flag for actual trades\n  FROM filled_buckets b\n  LEFT JOIN api.candles_history_1min c ON \n    c.bucket = b.bucket AND \n    c.token_mint = {{token_mint}}\n),\nfilled_prices AS (\n  -- First fill in missing close prices with last known price\n  SELECT \n    r.bucket,\n    r.has_trades,\n    r.close_price_usd as raw_close,\n    r.high_price_usd as raw_high,\n    r.low_price_usd as raw_low,\n    r.volume_usd,\n    COALESCE(\n      r.close_price_usd,\n      (\n        SELECT close_price_usd\n        FROM raw_candles r2\n        WHERE r2.close_price_usd IS NOT NULL\n          AND r2.bucket <= r.bucket\n        ORDER BY r2.bucket DESC\n        LIMIT 1\n      ),\n      0\n    ) as close_price_usd\n  FROM raw_candles r\n),\n-- Find the first bucket with actual trading data\nfirst_trade AS (\n  SELECT \n    bucket as first_bucket,\n    close_price_usd as first_price\n  FROM raw_candles\n  WHERE close_price_usd IS NOT NULL\n  ORDER BY bucket ASC\n  LIMIT 1\n)\nSELECT \n  f.bucket,\n  {{token_mint}} as token_mint,\n  CASE \n    WHEN f.bucket = (SELECT first_bucket FROM first_trade) THEN (SELECT first_price FROM first_trade)\n    ELSE LAG(f.close_price_usd, 1) OVER (ORDER BY f.bucket)\n  END as open_price_usd,\n  f.close_price_usd,\n  COALESCE(f.raw_high, f.close_price_usd) as high_price_usd,\n  COALESCE(f.raw_low, f.close_price_usd) as low_price_usd,\n  f.volume_usd,\n  f.has_trades\nFROM filled_prices f\n-- Only return candles from first trade onwards\nWHERE f.bucket >= (SELECT first_bucket FROM first_trade)\nORDER BY bucket DESC;"
      returns: candles_history_model
      root_field_name: token_candles_history_1min
    - arguments: {}
      code: SELECT * FROM api.token_rolling_stats_30min;
      returns: token_rolling_stats_30min_model
      root_field_name: token_rolling_stats_30min
  tables: "!include timescaledb/tables/tables.yaml"
  functions: "!include timescaledb/functions/functions.yaml"
