schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type GetFormattedTokensResult {
  created_at: timestamptz!
  increase_pct: float8!
  latest_price: numeric!
  mint: String!
  name: String!
  symbol: String!
  token_id: uuid!
  trades: bigint!
}

"""
Boolean expression to filter rows from the logical model for "GetFormattedTokensResult". All fields are combined with a logical 'AND'.
"""
input GetFormattedTokensResult_bool_exp_bool_exp {
  _and: [GetFormattedTokensResult_bool_exp_bool_exp!]
  _not: GetFormattedTokensResult_bool_exp_bool_exp
  _or: [GetFormattedTokensResult_bool_exp_bool_exp!]
  created_at: timestamptz_comparison_exp
  increase_pct: float8_comparison_exp
  latest_price: numeric_comparison_exp
  mint: String_comparison_exp
  name: String_comparison_exp
  symbol: String_comparison_exp
  token_id: uuid_comparison_exp
  trades: bigint_comparison_exp
}

enum GetFormattedTokensResult_enum_name {
  """column name"""
  created_at

  """column name"""
  increase_pct

  """column name"""
  latest_price

  """column name"""
  mint

  """column name"""
  name

  """column name"""
  symbol

  """column name"""
  token_id

  """column name"""
  trades
}

"""Ordering options when selecting data from "GetFormattedTokensResult"."""
input GetFormattedTokensResult_order_by {
  created_at: order_by
  increase_pct: order_by
  latest_price: order_by
  mint: order_by
  name: order_by
  symbol: order_by
  token_id: order_by
  trades: order_by
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "account"
"""
type account {
  """An array relationship"""
  account_transactions(
    """distinct select on columns"""
    distinct_on: [account_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_transaction_order_by!]

    """filter the rows returned"""
    where: account_transaction_bool_exp
  ): [account_transaction!]!

  """An aggregate relationship"""
  account_transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [account_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_transaction_order_by!]

    """filter the rows returned"""
    where: account_transaction_bool_exp
  ): account_transaction_aggregate!
  created_at: timestamptz!
  id: uuid!
  username: String!
}

"""
aggregated selection of "account"
"""
type account_aggregate {
  aggregate: account_aggregate_fields
  nodes: [account!]!
}

"""
aggregate fields of "account"
"""
type account_aggregate_fields {
  count(columns: [account_select_column!], distinct: Boolean): Int!
  max: account_max_fields
  min: account_min_fields
}

"""account_balance_ignore_intervalNative Query Arguments"""
input account_balance_ignore_interval_arguments {
  """"""
  account: uuid!

  """"""
  interval: interval!

  """"""
  start: timestamptz!
}

"""
Boolean expression to filter rows from the table "account". All fields are combined with a logical 'AND'.
"""
input account_bool_exp {
  _and: [account_bool_exp!]
  _not: account_bool_exp
  _or: [account_bool_exp!]
  account_transactions: account_transaction_bool_exp
  account_transactions_aggregate: account_transaction_aggregate_bool_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  username: String_comparison_exp
}

"""
unique or primary key constraints on table "account"
"""
enum account_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  account_pkey
}

"""
input type for inserting data into table "account"
"""
input account_insert_input {
  account_transactions: account_transaction_arr_rel_insert_input
  created_at: timestamptz
  id: uuid
  username: String
}

"""aggregate max on columns"""
type account_max_fields {
  created_at: timestamptz
  id: uuid
  username: String
}

"""aggregate min on columns"""
type account_min_fields {
  created_at: timestamptz
  id: uuid
  username: String
}

"""
response of any mutation on the table "account"
"""
type account_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [account!]!
}

"""
input type for inserting object relation for remote table "account"
"""
input account_obj_rel_insert_input {
  data: account_insert_input!

  """upsert condition"""
  on_conflict: account_on_conflict
}

"""
on_conflict condition type for table "account"
"""
input account_on_conflict {
  constraint: account_constraint!
  update_columns: [account_update_column!]! = []
  where: account_bool_exp
}

"""Ordering options when selecting data from "account"."""
input account_order_by {
  account_transactions_aggregate: account_transaction_aggregate_order_by
  created_at: order_by
  id: order_by
  username: order_by
}

"""primary key columns input for table: account"""
input account_pk_columns_input {
  id: uuid!
}

"""
select columns of table "account"
"""
enum account_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  username
}

"""
input type for updating data in table "account"
"""
input account_set_input {
  created_at: timestamptz
  id: uuid
  username: String
}

"""
Streaming cursor of the table "account"
"""
input account_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: account_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input account_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  username: String
}

"""account_token_balance_ignore_intervalNative Query Arguments"""
input account_token_balance_ignore_interval_arguments {
  """"""
  account: uuid!

  """"""
  interval: interval!

  """"""
  start: timestamptz!

  """"""
  token: uuid!
}

"""
columns and relationships of "account_transaction"
"""
type account_transaction {
  account: uuid!

  """An object relationship"""
  account_data: account!
  amount: numeric!
  created_at: timestamptz!
  id: uuid!

  """An array relationship"""
  token_transactions(
    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): [token_transaction!]!

  """An aggregate relationship"""
  token_transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): token_transaction_aggregate!
}

"""
aggregated selection of "account_transaction"
"""
type account_transaction_aggregate {
  aggregate: account_transaction_aggregate_fields
  nodes: [account_transaction!]!
}

input account_transaction_aggregate_bool_exp {
  count: account_transaction_aggregate_bool_exp_count
}

input account_transaction_aggregate_bool_exp_count {
  arguments: [account_transaction_select_column!]
  distinct: Boolean
  filter: account_transaction_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "account_transaction"
"""
type account_transaction_aggregate_fields {
  avg: account_transaction_avg_fields
  count(columns: [account_transaction_select_column!], distinct: Boolean): Int!
  max: account_transaction_max_fields
  min: account_transaction_min_fields
  stddev: account_transaction_stddev_fields
  stddev_pop: account_transaction_stddev_pop_fields
  stddev_samp: account_transaction_stddev_samp_fields
  sum: account_transaction_sum_fields
  var_pop: account_transaction_var_pop_fields
  var_samp: account_transaction_var_samp_fields
  variance: account_transaction_variance_fields
}

"""
order by aggregate values of table "account_transaction"
"""
input account_transaction_aggregate_order_by {
  avg: account_transaction_avg_order_by
  count: order_by
  max: account_transaction_max_order_by
  min: account_transaction_min_order_by
  stddev: account_transaction_stddev_order_by
  stddev_pop: account_transaction_stddev_pop_order_by
  stddev_samp: account_transaction_stddev_samp_order_by
  sum: account_transaction_sum_order_by
  var_pop: account_transaction_var_pop_order_by
  var_samp: account_transaction_var_samp_order_by
  variance: account_transaction_variance_order_by
}

"""
input type for inserting array relation for remote table "account_transaction"
"""
input account_transaction_arr_rel_insert_input {
  data: [account_transaction_insert_input!]!

  """upsert condition"""
  on_conflict: account_transaction_on_conflict
}

"""aggregate avg on columns"""
type account_transaction_avg_fields {
  amount: Float
}

"""
order by avg() on columns of table "account_transaction"
"""
input account_transaction_avg_order_by {
  amount: order_by
}

"""
Boolean expression to filter rows from the table "account_transaction". All fields are combined with a logical 'AND'.
"""
input account_transaction_bool_exp {
  _and: [account_transaction_bool_exp!]
  _not: account_transaction_bool_exp
  _or: [account_transaction_bool_exp!]
  account: uuid_comparison_exp
  account_data: account_bool_exp
  amount: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  token_transactions: token_transaction_bool_exp
  token_transactions_aggregate: token_transaction_aggregate_bool_exp
}

"""
unique or primary key constraints on table "account_transaction"
"""
enum account_transaction_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  account_transaction_pkey
}

"""
input type for incrementing numeric columns in table "account_transaction"
"""
input account_transaction_inc_input {
  amount: numeric
}

"""
input type for inserting data into table "account_transaction"
"""
input account_transaction_insert_input {
  account: uuid
  account_data: account_obj_rel_insert_input
  amount: numeric
  created_at: timestamptz
  id: uuid
  token_transactions: token_transaction_arr_rel_insert_input
}

"""aggregate max on columns"""
type account_transaction_max_fields {
  account: uuid
  amount: numeric
  created_at: timestamptz
  id: uuid
}

"""
order by max() on columns of table "account_transaction"
"""
input account_transaction_max_order_by {
  account: order_by
  amount: order_by
  created_at: order_by
  id: order_by
}

"""aggregate min on columns"""
type account_transaction_min_fields {
  account: uuid
  amount: numeric
  created_at: timestamptz
  id: uuid
}

"""
order by min() on columns of table "account_transaction"
"""
input account_transaction_min_order_by {
  account: order_by
  amount: order_by
  created_at: order_by
  id: order_by
}

"""
response of any mutation on the table "account_transaction"
"""
type account_transaction_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [account_transaction!]!
}

"""
input type for inserting object relation for remote table "account_transaction"
"""
input account_transaction_obj_rel_insert_input {
  data: account_transaction_insert_input!

  """upsert condition"""
  on_conflict: account_transaction_on_conflict
}

"""account_transaction_offsetNative Query Arguments"""
input account_transaction_offset_arguments {
  """"""
  offset: interval!
}

type account_transaction_offset_model {
  account: uuid!
  amount: numeric!
  created_at: timestamptz!
  created_at_offset: timestamptz!
  id: uuid!
}

"""
Boolean expression to filter rows from the logical model for "account_transaction_offset_model". All fields are combined with a logical 'AND'.
"""
input account_transaction_offset_model_bool_exp_bool_exp {
  _and: [account_transaction_offset_model_bool_exp_bool_exp!]
  _not: account_transaction_offset_model_bool_exp_bool_exp
  _or: [account_transaction_offset_model_bool_exp_bool_exp!]
  account: uuid_comparison_exp
  amount: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  created_at_offset: timestamptz_comparison_exp
  id: uuid_comparison_exp
}

enum account_transaction_offset_model_enum_name {
  """column name"""
  account

  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  created_at_offset

  """column name"""
  id
}

"""
Ordering options when selecting data from "account_transaction_offset_model".
"""
input account_transaction_offset_model_order_by {
  account: order_by
  amount: order_by
  created_at: order_by
  created_at_offset: order_by
  id: order_by
}

"""
on_conflict condition type for table "account_transaction"
"""
input account_transaction_on_conflict {
  constraint: account_transaction_constraint!
  update_columns: [account_transaction_update_column!]! = []
  where: account_transaction_bool_exp
}

"""Ordering options when selecting data from "account_transaction"."""
input account_transaction_order_by {
  account: order_by
  account_data: account_order_by
  amount: order_by
  created_at: order_by
  id: order_by
  token_transactions_aggregate: token_transaction_aggregate_order_by
}

"""primary key columns input for table: account_transaction"""
input account_transaction_pk_columns_input {
  id: uuid!
}

"""
select columns of table "account_transaction"
"""
enum account_transaction_select_column {
  """column name"""
  account

  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  id
}

"""
input type for updating data in table "account_transaction"
"""
input account_transaction_set_input {
  account: uuid
  amount: numeric
  created_at: timestamptz
  id: uuid
}

"""aggregate stddev on columns"""
type account_transaction_stddev_fields {
  amount: Float
}

"""
order by stddev() on columns of table "account_transaction"
"""
input account_transaction_stddev_order_by {
  amount: order_by
}

"""aggregate stddev_pop on columns"""
type account_transaction_stddev_pop_fields {
  amount: Float
}

"""
order by stddev_pop() on columns of table "account_transaction"
"""
input account_transaction_stddev_pop_order_by {
  amount: order_by
}

"""aggregate stddev_samp on columns"""
type account_transaction_stddev_samp_fields {
  amount: Float
}

"""
order by stddev_samp() on columns of table "account_transaction"
"""
input account_transaction_stddev_samp_order_by {
  amount: order_by
}

"""
Streaming cursor of the table "account_transaction"
"""
input account_transaction_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: account_transaction_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input account_transaction_stream_cursor_value_input {
  account: uuid
  amount: numeric
  created_at: timestamptz
  id: uuid
}

"""aggregate sum on columns"""
type account_transaction_sum_fields {
  amount: numeric
}

"""
order by sum() on columns of table "account_transaction"
"""
input account_transaction_sum_order_by {
  amount: order_by
}

"""
update columns of table "account_transaction"
"""
enum account_transaction_update_column {
  """column name"""
  account

  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  id
}

input account_transaction_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: account_transaction_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: account_transaction_set_input

  """filter the rows which have to be updated"""
  where: account_transaction_bool_exp!
}

"""aggregate var_pop on columns"""
type account_transaction_var_pop_fields {
  amount: Float
}

"""
order by var_pop() on columns of table "account_transaction"
"""
input account_transaction_var_pop_order_by {
  amount: order_by
}

"""aggregate var_samp on columns"""
type account_transaction_var_samp_fields {
  amount: Float
}

"""
order by var_samp() on columns of table "account_transaction"
"""
input account_transaction_var_samp_order_by {
  amount: order_by
}

"""aggregate variance on columns"""
type account_transaction_variance_fields {
  amount: Float
}

"""
order by variance() on columns of table "account_transaction"
"""
input account_transaction_variance_order_by {
  amount: order_by
}

"""
update columns of table "account"
"""
enum account_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  username
}

input account_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: account_set_input

  """filter the rows which have to be updated"""
  where: account_bool_exp!
}

type balance_offset_model {
  balance: numeric!
}

"""
Boolean expression to filter rows from the logical model for "balance_offset_model". All fields are combined with a logical 'AND'.
"""
input balance_offset_model_bool_exp_bool_exp {
  _and: [balance_offset_model_bool_exp_bool_exp!]
  _not: balance_offset_model_bool_exp_bool_exp
  _or: [balance_offset_model_bool_exp_bool_exp!]
  balance: numeric_comparison_exp
}

enum balance_offset_model_enum_name {
  """column name"""
  balance
}

"""Ordering options when selecting data from "balance_offset_model"."""
input balance_offset_model_order_by {
  balance: order_by
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

input buy_token_args {
  account_id: uuid
  amount_to_buy: numeric
  token_cost: numeric
  token_id: uuid
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
columns and relationships of "formatted_tokens"
"""
type formatted_tokens {
  created_at: timestamptz
  increase_pct: float8
  latest_price: numeric
  mint: String
  name: String
  symbol: String
  token_id: uuid
  trades: bigint
}

"""
aggregated selection of "formatted_tokens"
"""
type formatted_tokens_aggregate {
  aggregate: formatted_tokens_aggregate_fields
  nodes: [formatted_tokens!]!
}

"""
aggregate fields of "formatted_tokens"
"""
type formatted_tokens_aggregate_fields {
  avg: formatted_tokens_avg_fields
  count(columns: [formatted_tokens_select_column!], distinct: Boolean): Int!
  max: formatted_tokens_max_fields
  min: formatted_tokens_min_fields
  stddev: formatted_tokens_stddev_fields
  stddev_pop: formatted_tokens_stddev_pop_fields
  stddev_samp: formatted_tokens_stddev_samp_fields
  sum: formatted_tokens_sum_fields
  var_pop: formatted_tokens_var_pop_fields
  var_samp: formatted_tokens_var_samp_fields
  variance: formatted_tokens_variance_fields
}

"""aggregate avg on columns"""
type formatted_tokens_avg_fields {
  increase_pct: Float
  latest_price: Float
  trades: Float
}

"""
Boolean expression to filter rows from the table "formatted_tokens". All fields are combined with a logical 'AND'.
"""
input formatted_tokens_bool_exp {
  _and: [formatted_tokens_bool_exp!]
  _not: formatted_tokens_bool_exp
  _or: [formatted_tokens_bool_exp!]
  created_at: timestamptz_comparison_exp
  increase_pct: float8_comparison_exp
  latest_price: numeric_comparison_exp
  mint: String_comparison_exp
  name: String_comparison_exp
  symbol: String_comparison_exp
  token_id: uuid_comparison_exp
  trades: bigint_comparison_exp
}

"""aggregate max on columns"""
type formatted_tokens_max_fields {
  created_at: timestamptz
  increase_pct: float8
  latest_price: numeric
  mint: String
  name: String
  symbol: String
  token_id: uuid
  trades: bigint
}

"""aggregate min on columns"""
type formatted_tokens_min_fields {
  created_at: timestamptz
  increase_pct: float8
  latest_price: numeric
  mint: String
  name: String
  symbol: String
  token_id: uuid
  trades: bigint
}

"""Ordering options when selecting data from "formatted_tokens"."""
input formatted_tokens_order_by {
  created_at: order_by
  increase_pct: order_by
  latest_price: order_by
  mint: order_by
  name: order_by
  symbol: order_by
  token_id: order_by
  trades: order_by
}

"""
select columns of table "formatted_tokens"
"""
enum formatted_tokens_select_column {
  """column name"""
  created_at

  """column name"""
  increase_pct

  """column name"""
  latest_price

  """column name"""
  mint

  """column name"""
  name

  """column name"""
  symbol

  """column name"""
  token_id

  """column name"""
  trades
}

"""aggregate stddev on columns"""
type formatted_tokens_stddev_fields {
  increase_pct: Float
  latest_price: Float
  trades: Float
}

"""aggregate stddev_pop on columns"""
type formatted_tokens_stddev_pop_fields {
  increase_pct: Float
  latest_price: Float
  trades: Float
}

"""aggregate stddev_samp on columns"""
type formatted_tokens_stddev_samp_fields {
  increase_pct: Float
  latest_price: Float
  trades: Float
}

"""
Streaming cursor of the table "formatted_tokens"
"""
input formatted_tokens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: formatted_tokens_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input formatted_tokens_stream_cursor_value_input {
  created_at: timestamptz
  increase_pct: float8
  latest_price: numeric
  mint: String
  name: String
  symbol: String
  token_id: uuid
  trades: bigint
}

"""aggregate sum on columns"""
type formatted_tokens_sum_fields {
  increase_pct: float8
  latest_price: numeric
  trades: bigint
}

"""aggregate var_pop on columns"""
type formatted_tokens_var_pop_fields {
  increase_pct: Float
  latest_price: Float
  trades: Float
}

"""aggregate var_samp on columns"""
type formatted_tokens_var_samp_fields {
  increase_pct: Float
  latest_price: Float
  trades: Float
}

"""aggregate variance on columns"""
type formatted_tokens_variance_fields {
  increase_pct: Float
  latest_price: Float
  trades: Float
}

scalar interval

"""mutation root"""
type mutation_root {
  """
  execute VOLATILE function "buy_token" which returns "token_transaction"
  """
  buy_token(
    """
    input parameters for function "buy_token"
    """
    args: buy_token_args!

    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): token_transaction

  """
  delete data from the table: "account"
  """
  delete_account(
    """filter the rows which have to be deleted"""
    where: account_bool_exp!
  ): account_mutation_response

  """
  delete single row from the table: "account"
  """
  delete_account_by_pk(id: uuid!): account

  """
  delete data from the table: "account_transaction"
  """
  delete_account_transaction(
    """filter the rows which have to be deleted"""
    where: account_transaction_bool_exp!
  ): account_transaction_mutation_response

  """
  delete single row from the table: "account_transaction"
  """
  delete_account_transaction_by_pk(id: uuid!): account_transaction

  """
  delete data from the table: "token"
  """
  delete_token(
    """filter the rows which have to be deleted"""
    where: token_bool_exp!
  ): token_mutation_response

  """
  delete single row from the table: "token"
  """
  delete_token_by_pk(id: uuid!): token

  """
  delete data from the table: "token_price_history"
  """
  delete_token_price_history(
    """filter the rows which have to be deleted"""
    where: token_price_history_bool_exp!
  ): token_price_history_mutation_response

  """
  delete single row from the table: "token_price_history"
  """
  delete_token_price_history_by_pk(id: uuid!): token_price_history

  """
  delete data from the table: "token_transaction"
  """
  delete_token_transaction(
    """filter the rows which have to be deleted"""
    where: token_transaction_bool_exp!
  ): token_transaction_mutation_response

  """
  delete single row from the table: "token_transaction"
  """
  delete_token_transaction_by_pk(id: uuid!): token_transaction

  """
  insert data into the table: "account"
  """
  insert_account(
    """the rows to be inserted"""
    objects: [account_insert_input!]!

    """upsert condition"""
    on_conflict: account_on_conflict
  ): account_mutation_response

  """
  insert a single row into the table: "account"
  """
  insert_account_one(
    """the row to be inserted"""
    object: account_insert_input!

    """upsert condition"""
    on_conflict: account_on_conflict
  ): account

  """
  insert data into the table: "account_transaction"
  """
  insert_account_transaction(
    """the rows to be inserted"""
    objects: [account_transaction_insert_input!]!

    """upsert condition"""
    on_conflict: account_transaction_on_conflict
  ): account_transaction_mutation_response

  """
  insert a single row into the table: "account_transaction"
  """
  insert_account_transaction_one(
    """the row to be inserted"""
    object: account_transaction_insert_input!

    """upsert condition"""
    on_conflict: account_transaction_on_conflict
  ): account_transaction

  """
  insert data into the table: "token"
  """
  insert_token(
    """the rows to be inserted"""
    objects: [token_insert_input!]!

    """upsert condition"""
    on_conflict: token_on_conflict
  ): token_mutation_response

  """
  insert a single row into the table: "token"
  """
  insert_token_one(
    """the row to be inserted"""
    object: token_insert_input!

    """upsert condition"""
    on_conflict: token_on_conflict
  ): token

  """
  insert data into the table: "token_price_history"
  """
  insert_token_price_history(
    """the rows to be inserted"""
    objects: [token_price_history_insert_input!]!

    """upsert condition"""
    on_conflict: token_price_history_on_conflict
  ): token_price_history_mutation_response

  """
  insert a single row into the table: "token_price_history"
  """
  insert_token_price_history_one(
    """the row to be inserted"""
    object: token_price_history_insert_input!

    """upsert condition"""
    on_conflict: token_price_history_on_conflict
  ): token_price_history

  """
  insert data into the table: "token_transaction"
  """
  insert_token_transaction(
    """the rows to be inserted"""
    objects: [token_transaction_insert_input!]!

    """upsert condition"""
    on_conflict: token_transaction_on_conflict
  ): token_transaction_mutation_response

  """
  insert a single row into the table: "token_transaction"
  """
  insert_token_transaction_one(
    """the row to be inserted"""
    object: token_transaction_insert_input!

    """upsert condition"""
    on_conflict: token_transaction_on_conflict
  ): token_transaction

  """
  execute VOLATILE function "sell_token" which returns "token_transaction"
  """
  sell_token(
    """
    input parameters for function "sell_token"
    """
    args: sell_token_args!

    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): token_transaction

  """
  update data of the table: "account"
  """
  update_account(
    """sets the columns of the filtered rows to the given values"""
    _set: account_set_input

    """filter the rows which have to be updated"""
    where: account_bool_exp!
  ): account_mutation_response

  """
  update single row of the table: "account"
  """
  update_account_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: account_set_input
    pk_columns: account_pk_columns_input!
  ): account

  """
  update multiples rows of table: "account"
  """
  update_account_many(
    """updates to execute, in order"""
    updates: [account_updates!]!
  ): [account_mutation_response]

  """
  update data of the table: "account_transaction"
  """
  update_account_transaction(
    """increments the numeric columns with given value of the filtered values"""
    _inc: account_transaction_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: account_transaction_set_input

    """filter the rows which have to be updated"""
    where: account_transaction_bool_exp!
  ): account_transaction_mutation_response

  """
  update single row of the table: "account_transaction"
  """
  update_account_transaction_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: account_transaction_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: account_transaction_set_input
    pk_columns: account_transaction_pk_columns_input!
  ): account_transaction

  """
  update multiples rows of table: "account_transaction"
  """
  update_account_transaction_many(
    """updates to execute, in order"""
    updates: [account_transaction_updates!]!
  ): [account_transaction_mutation_response]

  """
  update data of the table: "token"
  """
  update_token(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_set_input

    """filter the rows which have to be updated"""
    where: token_bool_exp!
  ): token_mutation_response

  """
  update single row of the table: "token"
  """
  update_token_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_set_input
    pk_columns: token_pk_columns_input!
  ): token

  """
  update multiples rows of table: "token"
  """
  update_token_many(
    """updates to execute, in order"""
    updates: [token_updates!]!
  ): [token_mutation_response]

  """
  update data of the table: "token_price_history"
  """
  update_token_price_history(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_price_history_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_price_history_set_input

    """filter the rows which have to be updated"""
    where: token_price_history_bool_exp!
  ): token_price_history_mutation_response

  """
  update single row of the table: "token_price_history"
  """
  update_token_price_history_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_price_history_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_price_history_set_input
    pk_columns: token_price_history_pk_columns_input!
  ): token_price_history

  """
  update multiples rows of table: "token_price_history"
  """
  update_token_price_history_many(
    """updates to execute, in order"""
    updates: [token_price_history_updates!]!
  ): [token_price_history_mutation_response]

  """
  update data of the table: "token_transaction"
  """
  update_token_transaction(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_transaction_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_transaction_set_input

    """filter the rows which have to be updated"""
    where: token_transaction_bool_exp!
  ): token_transaction_mutation_response

  """
  update single row of the table: "token_transaction"
  """
  update_token_transaction_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_transaction_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_transaction_set_input
    pk_columns: token_transaction_pk_columns_input!
  ): token_transaction

  """
  update multiples rows of table: "token_transaction"
  """
  update_token_transaction_many(
    """updates to execute, in order"""
    updates: [token_transaction_updates!]!
  ): [token_transaction_mutation_response]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  GetFormattedTokens(
    """distinct select on columns"""
    distinct_on: [GetFormattedTokensResult_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [GetFormattedTokensResult_order_by!]

    """filter the rows returned"""
    where: GetFormattedTokensResult_bool_exp_bool_exp
  ): [GetFormattedTokensResult!]!

  """
  fetch data from the table: "account"
  """
  account(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """
  fetch aggregated fields from the table: "account"
  """
  account_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!
  account_balance_ignore_interval(
    """account_balance_ignore_intervalNative Query Arguments"""
    args: account_balance_ignore_interval_arguments!

    """distinct select on columns"""
    distinct_on: [balance_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [balance_offset_model_order_by!]

    """filter the rows returned"""
    where: balance_offset_model_bool_exp_bool_exp
  ): [balance_offset_model!]!

  """fetch data from the table: "account" using primary key columns"""
  account_by_pk(id: uuid!): account
  account_token_balance_ignore_interval(
    """account_token_balance_ignore_intervalNative Query Arguments"""
    args: account_token_balance_ignore_interval_arguments!

    """distinct select on columns"""
    distinct_on: [balance_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [balance_offset_model_order_by!]

    """filter the rows returned"""
    where: balance_offset_model_bool_exp_bool_exp
  ): [balance_offset_model!]!

  """
  fetch data from the table: "account_transaction"
  """
  account_transaction(
    """distinct select on columns"""
    distinct_on: [account_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_transaction_order_by!]

    """filter the rows returned"""
    where: account_transaction_bool_exp
  ): [account_transaction!]!

  """
  fetch aggregated fields from the table: "account_transaction"
  """
  account_transaction_aggregate(
    """distinct select on columns"""
    distinct_on: [account_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_transaction_order_by!]

    """filter the rows returned"""
    where: account_transaction_bool_exp
  ): account_transaction_aggregate!

  """
  fetch data from the table: "account_transaction" using primary key columns
  """
  account_transaction_by_pk(id: uuid!): account_transaction
  account_transaction_offset(
    """account_transaction_offsetNative Query Arguments"""
    args: account_transaction_offset_arguments!

    """distinct select on columns"""
    distinct_on: [account_transaction_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_transaction_offset_model_order_by!]

    """filter the rows returned"""
    where: account_transaction_offset_model_bool_exp_bool_exp
  ): [account_transaction_offset_model!]!

  """
  fetch data from the table: "formatted_tokens"
  """
  formatted_tokens(
    """distinct select on columns"""
    distinct_on: [formatted_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [formatted_tokens_order_by!]

    """filter the rows returned"""
    where: formatted_tokens_bool_exp
  ): [formatted_tokens!]!

  """
  fetch aggregated fields from the table: "formatted_tokens"
  """
  formatted_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [formatted_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [formatted_tokens_order_by!]

    """filter the rows returned"""
    where: formatted_tokens_bool_exp
  ): formatted_tokens_aggregate!

  """
  fetch data from the table: "token"
  """
  token(
    """distinct select on columns"""
    distinct_on: [token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_order_by!]

    """filter the rows returned"""
    where: token_bool_exp
  ): [token!]!

  """
  fetch aggregated fields from the table: "token"
  """
  token_aggregate(
    """distinct select on columns"""
    distinct_on: [token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_order_by!]

    """filter the rows returned"""
    where: token_bool_exp
  ): token_aggregate!

  """fetch data from the table: "token" using primary key columns"""
  token_by_pk(id: uuid!): token

  """
  fetch data from the table: "token_price_history"
  """
  token_price_history(
    """distinct select on columns"""
    distinct_on: [token_price_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_price_history_order_by!]

    """filter the rows returned"""
    where: token_price_history_bool_exp
  ): [token_price_history!]!

  """
  fetch aggregated fields from the table: "token_price_history"
  """
  token_price_history_aggregate(
    """distinct select on columns"""
    distinct_on: [token_price_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_price_history_order_by!]

    """filter the rows returned"""
    where: token_price_history_bool_exp
  ): token_price_history_aggregate!

  """
  fetch data from the table: "token_price_history" using primary key columns
  """
  token_price_history_by_pk(id: uuid!): token_price_history
  token_price_history_offset(
    """token_price_history_offsetNative Query Arguments"""
    args: token_price_history_offset_arguments!

    """distinct select on columns"""
    distinct_on: [token_price_history_offset_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_price_history_offset_order_by!]

    """filter the rows returned"""
    where: token_price_history_offset_bool_exp_bool_exp
  ): [token_price_history_offset!]!

  """
  fetch data from the table: "token_transaction"
  """
  token_transaction(
    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): [token_transaction!]!

  """
  fetch aggregated fields from the table: "token_transaction"
  """
  token_transaction_aggregate(
    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): token_transaction_aggregate!

  """
  fetch data from the table: "token_transaction" using primary key columns
  """
  token_transaction_by_pk(id: uuid!): token_transaction
  token_transaction_offset(
    """token_transaction_offsetNative Query Arguments"""
    args: token_transaction_offset_arguments!

    """distinct select on columns"""
    distinct_on: [token_transaction_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_offset_model_order_by!]

    """filter the rows returned"""
    where: token_transaction_offset_model_bool_exp_bool_exp
  ): [token_transaction_offset_model!]!
}

input sell_token_args {
  account_id: uuid
  amount_to_sell: numeric
  token_cost: numeric
  token_id: uuid
}

type subscription_root {
  GetFormattedTokens(
    """distinct select on columns"""
    distinct_on: [GetFormattedTokensResult_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [GetFormattedTokensResult_order_by!]

    """filter the rows returned"""
    where: GetFormattedTokensResult_bool_exp_bool_exp
  ): [GetFormattedTokensResult!]!

  """
  fetch data from the table: "account"
  """
  account(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """
  fetch aggregated fields from the table: "account"
  """
  account_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!
  account_balance_ignore_interval(
    """account_balance_ignore_intervalNative Query Arguments"""
    args: account_balance_ignore_interval_arguments!

    """distinct select on columns"""
    distinct_on: [balance_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [balance_offset_model_order_by!]

    """filter the rows returned"""
    where: balance_offset_model_bool_exp_bool_exp
  ): [balance_offset_model!]!

  """fetch data from the table: "account" using primary key columns"""
  account_by_pk(id: uuid!): account

  """
  fetch data from the table in a streaming manner: "account"
  """
  account_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [account_stream_cursor_input]!

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!
  account_token_balance_ignore_interval(
    """account_token_balance_ignore_intervalNative Query Arguments"""
    args: account_token_balance_ignore_interval_arguments!

    """distinct select on columns"""
    distinct_on: [balance_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [balance_offset_model_order_by!]

    """filter the rows returned"""
    where: balance_offset_model_bool_exp_bool_exp
  ): [balance_offset_model!]!

  """
  fetch data from the table: "account_transaction"
  """
  account_transaction(
    """distinct select on columns"""
    distinct_on: [account_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_transaction_order_by!]

    """filter the rows returned"""
    where: account_transaction_bool_exp
  ): [account_transaction!]!

  """
  fetch aggregated fields from the table: "account_transaction"
  """
  account_transaction_aggregate(
    """distinct select on columns"""
    distinct_on: [account_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_transaction_order_by!]

    """filter the rows returned"""
    where: account_transaction_bool_exp
  ): account_transaction_aggregate!

  """
  fetch data from the table: "account_transaction" using primary key columns
  """
  account_transaction_by_pk(id: uuid!): account_transaction
  account_transaction_offset(
    """account_transaction_offsetNative Query Arguments"""
    args: account_transaction_offset_arguments!

    """distinct select on columns"""
    distinct_on: [account_transaction_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_transaction_offset_model_order_by!]

    """filter the rows returned"""
    where: account_transaction_offset_model_bool_exp_bool_exp
  ): [account_transaction_offset_model!]!

  """
  fetch data from the table in a streaming manner: "account_transaction"
  """
  account_transaction_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [account_transaction_stream_cursor_input]!

    """filter the rows returned"""
    where: account_transaction_bool_exp
  ): [account_transaction!]!

  """
  fetch data from the table: "formatted_tokens"
  """
  formatted_tokens(
    """distinct select on columns"""
    distinct_on: [formatted_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [formatted_tokens_order_by!]

    """filter the rows returned"""
    where: formatted_tokens_bool_exp
  ): [formatted_tokens!]!

  """
  fetch aggregated fields from the table: "formatted_tokens"
  """
  formatted_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [formatted_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [formatted_tokens_order_by!]

    """filter the rows returned"""
    where: formatted_tokens_bool_exp
  ): formatted_tokens_aggregate!

  """
  fetch data from the table in a streaming manner: "formatted_tokens"
  """
  formatted_tokens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [formatted_tokens_stream_cursor_input]!

    """filter the rows returned"""
    where: formatted_tokens_bool_exp
  ): [formatted_tokens!]!

  """
  fetch data from the table: "token"
  """
  token(
    """distinct select on columns"""
    distinct_on: [token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_order_by!]

    """filter the rows returned"""
    where: token_bool_exp
  ): [token!]!

  """
  fetch aggregated fields from the table: "token"
  """
  token_aggregate(
    """distinct select on columns"""
    distinct_on: [token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_order_by!]

    """filter the rows returned"""
    where: token_bool_exp
  ): token_aggregate!

  """fetch data from the table: "token" using primary key columns"""
  token_by_pk(id: uuid!): token

  """
  fetch data from the table: "token_price_history"
  """
  token_price_history(
    """distinct select on columns"""
    distinct_on: [token_price_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_price_history_order_by!]

    """filter the rows returned"""
    where: token_price_history_bool_exp
  ): [token_price_history!]!

  """
  fetch aggregated fields from the table: "token_price_history"
  """
  token_price_history_aggregate(
    """distinct select on columns"""
    distinct_on: [token_price_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_price_history_order_by!]

    """filter the rows returned"""
    where: token_price_history_bool_exp
  ): token_price_history_aggregate!

  """
  fetch data from the table: "token_price_history" using primary key columns
  """
  token_price_history_by_pk(id: uuid!): token_price_history
  token_price_history_offset(
    """token_price_history_offsetNative Query Arguments"""
    args: token_price_history_offset_arguments!

    """distinct select on columns"""
    distinct_on: [token_price_history_offset_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_price_history_offset_order_by!]

    """filter the rows returned"""
    where: token_price_history_offset_bool_exp_bool_exp
  ): [token_price_history_offset!]!

  """
  fetch data from the table in a streaming manner: "token_price_history"
  """
  token_price_history_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_price_history_stream_cursor_input]!

    """filter the rows returned"""
    where: token_price_history_bool_exp
  ): [token_price_history!]!

  """
  fetch data from the table in a streaming manner: "token"
  """
  token_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_stream_cursor_input]!

    """filter the rows returned"""
    where: token_bool_exp
  ): [token!]!

  """
  fetch data from the table: "token_transaction"
  """
  token_transaction(
    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): [token_transaction!]!

  """
  fetch aggregated fields from the table: "token_transaction"
  """
  token_transaction_aggregate(
    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): token_transaction_aggregate!

  """
  fetch data from the table: "token_transaction" using primary key columns
  """
  token_transaction_by_pk(id: uuid!): token_transaction
  token_transaction_offset(
    """token_transaction_offsetNative Query Arguments"""
    args: token_transaction_offset_arguments!

    """distinct select on columns"""
    distinct_on: [token_transaction_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_offset_model_order_by!]

    """filter the rows returned"""
    where: token_transaction_offset_model_bool_exp_bool_exp
  ): [token_transaction_offset_model!]!

  """
  fetch data from the table in a streaming manner: "token_transaction"
  """
  token_transaction_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_transaction_stream_cursor_input]!

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): [token_transaction!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "token"
"""
type token {
  id: uuid!

  """token mint address (only for real tokens)"""
  mint: String
  name: String!
  supply: numeric!
  symbol: String!

  """An array relationship"""
  token_price_histories(
    """distinct select on columns"""
    distinct_on: [token_price_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_price_history_order_by!]

    """filter the rows returned"""
    where: token_price_history_bool_exp
  ): [token_price_history!]!

  """An aggregate relationship"""
  token_price_histories_aggregate(
    """distinct select on columns"""
    distinct_on: [token_price_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_price_history_order_by!]

    """filter the rows returned"""
    where: token_price_history_bool_exp
  ): token_price_history_aggregate!

  """An array relationship"""
  token_transactions(
    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): [token_transaction!]!

  """An aggregate relationship"""
  token_transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): token_transaction_aggregate!
  updated_at: timestamptz!
  uri: String
}

"""
aggregated selection of "token"
"""
type token_aggregate {
  aggregate: token_aggregate_fields
  nodes: [token!]!
}

"""
aggregate fields of "token"
"""
type token_aggregate_fields {
  avg: token_avg_fields
  count(columns: [token_select_column!], distinct: Boolean): Int!
  max: token_max_fields
  min: token_min_fields
  stddev: token_stddev_fields
  stddev_pop: token_stddev_pop_fields
  stddev_samp: token_stddev_samp_fields
  sum: token_sum_fields
  var_pop: token_var_pop_fields
  var_samp: token_var_samp_fields
  variance: token_variance_fields
}

"""aggregate avg on columns"""
type token_avg_fields {
  supply: Float
}

"""
Boolean expression to filter rows from the table "token". All fields are combined with a logical 'AND'.
"""
input token_bool_exp {
  _and: [token_bool_exp!]
  _not: token_bool_exp
  _or: [token_bool_exp!]
  id: uuid_comparison_exp
  mint: String_comparison_exp
  name: String_comparison_exp
  supply: numeric_comparison_exp
  symbol: String_comparison_exp
  token_price_histories: token_price_history_bool_exp
  token_price_histories_aggregate: token_price_history_aggregate_bool_exp
  token_transactions: token_transaction_bool_exp
  token_transactions_aggregate: token_transaction_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
  uri: String_comparison_exp
}

"""
unique or primary key constraints on table "token"
"""
enum token_constraint {
  """
  unique or primary key constraint on columns "mint"
  """
  token_mint_key

  """
  unique or primary key constraint on columns "id"
  """
  token_pkey
}

"""
input type for incrementing numeric columns in table "token"
"""
input token_inc_input {
  supply: numeric
}

"""
input type for inserting data into table "token"
"""
input token_insert_input {
  id: uuid

  """token mint address (only for real tokens)"""
  mint: String
  name: String
  supply: numeric
  symbol: String
  token_price_histories: token_price_history_arr_rel_insert_input
  token_transactions: token_transaction_arr_rel_insert_input
  updated_at: timestamptz
  uri: String
}

"""aggregate max on columns"""
type token_max_fields {
  id: uuid

  """token mint address (only for real tokens)"""
  mint: String
  name: String
  supply: numeric
  symbol: String
  updated_at: timestamptz
  uri: String
}

"""aggregate min on columns"""
type token_min_fields {
  id: uuid

  """token mint address (only for real tokens)"""
  mint: String
  name: String
  supply: numeric
  symbol: String
  updated_at: timestamptz
  uri: String
}

"""
response of any mutation on the table "token"
"""
type token_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [token!]!
}

"""
input type for inserting object relation for remote table "token"
"""
input token_obj_rel_insert_input {
  data: token_insert_input!

  """upsert condition"""
  on_conflict: token_on_conflict
}

"""
on_conflict condition type for table "token"
"""
input token_on_conflict {
  constraint: token_constraint!
  update_columns: [token_update_column!]! = []
  where: token_bool_exp
}

"""Ordering options when selecting data from "token"."""
input token_order_by {
  id: order_by
  mint: order_by
  name: order_by
  supply: order_by
  symbol: order_by
  token_price_histories_aggregate: token_price_history_aggregate_order_by
  token_transactions_aggregate: token_transaction_aggregate_order_by
  updated_at: order_by
  uri: order_by
}

"""primary key columns input for table: token"""
input token_pk_columns_input {
  id: uuid!
}

"""
columns and relationships of "token_price_history"
"""
type token_price_history {
  created_at: timestamptz!
  id: uuid!
  internal_token_transaction_ref: uuid
  price: numeric!
  token: uuid!

  """An object relationship"""
  token_relationship: token!

  """An object relationship"""
  token_transaction: token_transaction
}

"""
aggregated selection of "token_price_history"
"""
type token_price_history_aggregate {
  aggregate: token_price_history_aggregate_fields
  nodes: [token_price_history!]!
}

input token_price_history_aggregate_bool_exp {
  count: token_price_history_aggregate_bool_exp_count
}

input token_price_history_aggregate_bool_exp_count {
  arguments: [token_price_history_select_column!]
  distinct: Boolean
  filter: token_price_history_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "token_price_history"
"""
type token_price_history_aggregate_fields {
  avg: token_price_history_avg_fields
  count(columns: [token_price_history_select_column!], distinct: Boolean): Int!
  max: token_price_history_max_fields
  min: token_price_history_min_fields
  stddev: token_price_history_stddev_fields
  stddev_pop: token_price_history_stddev_pop_fields
  stddev_samp: token_price_history_stddev_samp_fields
  sum: token_price_history_sum_fields
  var_pop: token_price_history_var_pop_fields
  var_samp: token_price_history_var_samp_fields
  variance: token_price_history_variance_fields
}

"""
order by aggregate values of table "token_price_history"
"""
input token_price_history_aggregate_order_by {
  avg: token_price_history_avg_order_by
  count: order_by
  max: token_price_history_max_order_by
  min: token_price_history_min_order_by
  stddev: token_price_history_stddev_order_by
  stddev_pop: token_price_history_stddev_pop_order_by
  stddev_samp: token_price_history_stddev_samp_order_by
  sum: token_price_history_sum_order_by
  var_pop: token_price_history_var_pop_order_by
  var_samp: token_price_history_var_samp_order_by
  variance: token_price_history_variance_order_by
}

"""
input type for inserting array relation for remote table "token_price_history"
"""
input token_price_history_arr_rel_insert_input {
  data: [token_price_history_insert_input!]!

  """upsert condition"""
  on_conflict: token_price_history_on_conflict
}

"""aggregate avg on columns"""
type token_price_history_avg_fields {
  price: Float
}

"""
order by avg() on columns of table "token_price_history"
"""
input token_price_history_avg_order_by {
  price: order_by
}

"""
Boolean expression to filter rows from the table "token_price_history". All fields are combined with a logical 'AND'.
"""
input token_price_history_bool_exp {
  _and: [token_price_history_bool_exp!]
  _not: token_price_history_bool_exp
  _or: [token_price_history_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  internal_token_transaction_ref: uuid_comparison_exp
  price: numeric_comparison_exp
  token: uuid_comparison_exp
  token_relationship: token_bool_exp
  token_transaction: token_transaction_bool_exp
}

"""
unique or primary key constraints on table "token_price_history"
"""
enum token_price_history_constraint {
  """
  unique or primary key constraint on columns "internal_token_transaction_ref"
  """
  token_price_history_internal_token_transaction_ref_key

  """
  unique or primary key constraint on columns "id"
  """
  token_price_history_pkey
}

"""
input type for incrementing numeric columns in table "token_price_history"
"""
input token_price_history_inc_input {
  price: numeric
}

"""
input type for inserting data into table "token_price_history"
"""
input token_price_history_insert_input {
  created_at: timestamptz
  id: uuid
  internal_token_transaction_ref: uuid
  price: numeric
  token: uuid
  token_relationship: token_obj_rel_insert_input
  token_transaction: token_transaction_obj_rel_insert_input
}

"""aggregate max on columns"""
type token_price_history_max_fields {
  created_at: timestamptz
  id: uuid
  internal_token_transaction_ref: uuid
  price: numeric
  token: uuid
}

"""
order by max() on columns of table "token_price_history"
"""
input token_price_history_max_order_by {
  created_at: order_by
  id: order_by
  internal_token_transaction_ref: order_by
  price: order_by
  token: order_by
}

"""aggregate min on columns"""
type token_price_history_min_fields {
  created_at: timestamptz
  id: uuid
  internal_token_transaction_ref: uuid
  price: numeric
  token: uuid
}

"""
order by min() on columns of table "token_price_history"
"""
input token_price_history_min_order_by {
  created_at: order_by
  id: order_by
  internal_token_transaction_ref: order_by
  price: order_by
  token: order_by
}

"""
response of any mutation on the table "token_price_history"
"""
type token_price_history_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [token_price_history!]!
}

"""
input type for inserting object relation for remote table "token_price_history"
"""
input token_price_history_obj_rel_insert_input {
  data: token_price_history_insert_input!

  """upsert condition"""
  on_conflict: token_price_history_on_conflict
}

type token_price_history_offset {
  created_at: timestamptz!
  created_at_offset: timestamptz!
  id: uuid!
  internal_token_transaction_ref: uuid
  price: numeric!
  token: uuid!
}

"""token_price_history_offsetNative Query Arguments"""
input token_price_history_offset_arguments {
  """"""
  offset: interval!
}

"""
Boolean expression to filter rows from the logical model for "token_price_history_offset". All fields are combined with a logical 'AND'.
"""
input token_price_history_offset_bool_exp_bool_exp {
  _and: [token_price_history_offset_bool_exp_bool_exp!]
  _not: token_price_history_offset_bool_exp_bool_exp
  _or: [token_price_history_offset_bool_exp_bool_exp!]
  created_at: timestamptz_comparison_exp
  created_at_offset: timestamptz_comparison_exp
  id: uuid_comparison_exp
  internal_token_transaction_ref: uuid_comparison_exp
  price: numeric_comparison_exp
  token: uuid_comparison_exp
}

enum token_price_history_offset_enum_name {
  """column name"""
  created_at

  """column name"""
  created_at_offset

  """column name"""
  id

  """column name"""
  internal_token_transaction_ref

  """column name"""
  price

  """column name"""
  token
}

"""
Ordering options when selecting data from "token_price_history_offset".
"""
input token_price_history_offset_order_by {
  created_at: order_by
  created_at_offset: order_by
  id: order_by
  internal_token_transaction_ref: order_by
  price: order_by
  token: order_by
}

"""
on_conflict condition type for table "token_price_history"
"""
input token_price_history_on_conflict {
  constraint: token_price_history_constraint!
  update_columns: [token_price_history_update_column!]! = []
  where: token_price_history_bool_exp
}

"""Ordering options when selecting data from "token_price_history"."""
input token_price_history_order_by {
  created_at: order_by
  id: order_by
  internal_token_transaction_ref: order_by
  price: order_by
  token: order_by
  token_relationship: token_order_by
  token_transaction: token_transaction_order_by
}

"""primary key columns input for table: token_price_history"""
input token_price_history_pk_columns_input {
  id: uuid!
}

"""
select columns of table "token_price_history"
"""
enum token_price_history_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  internal_token_transaction_ref

  """column name"""
  price

  """column name"""
  token
}

"""
input type for updating data in table "token_price_history"
"""
input token_price_history_set_input {
  created_at: timestamptz
  id: uuid
  internal_token_transaction_ref: uuid
  price: numeric
  token: uuid
}

"""aggregate stddev on columns"""
type token_price_history_stddev_fields {
  price: Float
}

"""
order by stddev() on columns of table "token_price_history"
"""
input token_price_history_stddev_order_by {
  price: order_by
}

"""aggregate stddev_pop on columns"""
type token_price_history_stddev_pop_fields {
  price: Float
}

"""
order by stddev_pop() on columns of table "token_price_history"
"""
input token_price_history_stddev_pop_order_by {
  price: order_by
}

"""aggregate stddev_samp on columns"""
type token_price_history_stddev_samp_fields {
  price: Float
}

"""
order by stddev_samp() on columns of table "token_price_history"
"""
input token_price_history_stddev_samp_order_by {
  price: order_by
}

"""
Streaming cursor of the table "token_price_history"
"""
input token_price_history_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_price_history_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_price_history_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  internal_token_transaction_ref: uuid
  price: numeric
  token: uuid
}

"""aggregate sum on columns"""
type token_price_history_sum_fields {
  price: numeric
}

"""
order by sum() on columns of table "token_price_history"
"""
input token_price_history_sum_order_by {
  price: order_by
}

"""
update columns of table "token_price_history"
"""
enum token_price_history_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  internal_token_transaction_ref

  """column name"""
  price

  """column name"""
  token
}

input token_price_history_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: token_price_history_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: token_price_history_set_input

  """filter the rows which have to be updated"""
  where: token_price_history_bool_exp!
}

"""aggregate var_pop on columns"""
type token_price_history_var_pop_fields {
  price: Float
}

"""
order by var_pop() on columns of table "token_price_history"
"""
input token_price_history_var_pop_order_by {
  price: order_by
}

"""aggregate var_samp on columns"""
type token_price_history_var_samp_fields {
  price: Float
}

"""
order by var_samp() on columns of table "token_price_history"
"""
input token_price_history_var_samp_order_by {
  price: order_by
}

"""aggregate variance on columns"""
type token_price_history_variance_fields {
  price: Float
}

"""
order by variance() on columns of table "token_price_history"
"""
input token_price_history_variance_order_by {
  price: order_by
}

"""
select columns of table "token"
"""
enum token_select_column {
  """column name"""
  id

  """column name"""
  mint

  """column name"""
  name

  """column name"""
  supply

  """column name"""
  symbol

  """column name"""
  updated_at

  """column name"""
  uri
}

"""
input type for updating data in table "token"
"""
input token_set_input {
  id: uuid

  """token mint address (only for real tokens)"""
  mint: String
  name: String
  supply: numeric
  symbol: String
  updated_at: timestamptz
  uri: String
}

"""aggregate stddev on columns"""
type token_stddev_fields {
  supply: Float
}

"""aggregate stddev_pop on columns"""
type token_stddev_pop_fields {
  supply: Float
}

"""aggregate stddev_samp on columns"""
type token_stddev_samp_fields {
  supply: Float
}

"""
Streaming cursor of the table "token"
"""
input token_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_stream_cursor_value_input {
  id: uuid

  """token mint address (only for real tokens)"""
  mint: String
  name: String
  supply: numeric
  symbol: String
  updated_at: timestamptz
  uri: String
}

"""aggregate sum on columns"""
type token_sum_fields {
  supply: numeric
}

"""
columns and relationships of "token_transaction"
"""
type token_transaction {
  account_transaction: uuid!

  """An object relationship"""
  account_transaction_data: account_transaction!
  amount: numeric!
  id: uuid!
  token: uuid!

  """An object relationship"""
  token_data: token!

  """An object relationship"""
  token_price: token_price_history
}

"""
aggregated selection of "token_transaction"
"""
type token_transaction_aggregate {
  aggregate: token_transaction_aggregate_fields
  nodes: [token_transaction!]!
}

input token_transaction_aggregate_bool_exp {
  count: token_transaction_aggregate_bool_exp_count
}

input token_transaction_aggregate_bool_exp_count {
  arguments: [token_transaction_select_column!]
  distinct: Boolean
  filter: token_transaction_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "token_transaction"
"""
type token_transaction_aggregate_fields {
  avg: token_transaction_avg_fields
  count(columns: [token_transaction_select_column!], distinct: Boolean): Int!
  max: token_transaction_max_fields
  min: token_transaction_min_fields
  stddev: token_transaction_stddev_fields
  stddev_pop: token_transaction_stddev_pop_fields
  stddev_samp: token_transaction_stddev_samp_fields
  sum: token_transaction_sum_fields
  var_pop: token_transaction_var_pop_fields
  var_samp: token_transaction_var_samp_fields
  variance: token_transaction_variance_fields
}

"""
order by aggregate values of table "token_transaction"
"""
input token_transaction_aggregate_order_by {
  avg: token_transaction_avg_order_by
  count: order_by
  max: token_transaction_max_order_by
  min: token_transaction_min_order_by
  stddev: token_transaction_stddev_order_by
  stddev_pop: token_transaction_stddev_pop_order_by
  stddev_samp: token_transaction_stddev_samp_order_by
  sum: token_transaction_sum_order_by
  var_pop: token_transaction_var_pop_order_by
  var_samp: token_transaction_var_samp_order_by
  variance: token_transaction_variance_order_by
}

"""
input type for inserting array relation for remote table "token_transaction"
"""
input token_transaction_arr_rel_insert_input {
  data: [token_transaction_insert_input!]!

  """upsert condition"""
  on_conflict: token_transaction_on_conflict
}

"""aggregate avg on columns"""
type token_transaction_avg_fields {
  amount: Float
}

"""
order by avg() on columns of table "token_transaction"
"""
input token_transaction_avg_order_by {
  amount: order_by
}

"""
Boolean expression to filter rows from the table "token_transaction". All fields are combined with a logical 'AND'.
"""
input token_transaction_bool_exp {
  _and: [token_transaction_bool_exp!]
  _not: token_transaction_bool_exp
  _or: [token_transaction_bool_exp!]
  account_transaction: uuid_comparison_exp
  account_transaction_data: account_transaction_bool_exp
  amount: numeric_comparison_exp
  id: uuid_comparison_exp
  token: uuid_comparison_exp
  token_data: token_bool_exp
  token_price: token_price_history_bool_exp
}

"""
unique or primary key constraints on table "token_transaction"
"""
enum token_transaction_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  token_transaction_pkey
}

"""
input type for incrementing numeric columns in table "token_transaction"
"""
input token_transaction_inc_input {
  amount: numeric
}

"""
input type for inserting data into table "token_transaction"
"""
input token_transaction_insert_input {
  account_transaction: uuid
  account_transaction_data: account_transaction_obj_rel_insert_input
  amount: numeric
  id: uuid
  token: uuid
  token_data: token_obj_rel_insert_input
  token_price: token_price_history_obj_rel_insert_input
}

"""aggregate max on columns"""
type token_transaction_max_fields {
  account_transaction: uuid
  amount: numeric
  id: uuid
  token: uuid
}

"""
order by max() on columns of table "token_transaction"
"""
input token_transaction_max_order_by {
  account_transaction: order_by
  amount: order_by
  id: order_by
  token: order_by
}

"""aggregate min on columns"""
type token_transaction_min_fields {
  account_transaction: uuid
  amount: numeric
  id: uuid
  token: uuid
}

"""
order by min() on columns of table "token_transaction"
"""
input token_transaction_min_order_by {
  account_transaction: order_by
  amount: order_by
  id: order_by
  token: order_by
}

"""
response of any mutation on the table "token_transaction"
"""
type token_transaction_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [token_transaction!]!
}

"""
input type for inserting object relation for remote table "token_transaction"
"""
input token_transaction_obj_rel_insert_input {
  data: token_transaction_insert_input!

  """upsert condition"""
  on_conflict: token_transaction_on_conflict
}

"""token_transaction_offsetNative Query Arguments"""
input token_transaction_offset_arguments {
  """"""
  offset: interval!
}

type token_transaction_offset_model {
  account: uuid!
  amount: numeric!
  created_at: timestamptz!
  created_at_offset: timestamptz!
  id: uuid!
  token: uuid!
}

"""
Boolean expression to filter rows from the logical model for "token_transaction_offset_model". All fields are combined with a logical 'AND'.
"""
input token_transaction_offset_model_bool_exp_bool_exp {
  _and: [token_transaction_offset_model_bool_exp_bool_exp!]
  _not: token_transaction_offset_model_bool_exp_bool_exp
  _or: [token_transaction_offset_model_bool_exp_bool_exp!]
  account: uuid_comparison_exp
  amount: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  created_at_offset: timestamptz_comparison_exp
  id: uuid_comparison_exp
  token: uuid_comparison_exp
}

enum token_transaction_offset_model_enum_name {
  """column name"""
  account

  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  created_at_offset

  """column name"""
  id

  """column name"""
  token
}

"""
Ordering options when selecting data from "token_transaction_offset_model".
"""
input token_transaction_offset_model_order_by {
  account: order_by
  amount: order_by
  created_at: order_by
  created_at_offset: order_by
  id: order_by
  token: order_by
}

"""
on_conflict condition type for table "token_transaction"
"""
input token_transaction_on_conflict {
  constraint: token_transaction_constraint!
  update_columns: [token_transaction_update_column!]! = []
  where: token_transaction_bool_exp
}

"""Ordering options when selecting data from "token_transaction"."""
input token_transaction_order_by {
  account_transaction: order_by
  account_transaction_data: account_transaction_order_by
  amount: order_by
  id: order_by
  token: order_by
  token_data: token_order_by
  token_price: token_price_history_order_by
}

"""primary key columns input for table: token_transaction"""
input token_transaction_pk_columns_input {
  id: uuid!
}

"""
select columns of table "token_transaction"
"""
enum token_transaction_select_column {
  """column name"""
  account_transaction

  """column name"""
  amount

  """column name"""
  id

  """column name"""
  token
}

"""
input type for updating data in table "token_transaction"
"""
input token_transaction_set_input {
  account_transaction: uuid
  amount: numeric
  id: uuid
  token: uuid
}

"""aggregate stddev on columns"""
type token_transaction_stddev_fields {
  amount: Float
}

"""
order by stddev() on columns of table "token_transaction"
"""
input token_transaction_stddev_order_by {
  amount: order_by
}

"""aggregate stddev_pop on columns"""
type token_transaction_stddev_pop_fields {
  amount: Float
}

"""
order by stddev_pop() on columns of table "token_transaction"
"""
input token_transaction_stddev_pop_order_by {
  amount: order_by
}

"""aggregate stddev_samp on columns"""
type token_transaction_stddev_samp_fields {
  amount: Float
}

"""
order by stddev_samp() on columns of table "token_transaction"
"""
input token_transaction_stddev_samp_order_by {
  amount: order_by
}

"""
Streaming cursor of the table "token_transaction"
"""
input token_transaction_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_transaction_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_transaction_stream_cursor_value_input {
  account_transaction: uuid
  amount: numeric
  id: uuid
  token: uuid
}

"""aggregate sum on columns"""
type token_transaction_sum_fields {
  amount: numeric
}

"""
order by sum() on columns of table "token_transaction"
"""
input token_transaction_sum_order_by {
  amount: order_by
}

"""
update columns of table "token_transaction"
"""
enum token_transaction_update_column {
  """column name"""
  account_transaction

  """column name"""
  amount

  """column name"""
  id

  """column name"""
  token
}

input token_transaction_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: token_transaction_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: token_transaction_set_input

  """filter the rows which have to be updated"""
  where: token_transaction_bool_exp!
}

"""aggregate var_pop on columns"""
type token_transaction_var_pop_fields {
  amount: Float
}

"""
order by var_pop() on columns of table "token_transaction"
"""
input token_transaction_var_pop_order_by {
  amount: order_by
}

"""aggregate var_samp on columns"""
type token_transaction_var_samp_fields {
  amount: Float
}

"""
order by var_samp() on columns of table "token_transaction"
"""
input token_transaction_var_samp_order_by {
  amount: order_by
}

"""aggregate variance on columns"""
type token_transaction_variance_fields {
  amount: Float
}

"""
order by variance() on columns of table "token_transaction"
"""
input token_transaction_variance_order_by {
  amount: order_by
}

"""
update columns of table "token"
"""
enum token_update_column {
  """column name"""
  id

  """column name"""
  mint

  """column name"""
  name

  """column name"""
  supply

  """column name"""
  symbol

  """column name"""
  updated_at

  """column name"""
  uri
}

input token_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: token_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: token_set_input

  """filter the rows which have to be updated"""
  where: token_bool_exp!
}

"""aggregate var_pop on columns"""
type token_var_pop_fields {
  supply: Float
}

"""aggregate var_samp on columns"""
type token_var_samp_fields {
  supply: Float
}

"""aggregate variance on columns"""
type token_variance_fields {
  supply: Float
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}