schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "analytics_client_event"
"""
type analytics_client_event {
  build: String
  created_at: timestamptz!
  error_details: String
  id: uuid!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  name: String!
  source: String
  user: String!
  user_agent: String!
}

"""
aggregated selection of "analytics_client_event"
"""
type analytics_client_event_aggregate {
  aggregate: analytics_client_event_aggregate_fields
  nodes: [analytics_client_event!]!
}

"""
aggregate fields of "analytics_client_event"
"""
type analytics_client_event_aggregate_fields {
  count(columns: [analytics_client_event_select_column!], distinct: Boolean): Int!
  max: analytics_client_event_max_fields
  min: analytics_client_event_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input analytics_client_event_append_input {
  metadata: jsonb
}

"""
Boolean expression to filter rows from the table "analytics_client_event". All fields are combined with a logical 'AND'.
"""
input analytics_client_event_bool_exp {
  _and: [analytics_client_event_bool_exp!]
  _not: analytics_client_event_bool_exp
  _or: [analytics_client_event_bool_exp!]
  build: String_comparison_exp
  created_at: timestamptz_comparison_exp
  error_details: String_comparison_exp
  id: uuid_comparison_exp
  metadata: jsonb_comparison_exp
  name: String_comparison_exp
  source: String_comparison_exp
  user: String_comparison_exp
  user_agent: String_comparison_exp
}

"""
unique or primary key constraints on table "analytics_client_event"
"""
enum analytics_client_event_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  analytics_client_events_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input analytics_client_event_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input analytics_client_event_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input analytics_client_event_delete_key_input {
  metadata: String
}

"""
input type for inserting data into table "analytics_client_event"
"""
input analytics_client_event_insert_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  metadata: jsonb
  name: String
  source: String
  user: String
  user_agent: String
}

"""aggregate max on columns"""
type analytics_client_event_max_fields {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  name: String
  source: String
  user: String
  user_agent: String
}

"""aggregate min on columns"""
type analytics_client_event_min_fields {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  name: String
  source: String
  user: String
  user_agent: String
}

"""
response of any mutation on the table "analytics_client_event"
"""
type analytics_client_event_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [analytics_client_event!]!
}

"""
on_conflict condition type for table "analytics_client_event"
"""
input analytics_client_event_on_conflict {
  constraint: analytics_client_event_constraint!
  update_columns: [analytics_client_event_update_column!]! = []
  where: analytics_client_event_bool_exp
}

"""Ordering options when selecting data from "analytics_client_event"."""
input analytics_client_event_order_by {
  build: order_by
  created_at: order_by
  error_details: order_by
  id: order_by
  metadata: order_by
  name: order_by
  source: order_by
  user: order_by
  user_agent: order_by
}

"""primary key columns input for table: analytics_client_event"""
input analytics_client_event_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input analytics_client_event_prepend_input {
  metadata: jsonb
}

"""
select columns of table "analytics_client_event"
"""
enum analytics_client_event_select_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  name

  """column name"""
  source

  """column name"""
  user

  """column name"""
  user_agent
}

"""
input type for updating data in table "analytics_client_event"
"""
input analytics_client_event_set_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  metadata: jsonb
  name: String
  source: String
  user: String
  user_agent: String
}

"""
Streaming cursor of the table "analytics_client_event"
"""
input analytics_client_event_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: analytics_client_event_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input analytics_client_event_stream_cursor_value_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  metadata: jsonb
  name: String
  source: String
  user: String
  user_agent: String
}

"""
update columns of table "analytics_client_event"
"""
enum analytics_client_event_update_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  name

  """column name"""
  source

  """column name"""
  user

  """column name"""
  user_agent
}

input analytics_client_event_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: analytics_client_event_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: analytics_client_event_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: analytics_client_event_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: analytics_client_event_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: analytics_client_event_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: analytics_client_event_set_input

  """filter the rows which have to be updated"""
  where: analytics_client_event_bool_exp!
}

"""History of trades on subscribed accounts from the indexer."""
type api_trade_history {
  created_at: timestamptz!
  id: uuid!
  token_metadata: token_metadata_scalar!
  token_mint: String!
  token_price_usd: numeric!
  volume_usd: numeric!
}

"""
columns and relationships of "api.trade_history_1min"
"""
type api_trade_history_1min {
  avg_price_usd: numeric
  bucket: timestamptz
  id: uuid
  latest_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  total_volume_usd: numeric
  trade_count: bigint
}

"""
aggregated selection of "api.trade_history_1min"
"""
type api_trade_history_1min_aggregate {
  aggregate: api_trade_history_1min_aggregate_fields
  nodes: [api_trade_history_1min!]!
}

"""
aggregate fields of "api.trade_history_1min"
"""
type api_trade_history_1min_aggregate_fields {
  avg: api_trade_history_1min_avg_fields
  count(columns: [api_trade_history_1min_select_column!], distinct: Boolean): Int!
  max: api_trade_history_1min_max_fields
  min: api_trade_history_1min_min_fields
  stddev: api_trade_history_1min_stddev_fields
  stddev_pop: api_trade_history_1min_stddev_pop_fields
  stddev_samp: api_trade_history_1min_stddev_samp_fields
  sum: api_trade_history_1min_sum_fields
  var_pop: api_trade_history_1min_var_pop_fields
  var_samp: api_trade_history_1min_var_samp_fields
  variance: api_trade_history_1min_variance_fields
}

"""aggregate avg on columns"""
type api_trade_history_1min_avg_fields {
  avg_price_usd: Float
  latest_price_usd: Float
  total_volume_usd: Float
  trade_count: Float
}

"""
Boolean expression to filter rows from the table "api.trade_history_1min". All fields are combined with a logical 'AND'.
"""
input api_trade_history_1min_bool_exp {
  _and: [api_trade_history_1min_bool_exp!]
  _not: api_trade_history_1min_bool_exp
  _or: [api_trade_history_1min_bool_exp!]
  avg_price_usd: numeric_comparison_exp
  bucket: timestamptz_comparison_exp
  id: uuid_comparison_exp
  latest_price_usd: numeric_comparison_exp
  token_metadata: token_metadata_scalar_comparison_exp
  token_mint: String_comparison_exp
  total_volume_usd: numeric_comparison_exp
  trade_count: bigint_comparison_exp
}

"""
input type for incrementing numeric columns in table "api.trade_history_1min"
"""
input api_trade_history_1min_inc_input {
  avg_price_usd: numeric
  latest_price_usd: numeric
  total_volume_usd: numeric
  trade_count: bigint
}

"""
input type for inserting data into table "api.trade_history_1min"
"""
input api_trade_history_1min_insert_input {
  avg_price_usd: numeric
  bucket: timestamptz
  id: uuid
  latest_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  total_volume_usd: numeric
  trade_count: bigint
}

"""aggregate max on columns"""
type api_trade_history_1min_max_fields {
  avg_price_usd: numeric
  bucket: timestamptz
  id: uuid
  latest_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  total_volume_usd: numeric
  trade_count: bigint
}

"""aggregate min on columns"""
type api_trade_history_1min_min_fields {
  avg_price_usd: numeric
  bucket: timestamptz
  id: uuid
  latest_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  total_volume_usd: numeric
  trade_count: bigint
}

"""
response of any mutation on the table "api.trade_history_1min"
"""
type api_trade_history_1min_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [api_trade_history_1min!]!
}

"""Ordering options when selecting data from "api.trade_history_1min"."""
input api_trade_history_1min_order_by {
  avg_price_usd: order_by
  bucket: order_by
  id: order_by
  latest_price_usd: order_by
  token_metadata: order_by
  token_mint: order_by
  total_volume_usd: order_by
  trade_count: order_by
}

"""
select columns of table "api.trade_history_1min"
"""
enum api_trade_history_1min_select_column {
  """column name"""
  avg_price_usd

  """column name"""
  bucket

  """column name"""
  id

  """column name"""
  latest_price_usd

  """column name"""
  token_metadata

  """column name"""
  token_mint

  """column name"""
  total_volume_usd

  """column name"""
  trade_count
}

"""
input type for updating data in table "api.trade_history_1min"
"""
input api_trade_history_1min_set_input {
  avg_price_usd: numeric
  bucket: timestamptz
  id: uuid
  latest_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  total_volume_usd: numeric
  trade_count: bigint
}

"""aggregate stddev on columns"""
type api_trade_history_1min_stddev_fields {
  avg_price_usd: Float
  latest_price_usd: Float
  total_volume_usd: Float
  trade_count: Float
}

"""aggregate stddev_pop on columns"""
type api_trade_history_1min_stddev_pop_fields {
  avg_price_usd: Float
  latest_price_usd: Float
  total_volume_usd: Float
  trade_count: Float
}

"""aggregate stddev_samp on columns"""
type api_trade_history_1min_stddev_samp_fields {
  avg_price_usd: Float
  latest_price_usd: Float
  total_volume_usd: Float
  trade_count: Float
}

"""
Streaming cursor of the table "api_trade_history_1min"
"""
input api_trade_history_1min_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: api_trade_history_1min_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input api_trade_history_1min_stream_cursor_value_input {
  avg_price_usd: numeric
  bucket: timestamptz
  id: uuid
  latest_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  total_volume_usd: numeric
  trade_count: bigint
}

"""aggregate sum on columns"""
type api_trade_history_1min_sum_fields {
  avg_price_usd: numeric
  latest_price_usd: numeric
  total_volume_usd: numeric
  trade_count: bigint
}

input api_trade_history_1min_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: api_trade_history_1min_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: api_trade_history_1min_set_input

  """filter the rows which have to be updated"""
  where: api_trade_history_1min_bool_exp!
}

"""aggregate var_pop on columns"""
type api_trade_history_1min_var_pop_fields {
  avg_price_usd: Float
  latest_price_usd: Float
  total_volume_usd: Float
  trade_count: Float
}

"""aggregate var_samp on columns"""
type api_trade_history_1min_var_samp_fields {
  avg_price_usd: Float
  latest_price_usd: Float
  total_volume_usd: Float
  trade_count: Float
}

"""aggregate variance on columns"""
type api_trade_history_1min_variance_fields {
  avg_price_usd: Float
  latest_price_usd: Float
  total_volume_usd: Float
  trade_count: Float
}

"""
aggregated selection of "api.trade_history"
"""
type api_trade_history_aggregate {
  aggregate: api_trade_history_aggregate_fields
  nodes: [api_trade_history!]!
}

"""
aggregate fields of "api.trade_history"
"""
type api_trade_history_aggregate_fields {
  avg: api_trade_history_avg_fields
  count(columns: [api_trade_history_select_column!], distinct: Boolean): Int!
  max: api_trade_history_max_fields
  min: api_trade_history_min_fields
  stddev: api_trade_history_stddev_fields
  stddev_pop: api_trade_history_stddev_pop_fields
  stddev_samp: api_trade_history_stddev_samp_fields
  sum: api_trade_history_sum_fields
  var_pop: api_trade_history_var_pop_fields
  var_samp: api_trade_history_var_samp_fields
  variance: api_trade_history_variance_fields
}

"""aggregate avg on columns"""
type api_trade_history_avg_fields {
  token_price_usd: Float
  volume_usd: Float
}

"""
Boolean expression to filter rows from the table "api.trade_history". All fields are combined with a logical 'AND'.
"""
input api_trade_history_bool_exp {
  _and: [api_trade_history_bool_exp!]
  _not: api_trade_history_bool_exp
  _or: [api_trade_history_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  token_metadata: token_metadata_scalar_comparison_exp
  token_mint: String_comparison_exp
  token_price_usd: numeric_comparison_exp
  volume_usd: numeric_comparison_exp
}

"""
unique or primary key constraints on table "api.trade_history"
"""
enum api_trade_history_constraint {
  """
  unique or primary key constraint on columns "created_at", "id", "token_mint"
  """
  trade_history_pkey
}

"""
input type for incrementing numeric columns in table "api.trade_history"
"""
input api_trade_history_inc_input {
  token_price_usd: numeric
  volume_usd: numeric
}

"""
input type for inserting data into table "api.trade_history"
"""
input api_trade_history_insert_input {
  created_at: timestamptz
  id: uuid
  token_metadata: token_metadata_scalar
  token_mint: String
  token_price_usd: numeric
  volume_usd: numeric
}

"""aggregate max on columns"""
type api_trade_history_max_fields {
  created_at: timestamptz
  id: uuid
  token_metadata: token_metadata_scalar
  token_mint: String
  token_price_usd: numeric
  volume_usd: numeric
}

"""aggregate min on columns"""
type api_trade_history_min_fields {
  created_at: timestamptz
  id: uuid
  token_metadata: token_metadata_scalar
  token_mint: String
  token_price_usd: numeric
  volume_usd: numeric
}

"""
response of any mutation on the table "api.trade_history"
"""
type api_trade_history_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [api_trade_history!]!
}

"""
on_conflict condition type for table "api.trade_history"
"""
input api_trade_history_on_conflict {
  constraint: api_trade_history_constraint!
  update_columns: [api_trade_history_update_column!]! = []
  where: api_trade_history_bool_exp
}

"""Ordering options when selecting data from "api.trade_history"."""
input api_trade_history_order_by {
  created_at: order_by
  id: order_by
  token_metadata: order_by
  token_mint: order_by
  token_price_usd: order_by
  volume_usd: order_by
}

"""primary key columns input for table: api.trade_history"""
input api_trade_history_pk_columns_input {
  created_at: timestamptz!
  id: uuid!
  token_mint: String!
}

"""
select columns of table "api.trade_history"
"""
enum api_trade_history_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  token_metadata

  """column name"""
  token_mint

  """column name"""
  token_price_usd

  """column name"""
  volume_usd
}

"""
input type for updating data in table "api.trade_history"
"""
input api_trade_history_set_input {
  created_at: timestamptz
  id: uuid
  token_metadata: token_metadata_scalar
  token_mint: String
  token_price_usd: numeric
  volume_usd: numeric
}

"""aggregate stddev on columns"""
type api_trade_history_stddev_fields {
  token_price_usd: Float
  volume_usd: Float
}

"""aggregate stddev_pop on columns"""
type api_trade_history_stddev_pop_fields {
  token_price_usd: Float
  volume_usd: Float
}

"""aggregate stddev_samp on columns"""
type api_trade_history_stddev_samp_fields {
  token_price_usd: Float
  volume_usd: Float
}

"""
Streaming cursor of the table "api_trade_history"
"""
input api_trade_history_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: api_trade_history_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input api_trade_history_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  token_metadata: token_metadata_scalar
  token_mint: String
  token_price_usd: numeric
  volume_usd: numeric
}

"""aggregate sum on columns"""
type api_trade_history_sum_fields {
  token_price_usd: numeric
  volume_usd: numeric
}

"""
update columns of table "api.trade_history"
"""
enum api_trade_history_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  token_metadata

  """column name"""
  token_mint

  """column name"""
  token_price_usd

  """column name"""
  volume_usd
}

input api_trade_history_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: api_trade_history_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: api_trade_history_set_input

  """filter the rows which have to be updated"""
  where: api_trade_history_bool_exp!
}

"""aggregate var_pop on columns"""
type api_trade_history_var_pop_fields {
  token_price_usd: Float
  volume_usd: Float
}

"""aggregate var_samp on columns"""
type api_trade_history_var_samp_fields {
  token_price_usd: Float
  volume_usd: Float
}

"""aggregate variance on columns"""
type api_trade_history_variance_fields {
  token_price_usd: Float
  volume_usd: Float
}

type balance_offset_model {
  balance: numeric!
}

"""
Boolean expression to filter rows from the logical model for "balance_offset_model". All fields are combined with a logical 'AND'.
"""
input balance_offset_model_bool_exp_bool_exp {
  _and: [balance_offset_model_bool_exp_bool_exp!]
  _not: balance_offset_model_bool_exp_bool_exp
  _or: [balance_offset_model_bool_exp_bool_exp!]
  balance: numeric_comparison_exp
}

enum balance_offset_model_enum_name {
  """column name"""
  balance
}

"""Ordering options when selecting data from "balance_offset_model"."""
input balance_offset_model_order_by {
  balance: order_by
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

input buy_token_args {
  amount_to_buy: numeric
  token_address: String
  token_price: float8
  user_wallet: String
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

scalar interval

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  execute VOLATILE function "buy_token" which returns "token_transaction"
  """
  buy_token(
    """
    input parameters for function "buy_token"
    """
    args: buy_token_args!

    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): token_transaction

  """
  delete data from the table: "analytics_client_event"
  """
  delete_analytics_client_event(
    """filter the rows which have to be deleted"""
    where: analytics_client_event_bool_exp!
  ): analytics_client_event_mutation_response

  """
  delete single row from the table: "analytics_client_event"
  """
  delete_analytics_client_event_by_pk(id: uuid!): analytics_client_event

  """
  delete data from the table: "api.trade_history"
  """
  delete_api_trade_history(
    """filter the rows which have to be deleted"""
    where: api_trade_history_bool_exp!
  ): api_trade_history_mutation_response

  """
  delete data from the table: "api.trade_history_1min"
  """
  delete_api_trade_history_1min(
    """filter the rows which have to be deleted"""
    where: api_trade_history_1min_bool_exp!
  ): api_trade_history_1min_mutation_response

  """
  delete single row from the table: "api.trade_history"
  """
  delete_api_trade_history_by_pk(created_at: timestamptz!, id: uuid!, token_mint: String!): api_trade_history

  """
  delete data from the table: "token_transaction"
  """
  delete_token_transaction(
    """filter the rows which have to be deleted"""
    where: token_transaction_bool_exp!
  ): token_transaction_mutation_response

  """
  delete single row from the table: "token_transaction"
  """
  delete_token_transaction_by_pk(id: uuid!): token_transaction

  """
  delete data from the table: "wallet_transaction"
  """
  delete_wallet_transaction(
    """filter the rows which have to be deleted"""
    where: wallet_transaction_bool_exp!
  ): wallet_transaction_mutation_response

  """
  delete single row from the table: "wallet_transaction"
  """
  delete_wallet_transaction_by_pk(id: uuid!): wallet_transaction

  """
  insert data into the table: "analytics_client_event"
  """
  insert_analytics_client_event(
    """the rows to be inserted"""
    objects: [analytics_client_event_insert_input!]!

    """upsert condition"""
    on_conflict: analytics_client_event_on_conflict
  ): analytics_client_event_mutation_response

  """
  insert a single row into the table: "analytics_client_event"
  """
  insert_analytics_client_event_one(
    """the row to be inserted"""
    object: analytics_client_event_insert_input!

    """upsert condition"""
    on_conflict: analytics_client_event_on_conflict
  ): analytics_client_event

  """
  insert data into the table: "api.trade_history"
  """
  insert_api_trade_history(
    """the rows to be inserted"""
    objects: [api_trade_history_insert_input!]!

    """upsert condition"""
    on_conflict: api_trade_history_on_conflict
  ): api_trade_history_mutation_response

  """
  insert data into the table: "api.trade_history_1min"
  """
  insert_api_trade_history_1min(
    """the rows to be inserted"""
    objects: [api_trade_history_1min_insert_input!]!
  ): api_trade_history_1min_mutation_response

  """
  insert a single row into the table: "api.trade_history_1min"
  """
  insert_api_trade_history_1min_one(
    """the row to be inserted"""
    object: api_trade_history_1min_insert_input!
  ): api_trade_history_1min

  """
  insert a single row into the table: "api.trade_history"
  """
  insert_api_trade_history_one(
    """the row to be inserted"""
    object: api_trade_history_insert_input!

    """upsert condition"""
    on_conflict: api_trade_history_on_conflict
  ): api_trade_history

  """
  insert data into the table: "token_transaction"
  """
  insert_token_transaction(
    """the rows to be inserted"""
    objects: [token_transaction_insert_input!]!

    """upsert condition"""
    on_conflict: token_transaction_on_conflict
  ): token_transaction_mutation_response

  """
  insert a single row into the table: "token_transaction"
  """
  insert_token_transaction_one(
    """the row to be inserted"""
    object: token_transaction_insert_input!

    """upsert condition"""
    on_conflict: token_transaction_on_conflict
  ): token_transaction

  """
  insert data into the table: "wallet_transaction"
  """
  insert_wallet_transaction(
    """the rows to be inserted"""
    objects: [wallet_transaction_insert_input!]!

    """upsert condition"""
    on_conflict: wallet_transaction_on_conflict
  ): wallet_transaction_mutation_response

  """
  insert a single row into the table: "wallet_transaction"
  """
  insert_wallet_transaction_one(
    """the row to be inserted"""
    object: wallet_transaction_insert_input!

    """upsert condition"""
    on_conflict: wallet_transaction_on_conflict
  ): wallet_transaction

  """
  execute VOLATILE function "sell_token" which returns "token_transaction"
  """
  sell_token(
    """
    input parameters for function "sell_token"
    """
    args: sell_token_args!

    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): token_transaction

  """
  update data of the table: "analytics_client_event"
  """
  update_analytics_client_event(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: analytics_client_event_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: analytics_client_event_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: analytics_client_event_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: analytics_client_event_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: analytics_client_event_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: analytics_client_event_set_input

    """filter the rows which have to be updated"""
    where: analytics_client_event_bool_exp!
  ): analytics_client_event_mutation_response

  """
  update single row of the table: "analytics_client_event"
  """
  update_analytics_client_event_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: analytics_client_event_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: analytics_client_event_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: analytics_client_event_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: analytics_client_event_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: analytics_client_event_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: analytics_client_event_set_input
    pk_columns: analytics_client_event_pk_columns_input!
  ): analytics_client_event

  """
  update multiples rows of table: "analytics_client_event"
  """
  update_analytics_client_event_many(
    """updates to execute, in order"""
    updates: [analytics_client_event_updates!]!
  ): [analytics_client_event_mutation_response]

  """
  update data of the table: "api.trade_history"
  """
  update_api_trade_history(
    """increments the numeric columns with given value of the filtered values"""
    _inc: api_trade_history_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: api_trade_history_set_input

    """filter the rows which have to be updated"""
    where: api_trade_history_bool_exp!
  ): api_trade_history_mutation_response

  """
  update data of the table: "api.trade_history_1min"
  """
  update_api_trade_history_1min(
    """increments the numeric columns with given value of the filtered values"""
    _inc: api_trade_history_1min_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: api_trade_history_1min_set_input

    """filter the rows which have to be updated"""
    where: api_trade_history_1min_bool_exp!
  ): api_trade_history_1min_mutation_response

  """
  update multiples rows of table: "api.trade_history_1min"
  """
  update_api_trade_history_1min_many(
    """updates to execute, in order"""
    updates: [api_trade_history_1min_updates!]!
  ): [api_trade_history_1min_mutation_response]

  """
  update single row of the table: "api.trade_history"
  """
  update_api_trade_history_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: api_trade_history_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: api_trade_history_set_input
    pk_columns: api_trade_history_pk_columns_input!
  ): api_trade_history

  """
  update multiples rows of table: "api.trade_history"
  """
  update_api_trade_history_many(
    """updates to execute, in order"""
    updates: [api_trade_history_updates!]!
  ): [api_trade_history_mutation_response]

  """
  update data of the table: "token_transaction"
  """
  update_token_transaction(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_transaction_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_transaction_set_input

    """filter the rows which have to be updated"""
    where: token_transaction_bool_exp!
  ): token_transaction_mutation_response

  """
  update single row of the table: "token_transaction"
  """
  update_token_transaction_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_transaction_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_transaction_set_input
    pk_columns: token_transaction_pk_columns_input!
  ): token_transaction

  """
  update multiples rows of table: "token_transaction"
  """
  update_token_transaction_many(
    """updates to execute, in order"""
    updates: [token_transaction_updates!]!
  ): [token_transaction_mutation_response]

  """
  update data of the table: "wallet_transaction"
  """
  update_wallet_transaction(
    """increments the numeric columns with given value of the filtered values"""
    _inc: wallet_transaction_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: wallet_transaction_set_input

    """filter the rows which have to be updated"""
    where: wallet_transaction_bool_exp!
  ): wallet_transaction_mutation_response

  """
  update single row of the table: "wallet_transaction"
  """
  update_wallet_transaction_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: wallet_transaction_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: wallet_transaction_set_input
    pk_columns: wallet_transaction_pk_columns_input!
  ): wallet_transaction

  """
  update multiples rows of table: "wallet_transaction"
  """
  update_wallet_transaction_many(
    """updates to execute, in order"""
    updates: [wallet_transaction_updates!]!
  ): [wallet_transaction_mutation_response]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "analytics_client_event"
  """
  analytics_client_event(
    """distinct select on columns"""
    distinct_on: [analytics_client_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [analytics_client_event_order_by!]

    """filter the rows returned"""
    where: analytics_client_event_bool_exp
  ): [analytics_client_event!]!

  """
  fetch aggregated fields from the table: "analytics_client_event"
  """
  analytics_client_event_aggregate(
    """distinct select on columns"""
    distinct_on: [analytics_client_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [analytics_client_event_order_by!]

    """filter the rows returned"""
    where: analytics_client_event_bool_exp
  ): analytics_client_event_aggregate!

  """
  fetch data from the table: "analytics_client_event" using primary key columns
  """
  analytics_client_event_by_pk(id: uuid!): analytics_client_event

  """
  fetch data from the table: "api.trade_history"
  """
  api_trade_history(
    """distinct select on columns"""
    distinct_on: [api_trade_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_order_by!]

    """filter the rows returned"""
    where: api_trade_history_bool_exp
  ): [api_trade_history!]!

  """
  fetch data from the table: "api.trade_history_1min"
  """
  api_trade_history_1min(
    """distinct select on columns"""
    distinct_on: [api_trade_history_1min_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_1min_order_by!]

    """filter the rows returned"""
    where: api_trade_history_1min_bool_exp
  ): [api_trade_history_1min!]!

  """
  fetch aggregated fields from the table: "api.trade_history_1min"
  """
  api_trade_history_1min_aggregate(
    """distinct select on columns"""
    distinct_on: [api_trade_history_1min_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_1min_order_by!]

    """filter the rows returned"""
    where: api_trade_history_1min_bool_exp
  ): api_trade_history_1min_aggregate!

  """
  fetch aggregated fields from the table: "api.trade_history"
  """
  api_trade_history_aggregate(
    """distinct select on columns"""
    distinct_on: [api_trade_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_order_by!]

    """filter the rows returned"""
    where: api_trade_history_bool_exp
  ): api_trade_history_aggregate!

  """
  fetch data from the table: "api.trade_history" using primary key columns
  """
  api_trade_history_by_pk(created_at: timestamptz!, id: uuid!, token_mint: String!): api_trade_history
  token_metadata_formatted(
    """distinct select on columns"""
    distinct_on: [token_metadata_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_metadata_model_order_by!]

    """filter the rows returned"""
    where: token_metadata_model_bool_exp_bool_exp
  ): [token_metadata_model!]!
  token_stats_interval_agg(
    """token_stats_interval_aggNative Query Arguments"""
    args: token_stats_interval_agg_arguments!

    """distinct select on columns"""
    distinct_on: [token_stats_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_stats_model_order_by!]

    """filter the rows returned"""
    where: token_stats_model_bool_exp_bool_exp
  ): [token_stats_model!]!
  token_stats_interval_comp(
    """token_stats_interval_compNative Query Arguments"""
    args: token_stats_interval_comp_arguments!

    """distinct select on columns"""
    distinct_on: [token_stats_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_stats_model_order_by!]

    """filter the rows returned"""
    where: token_stats_model_bool_exp_bool_exp
  ): [token_stats_model!]!
  token_trade_history_candles(
    """token_trade_history_candlesNative Query Arguments"""
    args: token_trade_history_candles_arguments!

    """distinct select on columns"""
    distinct_on: [trade_history_candle_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trade_history_candle_model_order_by!]

    """filter the rows returned"""
    where: trade_history_candle_model_bool_exp_bool_exp
  ): [trade_history_candle_model!]!

  """
  fetch data from the table: "token_transaction"
  """
  token_transaction(
    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): [token_transaction!]!

  """
  fetch aggregated fields from the table: "token_transaction"
  """
  token_transaction_aggregate(
    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): token_transaction_aggregate!

  """
  fetch data from the table: "token_transaction" using primary key columns
  """
  token_transaction_by_pk(id: uuid!): token_transaction
  token_transaction_offset(
    """token_transaction_offsetNative Query Arguments"""
    args: token_transaction_offset_arguments!

    """distinct select on columns"""
    distinct_on: [token_transaction_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_offset_model_order_by!]

    """filter the rows returned"""
    where: token_transaction_offset_model_bool_exp_bool_exp
  ): [token_transaction_offset_model!]!
  wallet_balance_ignore_interval(
    """wallet_balance_ignore_intervalNative Query Arguments"""
    args: wallet_balance_ignore_interval_arguments!

    """distinct select on columns"""
    distinct_on: [balance_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [balance_offset_model_order_by!]

    """filter the rows returned"""
    where: balance_offset_model_bool_exp_bool_exp
  ): [balance_offset_model!]!
  wallet_token_balance_ignore_interval(
    """wallet_token_balance_ignore_intervalNative Query Arguments"""
    args: wallet_token_balance_ignore_interval_arguments!

    """distinct select on columns"""
    distinct_on: [balance_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [balance_offset_model_order_by!]

    """filter the rows returned"""
    where: balance_offset_model_bool_exp_bool_exp
  ): [balance_offset_model!]!

  """
  fetch data from the table: "wallet_transaction"
  """
  wallet_transaction(
    """distinct select on columns"""
    distinct_on: [wallet_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wallet_transaction_order_by!]

    """filter the rows returned"""
    where: wallet_transaction_bool_exp
  ): [wallet_transaction!]!

  """
  fetch aggregated fields from the table: "wallet_transaction"
  """
  wallet_transaction_aggregate(
    """distinct select on columns"""
    distinct_on: [wallet_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wallet_transaction_order_by!]

    """filter the rows returned"""
    where: wallet_transaction_bool_exp
  ): wallet_transaction_aggregate!

  """
  fetch data from the table: "wallet_transaction" using primary key columns
  """
  wallet_transaction_by_pk(id: uuid!): wallet_transaction
  wallet_transaction_offset(
    """wallet_transaction_offsetNative Query Arguments"""
    args: wallet_transaction_offset_arguments!

    """distinct select on columns"""
    distinct_on: [wallet_transaction_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wallet_transaction_offset_model_order_by!]

    """filter the rows returned"""
    where: wallet_transaction_offset_model_bool_exp_bool_exp
  ): [wallet_transaction_offset_model!]!
}

input sell_token_args {
  amount_to_sell: numeric
  token_address: String
  token_price: float8
  user_wallet: String
}

type subscription_root {
  """
  fetch data from the table: "analytics_client_event"
  """
  analytics_client_event(
    """distinct select on columns"""
    distinct_on: [analytics_client_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [analytics_client_event_order_by!]

    """filter the rows returned"""
    where: analytics_client_event_bool_exp
  ): [analytics_client_event!]!

  """
  fetch aggregated fields from the table: "analytics_client_event"
  """
  analytics_client_event_aggregate(
    """distinct select on columns"""
    distinct_on: [analytics_client_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [analytics_client_event_order_by!]

    """filter the rows returned"""
    where: analytics_client_event_bool_exp
  ): analytics_client_event_aggregate!

  """
  fetch data from the table: "analytics_client_event" using primary key columns
  """
  analytics_client_event_by_pk(id: uuid!): analytics_client_event

  """
  fetch data from the table in a streaming manner: "analytics_client_event"
  """
  analytics_client_event_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [analytics_client_event_stream_cursor_input]!

    """filter the rows returned"""
    where: analytics_client_event_bool_exp
  ): [analytics_client_event!]!

  """
  fetch data from the table: "api.trade_history"
  """
  api_trade_history(
    """distinct select on columns"""
    distinct_on: [api_trade_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_order_by!]

    """filter the rows returned"""
    where: api_trade_history_bool_exp
  ): [api_trade_history!]!

  """
  fetch data from the table: "api.trade_history_1min"
  """
  api_trade_history_1min(
    """distinct select on columns"""
    distinct_on: [api_trade_history_1min_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_1min_order_by!]

    """filter the rows returned"""
    where: api_trade_history_1min_bool_exp
  ): [api_trade_history_1min!]!

  """
  fetch aggregated fields from the table: "api.trade_history_1min"
  """
  api_trade_history_1min_aggregate(
    """distinct select on columns"""
    distinct_on: [api_trade_history_1min_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_1min_order_by!]

    """filter the rows returned"""
    where: api_trade_history_1min_bool_exp
  ): api_trade_history_1min_aggregate!

  """
  fetch data from the table in a streaming manner: "api.trade_history_1min"
  """
  api_trade_history_1min_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [api_trade_history_1min_stream_cursor_input]!

    """filter the rows returned"""
    where: api_trade_history_1min_bool_exp
  ): [api_trade_history_1min!]!

  """
  fetch aggregated fields from the table: "api.trade_history"
  """
  api_trade_history_aggregate(
    """distinct select on columns"""
    distinct_on: [api_trade_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_order_by!]

    """filter the rows returned"""
    where: api_trade_history_bool_exp
  ): api_trade_history_aggregate!

  """
  fetch data from the table: "api.trade_history" using primary key columns
  """
  api_trade_history_by_pk(created_at: timestamptz!, id: uuid!, token_mint: String!): api_trade_history

  """
  fetch data from the table in a streaming manner: "api.trade_history"
  """
  api_trade_history_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [api_trade_history_stream_cursor_input]!

    """filter the rows returned"""
    where: api_trade_history_bool_exp
  ): [api_trade_history!]!
  token_metadata_formatted(
    """distinct select on columns"""
    distinct_on: [token_metadata_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_metadata_model_order_by!]

    """filter the rows returned"""
    where: token_metadata_model_bool_exp_bool_exp
  ): [token_metadata_model!]!
  token_stats_interval_agg(
    """token_stats_interval_aggNative Query Arguments"""
    args: token_stats_interval_agg_arguments!

    """distinct select on columns"""
    distinct_on: [token_stats_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_stats_model_order_by!]

    """filter the rows returned"""
    where: token_stats_model_bool_exp_bool_exp
  ): [token_stats_model!]!
  token_stats_interval_comp(
    """token_stats_interval_compNative Query Arguments"""
    args: token_stats_interval_comp_arguments!

    """distinct select on columns"""
    distinct_on: [token_stats_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_stats_model_order_by!]

    """filter the rows returned"""
    where: token_stats_model_bool_exp_bool_exp
  ): [token_stats_model!]!
  token_trade_history_candles(
    """token_trade_history_candlesNative Query Arguments"""
    args: token_trade_history_candles_arguments!

    """distinct select on columns"""
    distinct_on: [trade_history_candle_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trade_history_candle_model_order_by!]

    """filter the rows returned"""
    where: trade_history_candle_model_bool_exp_bool_exp
  ): [trade_history_candle_model!]!

  """
  fetch data from the table: "token_transaction"
  """
  token_transaction(
    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): [token_transaction!]!

  """
  fetch aggregated fields from the table: "token_transaction"
  """
  token_transaction_aggregate(
    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): token_transaction_aggregate!

  """
  fetch data from the table: "token_transaction" using primary key columns
  """
  token_transaction_by_pk(id: uuid!): token_transaction
  token_transaction_offset(
    """token_transaction_offsetNative Query Arguments"""
    args: token_transaction_offset_arguments!

    """distinct select on columns"""
    distinct_on: [token_transaction_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_offset_model_order_by!]

    """filter the rows returned"""
    where: token_transaction_offset_model_bool_exp_bool_exp
  ): [token_transaction_offset_model!]!

  """
  fetch data from the table in a streaming manner: "token_transaction"
  """
  token_transaction_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_transaction_stream_cursor_input]!

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): [token_transaction!]!
  wallet_balance_ignore_interval(
    """wallet_balance_ignore_intervalNative Query Arguments"""
    args: wallet_balance_ignore_interval_arguments!

    """distinct select on columns"""
    distinct_on: [balance_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [balance_offset_model_order_by!]

    """filter the rows returned"""
    where: balance_offset_model_bool_exp_bool_exp
  ): [balance_offset_model!]!
  wallet_token_balance_ignore_interval(
    """wallet_token_balance_ignore_intervalNative Query Arguments"""
    args: wallet_token_balance_ignore_interval_arguments!

    """distinct select on columns"""
    distinct_on: [balance_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [balance_offset_model_order_by!]

    """filter the rows returned"""
    where: balance_offset_model_bool_exp_bool_exp
  ): [balance_offset_model!]!

  """
  fetch data from the table: "wallet_transaction"
  """
  wallet_transaction(
    """distinct select on columns"""
    distinct_on: [wallet_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wallet_transaction_order_by!]

    """filter the rows returned"""
    where: wallet_transaction_bool_exp
  ): [wallet_transaction!]!

  """
  fetch aggregated fields from the table: "wallet_transaction"
  """
  wallet_transaction_aggregate(
    """distinct select on columns"""
    distinct_on: [wallet_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wallet_transaction_order_by!]

    """filter the rows returned"""
    where: wallet_transaction_bool_exp
  ): wallet_transaction_aggregate!

  """
  fetch data from the table: "wallet_transaction" using primary key columns
  """
  wallet_transaction_by_pk(id: uuid!): wallet_transaction
  wallet_transaction_offset(
    """wallet_transaction_offsetNative Query Arguments"""
    args: wallet_transaction_offset_arguments!

    """distinct select on columns"""
    distinct_on: [wallet_transaction_offset_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wallet_transaction_offset_model_order_by!]

    """filter the rows returned"""
    where: wallet_transaction_offset_model_bool_exp_bool_exp
  ): [wallet_transaction_offset_model!]!

  """
  fetch data from the table in a streaming manner: "wallet_transaction"
  """
  wallet_transaction_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [wallet_transaction_stream_cursor_input]!

    """filter the rows returned"""
    where: wallet_transaction_bool_exp
  ): [wallet_transaction!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

type token_metadata_model {
  decimals: numeric
  description: String!
  external_url: String
  image_uri: String
  is_pump_token: Boolean!
  mint: String!
  name: String!
  supply: numeric
  symbol: String!
}

"""
Boolean expression to filter rows from the logical model for "token_metadata_model". All fields are combined with a logical 'AND'.
"""
input token_metadata_model_bool_exp_bool_exp {
  _and: [token_metadata_model_bool_exp_bool_exp!]
  _not: token_metadata_model_bool_exp_bool_exp
  _or: [token_metadata_model_bool_exp_bool_exp!]
  decimals: numeric_comparison_exp
  description: String_comparison_exp
  external_url: String_comparison_exp
  image_uri: String_comparison_exp
  is_pump_token: Boolean_comparison_exp
  mint: String_comparison_exp
  name: String_comparison_exp
  supply: numeric_comparison_exp
  symbol: String_comparison_exp
}

enum token_metadata_model_enum_name {
  """column name"""
  decimals

  """column name"""
  description

  """column name"""
  external_url

  """column name"""
  image_uri

  """column name"""
  is_pump_token

  """column name"""
  mint

  """column name"""
  name

  """column name"""
  supply

  """column name"""
  symbol
}

"""Ordering options when selecting data from "token_metadata_model"."""
input token_metadata_model_order_by {
  decimals: order_by
  description: order_by
  external_url: order_by
  image_uri: order_by
  is_pump_token: order_by
  mint: order_by
  name: order_by
  supply: order_by
  symbol: order_by
}

scalar token_metadata_scalar

"""
Boolean expression to compare columns of type "token_metadata_scalar". All fields are combined with logical 'AND'.
"""
input token_metadata_scalar_comparison_exp {
  _eq: token_metadata_scalar
  _gt: token_metadata_scalar
  _gte: token_metadata_scalar
  _in: [token_metadata_scalar!]
  _is_null: Boolean
  _lt: token_metadata_scalar
  _lte: token_metadata_scalar
  _neq: token_metadata_scalar
  _nin: [token_metadata_scalar!]
}

"""token_stats_interval_aggNative Query Arguments"""
input token_stats_interval_agg_arguments {
  """Main interval for total stats"""
  interval: interval!

  """Additional interval to get recent stats on a different timeframe"""
  recent_interval: interval!
}

"""token_stats_interval_compNative Query Arguments"""
input token_stats_interval_comp_arguments {
  """Main interval for total stats"""
  interval: interval!

  """Additional interval to get recent stats on a different timeframe"""
  recent_interval: interval!
}

type token_stats_model {
  avg_price_usd: numeric!
  latest_price_usd: numeric!
  price_change_pct: numeric!
  recent_price_change_pct: numeric!
  recent_trades: numeric!
  recent_volume_usd: numeric!
  token_metadata_decimals: numeric
  token_metadata_description: String!
  token_metadata_external_url: String
  token_metadata_image_uri: String
  token_metadata_is_pump_token: Boolean!
  token_metadata_name: String!
  token_metadata_supply: numeric
  token_metadata_symbol: String!
  token_mint: String!
  total_trades: numeric!
  total_volume_usd: numeric!
}

"""
Boolean expression to filter rows from the logical model for "token_stats_model". All fields are combined with a logical 'AND'.
"""
input token_stats_model_bool_exp_bool_exp {
  _and: [token_stats_model_bool_exp_bool_exp!]
  _not: token_stats_model_bool_exp_bool_exp
  _or: [token_stats_model_bool_exp_bool_exp!]
  avg_price_usd: numeric_comparison_exp
  latest_price_usd: numeric_comparison_exp
  price_change_pct: numeric_comparison_exp
  recent_price_change_pct: numeric_comparison_exp
  recent_trades: numeric_comparison_exp
  recent_volume_usd: numeric_comparison_exp
  token_metadata_decimals: numeric_comparison_exp
  token_metadata_description: String_comparison_exp
  token_metadata_external_url: String_comparison_exp
  token_metadata_image_uri: String_comparison_exp
  token_metadata_is_pump_token: Boolean_comparison_exp
  token_metadata_name: String_comparison_exp
  token_metadata_supply: numeric_comparison_exp
  token_metadata_symbol: String_comparison_exp
  token_mint: String_comparison_exp
  total_trades: numeric_comparison_exp
  total_volume_usd: numeric_comparison_exp
}

enum token_stats_model_enum_name {
  """column name"""
  avg_price_usd

  """column name"""
  latest_price_usd

  """column name"""
  price_change_pct

  """column name"""
  recent_price_change_pct

  """column name"""
  recent_trades

  """column name"""
  recent_volume_usd

  """column name"""
  token_metadata_decimals

  """column name"""
  token_metadata_description

  """column name"""
  token_metadata_external_url

  """column name"""
  token_metadata_image_uri

  """column name"""
  token_metadata_is_pump_token

  """column name"""
  token_metadata_name

  """column name"""
  token_metadata_supply

  """column name"""
  token_metadata_symbol

  """column name"""
  token_mint

  """column name"""
  total_trades

  """column name"""
  total_volume_usd
}

"""Ordering options when selecting data from "token_stats_model"."""
input token_stats_model_order_by {
  avg_price_usd: order_by
  latest_price_usd: order_by
  price_change_pct: order_by
  recent_price_change_pct: order_by
  recent_trades: order_by
  recent_volume_usd: order_by
  token_metadata_decimals: order_by
  token_metadata_description: order_by
  token_metadata_external_url: order_by
  token_metadata_image_uri: order_by
  token_metadata_is_pump_token: order_by
  token_metadata_name: order_by
  token_metadata_supply: order_by
  token_metadata_symbol: order_by
  token_mint: order_by
  total_trades: order_by
  total_volume_usd: order_by
}

"""token_trade_history_candlesNative Query Arguments"""
input token_trade_history_candles_arguments {
  """"""
  candle_interval: interval!
}

"""
columns and relationships of "token_transaction"
"""
type token_transaction {
  amount: numeric!
  id: uuid!
  token: String!
  token_price: float8!
  wallet_transaction: uuid!

  """An object relationship"""
  wallet_transaction_data: wallet_transaction!
}

"""
aggregated selection of "token_transaction"
"""
type token_transaction_aggregate {
  aggregate: token_transaction_aggregate_fields
  nodes: [token_transaction!]!
}

input token_transaction_aggregate_bool_exp {
  avg: token_transaction_aggregate_bool_exp_avg
  corr: token_transaction_aggregate_bool_exp_corr
  count: token_transaction_aggregate_bool_exp_count
  covar_samp: token_transaction_aggregate_bool_exp_covar_samp
  max: token_transaction_aggregate_bool_exp_max
  min: token_transaction_aggregate_bool_exp_min
  stddev_samp: token_transaction_aggregate_bool_exp_stddev_samp
  sum: token_transaction_aggregate_bool_exp_sum
  var_samp: token_transaction_aggregate_bool_exp_var_samp
}

input token_transaction_aggregate_bool_exp_avg {
  arguments: token_transaction_select_column_token_transaction_aggregate_bool_exp_avg_arguments_columns!
  distinct: Boolean
  filter: token_transaction_bool_exp
  predicate: float8_comparison_exp!
}

input token_transaction_aggregate_bool_exp_corr {
  arguments: token_transaction_aggregate_bool_exp_corr_arguments!
  distinct: Boolean
  filter: token_transaction_bool_exp
  predicate: float8_comparison_exp!
}

input token_transaction_aggregate_bool_exp_corr_arguments {
  X: token_transaction_select_column_token_transaction_aggregate_bool_exp_corr_arguments_columns!
  Y: token_transaction_select_column_token_transaction_aggregate_bool_exp_corr_arguments_columns!
}

input token_transaction_aggregate_bool_exp_count {
  arguments: [token_transaction_select_column!]
  distinct: Boolean
  filter: token_transaction_bool_exp
  predicate: Int_comparison_exp!
}

input token_transaction_aggregate_bool_exp_covar_samp {
  arguments: token_transaction_aggregate_bool_exp_covar_samp_arguments!
  distinct: Boolean
  filter: token_transaction_bool_exp
  predicate: float8_comparison_exp!
}

input token_transaction_aggregate_bool_exp_covar_samp_arguments {
  X: token_transaction_select_column_token_transaction_aggregate_bool_exp_covar_samp_arguments_columns!
  Y: token_transaction_select_column_token_transaction_aggregate_bool_exp_covar_samp_arguments_columns!
}

input token_transaction_aggregate_bool_exp_max {
  arguments: token_transaction_select_column_token_transaction_aggregate_bool_exp_max_arguments_columns!
  distinct: Boolean
  filter: token_transaction_bool_exp
  predicate: float8_comparison_exp!
}

input token_transaction_aggregate_bool_exp_min {
  arguments: token_transaction_select_column_token_transaction_aggregate_bool_exp_min_arguments_columns!
  distinct: Boolean
  filter: token_transaction_bool_exp
  predicate: float8_comparison_exp!
}

input token_transaction_aggregate_bool_exp_stddev_samp {
  arguments: token_transaction_select_column_token_transaction_aggregate_bool_exp_stddev_samp_arguments_columns!
  distinct: Boolean
  filter: token_transaction_bool_exp
  predicate: float8_comparison_exp!
}

input token_transaction_aggregate_bool_exp_sum {
  arguments: token_transaction_select_column_token_transaction_aggregate_bool_exp_sum_arguments_columns!
  distinct: Boolean
  filter: token_transaction_bool_exp
  predicate: float8_comparison_exp!
}

input token_transaction_aggregate_bool_exp_var_samp {
  arguments: token_transaction_select_column_token_transaction_aggregate_bool_exp_var_samp_arguments_columns!
  distinct: Boolean
  filter: token_transaction_bool_exp
  predicate: float8_comparison_exp!
}

"""
aggregate fields of "token_transaction"
"""
type token_transaction_aggregate_fields {
  avg: token_transaction_avg_fields
  count(columns: [token_transaction_select_column!], distinct: Boolean): Int!
  max: token_transaction_max_fields
  min: token_transaction_min_fields
  stddev: token_transaction_stddev_fields
  stddev_pop: token_transaction_stddev_pop_fields
  stddev_samp: token_transaction_stddev_samp_fields
  sum: token_transaction_sum_fields
  var_pop: token_transaction_var_pop_fields
  var_samp: token_transaction_var_samp_fields
  variance: token_transaction_variance_fields
}

"""
order by aggregate values of table "token_transaction"
"""
input token_transaction_aggregate_order_by {
  avg: token_transaction_avg_order_by
  count: order_by
  max: token_transaction_max_order_by
  min: token_transaction_min_order_by
  stddev: token_transaction_stddev_order_by
  stddev_pop: token_transaction_stddev_pop_order_by
  stddev_samp: token_transaction_stddev_samp_order_by
  sum: token_transaction_sum_order_by
  var_pop: token_transaction_var_pop_order_by
  var_samp: token_transaction_var_samp_order_by
  variance: token_transaction_variance_order_by
}

"""
input type for inserting array relation for remote table "token_transaction"
"""
input token_transaction_arr_rel_insert_input {
  data: [token_transaction_insert_input!]!

  """upsert condition"""
  on_conflict: token_transaction_on_conflict
}

"""aggregate avg on columns"""
type token_transaction_avg_fields {
  amount: Float
  token_price: Float
}

"""
order by avg() on columns of table "token_transaction"
"""
input token_transaction_avg_order_by {
  amount: order_by
  token_price: order_by
}

"""
Boolean expression to filter rows from the table "token_transaction". All fields are combined with a logical 'AND'.
"""
input token_transaction_bool_exp {
  _and: [token_transaction_bool_exp!]
  _not: token_transaction_bool_exp
  _or: [token_transaction_bool_exp!]
  amount: numeric_comparison_exp
  id: uuid_comparison_exp
  token: String_comparison_exp
  token_price: float8_comparison_exp
  wallet_transaction: uuid_comparison_exp
  wallet_transaction_data: wallet_transaction_bool_exp
}

"""
unique or primary key constraints on table "token_transaction"
"""
enum token_transaction_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  token_transaction_pkey
}

"""
input type for incrementing numeric columns in table "token_transaction"
"""
input token_transaction_inc_input {
  amount: numeric
  token_price: float8
}

"""
input type for inserting data into table "token_transaction"
"""
input token_transaction_insert_input {
  amount: numeric
  id: uuid
  token: String
  token_price: float8
  wallet_transaction: uuid
  wallet_transaction_data: wallet_transaction_obj_rel_insert_input
}

"""aggregate max on columns"""
type token_transaction_max_fields {
  amount: numeric
  id: uuid
  token: String
  token_price: float8
  wallet_transaction: uuid
}

"""
order by max() on columns of table "token_transaction"
"""
input token_transaction_max_order_by {
  amount: order_by
  id: order_by
  token: order_by
  token_price: order_by
  wallet_transaction: order_by
}

"""aggregate min on columns"""
type token_transaction_min_fields {
  amount: numeric
  id: uuid
  token: String
  token_price: float8
  wallet_transaction: uuid
}

"""
order by min() on columns of table "token_transaction"
"""
input token_transaction_min_order_by {
  amount: order_by
  id: order_by
  token: order_by
  token_price: order_by
  wallet_transaction: order_by
}

"""
response of any mutation on the table "token_transaction"
"""
type token_transaction_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [token_transaction!]!
}

"""token_transaction_offsetNative Query Arguments"""
input token_transaction_offset_arguments {
  """"""
  offset: interval!
}

type token_transaction_offset_model {
  amount: numeric!
  created_at: timestamptz!
  created_at_offset: timestamptz!
  id: uuid!
  token: String!
  wallet: String!
}

"""
Boolean expression to filter rows from the logical model for "token_transaction_offset_model". All fields are combined with a logical 'AND'.
"""
input token_transaction_offset_model_bool_exp_bool_exp {
  _and: [token_transaction_offset_model_bool_exp_bool_exp!]
  _not: token_transaction_offset_model_bool_exp_bool_exp
  _or: [token_transaction_offset_model_bool_exp_bool_exp!]
  amount: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  created_at_offset: timestamptz_comparison_exp
  id: uuid_comparison_exp
  token: String_comparison_exp
  wallet: String_comparison_exp
}

enum token_transaction_offset_model_enum_name {
  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  created_at_offset

  """column name"""
  id

  """column name"""
  token

  """column name"""
  wallet
}

"""
Ordering options when selecting data from "token_transaction_offset_model".
"""
input token_transaction_offset_model_order_by {
  amount: order_by
  created_at: order_by
  created_at_offset: order_by
  id: order_by
  token: order_by
  wallet: order_by
}

"""
on_conflict condition type for table "token_transaction"
"""
input token_transaction_on_conflict {
  constraint: token_transaction_constraint!
  update_columns: [token_transaction_update_column!]! = []
  where: token_transaction_bool_exp
}

"""Ordering options when selecting data from "token_transaction"."""
input token_transaction_order_by {
  amount: order_by
  id: order_by
  token: order_by
  token_price: order_by
  wallet_transaction: order_by
  wallet_transaction_data: wallet_transaction_order_by
}

"""primary key columns input for table: token_transaction"""
input token_transaction_pk_columns_input {
  id: uuid!
}

"""
select columns of table "token_transaction"
"""
enum token_transaction_select_column {
  """column name"""
  amount

  """column name"""
  id

  """column name"""
  token

  """column name"""
  token_price

  """column name"""
  wallet_transaction
}

"""
select "token_transaction_aggregate_bool_exp_avg_arguments_columns" columns of table "token_transaction"
"""
enum token_transaction_select_column_token_transaction_aggregate_bool_exp_avg_arguments_columns {
  """column name"""
  token_price
}

"""
select "token_transaction_aggregate_bool_exp_corr_arguments_columns" columns of table "token_transaction"
"""
enum token_transaction_select_column_token_transaction_aggregate_bool_exp_corr_arguments_columns {
  """column name"""
  token_price
}

"""
select "token_transaction_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "token_transaction"
"""
enum token_transaction_select_column_token_transaction_aggregate_bool_exp_covar_samp_arguments_columns {
  """column name"""
  token_price
}

"""
select "token_transaction_aggregate_bool_exp_max_arguments_columns" columns of table "token_transaction"
"""
enum token_transaction_select_column_token_transaction_aggregate_bool_exp_max_arguments_columns {
  """column name"""
  token_price
}

"""
select "token_transaction_aggregate_bool_exp_min_arguments_columns" columns of table "token_transaction"
"""
enum token_transaction_select_column_token_transaction_aggregate_bool_exp_min_arguments_columns {
  """column name"""
  token_price
}

"""
select "token_transaction_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "token_transaction"
"""
enum token_transaction_select_column_token_transaction_aggregate_bool_exp_stddev_samp_arguments_columns {
  """column name"""
  token_price
}

"""
select "token_transaction_aggregate_bool_exp_sum_arguments_columns" columns of table "token_transaction"
"""
enum token_transaction_select_column_token_transaction_aggregate_bool_exp_sum_arguments_columns {
  """column name"""
  token_price
}

"""
select "token_transaction_aggregate_bool_exp_var_samp_arguments_columns" columns of table "token_transaction"
"""
enum token_transaction_select_column_token_transaction_aggregate_bool_exp_var_samp_arguments_columns {
  """column name"""
  token_price
}

"""
input type for updating data in table "token_transaction"
"""
input token_transaction_set_input {
  amount: numeric
  id: uuid
  token: String
  token_price: float8
  wallet_transaction: uuid
}

"""aggregate stddev on columns"""
type token_transaction_stddev_fields {
  amount: Float
  token_price: Float
}

"""
order by stddev() on columns of table "token_transaction"
"""
input token_transaction_stddev_order_by {
  amount: order_by
  token_price: order_by
}

"""aggregate stddev_pop on columns"""
type token_transaction_stddev_pop_fields {
  amount: Float
  token_price: Float
}

"""
order by stddev_pop() on columns of table "token_transaction"
"""
input token_transaction_stddev_pop_order_by {
  amount: order_by
  token_price: order_by
}

"""aggregate stddev_samp on columns"""
type token_transaction_stddev_samp_fields {
  amount: Float
  token_price: Float
}

"""
order by stddev_samp() on columns of table "token_transaction"
"""
input token_transaction_stddev_samp_order_by {
  amount: order_by
  token_price: order_by
}

"""
Streaming cursor of the table "token_transaction"
"""
input token_transaction_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_transaction_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_transaction_stream_cursor_value_input {
  amount: numeric
  id: uuid
  token: String
  token_price: float8
  wallet_transaction: uuid
}

"""aggregate sum on columns"""
type token_transaction_sum_fields {
  amount: numeric
  token_price: float8
}

"""
order by sum() on columns of table "token_transaction"
"""
input token_transaction_sum_order_by {
  amount: order_by
  token_price: order_by
}

"""
update columns of table "token_transaction"
"""
enum token_transaction_update_column {
  """column name"""
  amount

  """column name"""
  id

  """column name"""
  token

  """column name"""
  token_price

  """column name"""
  wallet_transaction
}

input token_transaction_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: token_transaction_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: token_transaction_set_input

  """filter the rows which have to be updated"""
  where: token_transaction_bool_exp!
}

"""aggregate var_pop on columns"""
type token_transaction_var_pop_fields {
  amount: Float
  token_price: Float
}

"""
order by var_pop() on columns of table "token_transaction"
"""
input token_transaction_var_pop_order_by {
  amount: order_by
  token_price: order_by
}

"""aggregate var_samp on columns"""
type token_transaction_var_samp_fields {
  amount: Float
  token_price: Float
}

"""
order by var_samp() on columns of table "token_transaction"
"""
input token_transaction_var_samp_order_by {
  amount: order_by
  token_price: order_by
}

"""aggregate variance on columns"""
type token_transaction_variance_fields {
  amount: Float
  token_price: Float
}

"""
order by variance() on columns of table "token_transaction"
"""
input token_transaction_variance_order_by {
  amount: order_by
  token_price: order_by
}

type trade_history_candle_model {
  bucket: timestamptz!
  close_price_usd: numeric!
  high_price_usd: numeric!
  low_price_usd: numeric!
  open_price_usd: numeric!
  token_mint: String!
  volume_usd: numeric!
}

"""
Boolean expression to filter rows from the logical model for "trade_history_candle_model". All fields are combined with a logical 'AND'.
"""
input trade_history_candle_model_bool_exp_bool_exp {
  _and: [trade_history_candle_model_bool_exp_bool_exp!]
  _not: trade_history_candle_model_bool_exp_bool_exp
  _or: [trade_history_candle_model_bool_exp_bool_exp!]
  bucket: timestamptz_comparison_exp
  close_price_usd: numeric_comparison_exp
  high_price_usd: numeric_comparison_exp
  low_price_usd: numeric_comparison_exp
  open_price_usd: numeric_comparison_exp
  token_mint: String_comparison_exp
  volume_usd: numeric_comparison_exp
}

enum trade_history_candle_model_enum_name {
  """column name"""
  bucket

  """column name"""
  close_price_usd

  """column name"""
  high_price_usd

  """column name"""
  low_price_usd

  """column name"""
  open_price_usd

  """column name"""
  token_mint

  """column name"""
  volume_usd
}

"""
Ordering options when selecting data from "trade_history_candle_model".
"""
input trade_history_candle_model_order_by {
  bucket: order_by
  close_price_usd: order_by
  high_price_usd: order_by
  low_price_usd: order_by
  open_price_usd: order_by
  token_mint: order_by
  volume_usd: order_by
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""wallet_balance_ignore_intervalNative Query Arguments"""
input wallet_balance_ignore_interval_arguments {
  """"""
  interval: interval!

  """"""
  start: timestamptz!

  """"""
  wallet: String!
}

"""wallet_token_balance_ignore_intervalNative Query Arguments"""
input wallet_token_balance_ignore_interval_arguments {
  """"""
  interval: interval!

  """"""
  start: timestamptz!

  """"""
  token: String!

  """"""
  wallet: String!
}

"""
columns and relationships of "wallet_transaction"
"""
type wallet_transaction {
  amount: numeric!
  created_at: timestamptz!
  id: uuid!

  """An array relationship"""
  token_transactions(
    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): [token_transaction!]!

  """An aggregate relationship"""
  token_transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [token_transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_transaction_order_by!]

    """filter the rows returned"""
    where: token_transaction_bool_exp
  ): token_transaction_aggregate!
  wallet: String!
}

"""
aggregated selection of "wallet_transaction"
"""
type wallet_transaction_aggregate {
  aggregate: wallet_transaction_aggregate_fields
  nodes: [wallet_transaction!]!
}

"""
aggregate fields of "wallet_transaction"
"""
type wallet_transaction_aggregate_fields {
  avg: wallet_transaction_avg_fields
  count(columns: [wallet_transaction_select_column!], distinct: Boolean): Int!
  max: wallet_transaction_max_fields
  min: wallet_transaction_min_fields
  stddev: wallet_transaction_stddev_fields
  stddev_pop: wallet_transaction_stddev_pop_fields
  stddev_samp: wallet_transaction_stddev_samp_fields
  sum: wallet_transaction_sum_fields
  var_pop: wallet_transaction_var_pop_fields
  var_samp: wallet_transaction_var_samp_fields
  variance: wallet_transaction_variance_fields
}

"""aggregate avg on columns"""
type wallet_transaction_avg_fields {
  amount: Float
}

"""
Boolean expression to filter rows from the table "wallet_transaction". All fields are combined with a logical 'AND'.
"""
input wallet_transaction_bool_exp {
  _and: [wallet_transaction_bool_exp!]
  _not: wallet_transaction_bool_exp
  _or: [wallet_transaction_bool_exp!]
  amount: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  token_transactions: token_transaction_bool_exp
  token_transactions_aggregate: token_transaction_aggregate_bool_exp
  wallet: String_comparison_exp
}

"""
unique or primary key constraints on table "wallet_transaction"
"""
enum wallet_transaction_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  account_transaction_pkey
}

"""
input type for incrementing numeric columns in table "wallet_transaction"
"""
input wallet_transaction_inc_input {
  amount: numeric
}

"""
input type for inserting data into table "wallet_transaction"
"""
input wallet_transaction_insert_input {
  amount: numeric
  created_at: timestamptz
  id: uuid
  token_transactions: token_transaction_arr_rel_insert_input
  wallet: String
}

"""aggregate max on columns"""
type wallet_transaction_max_fields {
  amount: numeric
  created_at: timestamptz
  id: uuid
  wallet: String
}

"""aggregate min on columns"""
type wallet_transaction_min_fields {
  amount: numeric
  created_at: timestamptz
  id: uuid
  wallet: String
}

"""
response of any mutation on the table "wallet_transaction"
"""
type wallet_transaction_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [wallet_transaction!]!
}

"""
input type for inserting object relation for remote table "wallet_transaction"
"""
input wallet_transaction_obj_rel_insert_input {
  data: wallet_transaction_insert_input!

  """upsert condition"""
  on_conflict: wallet_transaction_on_conflict
}

"""wallet_transaction_offsetNative Query Arguments"""
input wallet_transaction_offset_arguments {
  """"""
  offset: interval!
}

type wallet_transaction_offset_model {
  amount: numeric!
  created_at: timestamptz!
  created_at_offset: timestamptz!
  id: uuid!
  wallet: String!
}

"""
Boolean expression to filter rows from the logical model for "wallet_transaction_offset_model". All fields are combined with a logical 'AND'.
"""
input wallet_transaction_offset_model_bool_exp_bool_exp {
  _and: [wallet_transaction_offset_model_bool_exp_bool_exp!]
  _not: wallet_transaction_offset_model_bool_exp_bool_exp
  _or: [wallet_transaction_offset_model_bool_exp_bool_exp!]
  amount: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  created_at_offset: timestamptz_comparison_exp
  id: uuid_comparison_exp
  wallet: String_comparison_exp
}

enum wallet_transaction_offset_model_enum_name {
  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  created_at_offset

  """column name"""
  id

  """column name"""
  wallet
}

"""
Ordering options when selecting data from "wallet_transaction_offset_model".
"""
input wallet_transaction_offset_model_order_by {
  amount: order_by
  created_at: order_by
  created_at_offset: order_by
  id: order_by
  wallet: order_by
}

"""
on_conflict condition type for table "wallet_transaction"
"""
input wallet_transaction_on_conflict {
  constraint: wallet_transaction_constraint!
  update_columns: [wallet_transaction_update_column!]! = []
  where: wallet_transaction_bool_exp
}

"""Ordering options when selecting data from "wallet_transaction"."""
input wallet_transaction_order_by {
  amount: order_by
  created_at: order_by
  id: order_by
  token_transactions_aggregate: token_transaction_aggregate_order_by
  wallet: order_by
}

"""primary key columns input for table: wallet_transaction"""
input wallet_transaction_pk_columns_input {
  id: uuid!
}

"""
select columns of table "wallet_transaction"
"""
enum wallet_transaction_select_column {
  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  wallet
}

"""
input type for updating data in table "wallet_transaction"
"""
input wallet_transaction_set_input {
  amount: numeric
  created_at: timestamptz
  id: uuid
  wallet: String
}

"""aggregate stddev on columns"""
type wallet_transaction_stddev_fields {
  amount: Float
}

"""aggregate stddev_pop on columns"""
type wallet_transaction_stddev_pop_fields {
  amount: Float
}

"""aggregate stddev_samp on columns"""
type wallet_transaction_stddev_samp_fields {
  amount: Float
}

"""
Streaming cursor of the table "wallet_transaction"
"""
input wallet_transaction_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: wallet_transaction_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input wallet_transaction_stream_cursor_value_input {
  amount: numeric
  created_at: timestamptz
  id: uuid
  wallet: String
}

"""aggregate sum on columns"""
type wallet_transaction_sum_fields {
  amount: numeric
}

"""
update columns of table "wallet_transaction"
"""
enum wallet_transaction_update_column {
  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  wallet
}

input wallet_transaction_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: wallet_transaction_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: wallet_transaction_set_input

  """filter the rows which have to be updated"""
  where: wallet_transaction_bool_exp!
}

"""aggregate var_pop on columns"""
type wallet_transaction_var_pop_fields {
  amount: Float
}

"""aggregate var_samp on columns"""
type wallet_transaction_var_samp_fields {
  amount: Float
}

"""aggregate variance on columns"""
type wallet_transaction_variance_fields {
  amount: Float
}