schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "api.candles_history_1min"
"""
type api_candles_history_1min {
  bucket: timestamptz
  close_price_usd: numeric
  high_price_usd: numeric
  low_price_usd: numeric
  open_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  volume_usd: numeric
}

"""
aggregated selection of "api.candles_history_1min"
"""
type api_candles_history_1min_aggregate {
  aggregate: api_candles_history_1min_aggregate_fields
  nodes: [api_candles_history_1min!]!
}

"""
aggregate fields of "api.candles_history_1min"
"""
type api_candles_history_1min_aggregate_fields {
  avg: api_candles_history_1min_avg_fields
  count(columns: [api_candles_history_1min_select_column!], distinct: Boolean): Int!
  max: api_candles_history_1min_max_fields
  min: api_candles_history_1min_min_fields
  stddev: api_candles_history_1min_stddev_fields
  stddev_pop: api_candles_history_1min_stddev_pop_fields
  stddev_samp: api_candles_history_1min_stddev_samp_fields
  sum: api_candles_history_1min_sum_fields
  var_pop: api_candles_history_1min_var_pop_fields
  var_samp: api_candles_history_1min_var_samp_fields
  variance: api_candles_history_1min_variance_fields
}

"""aggregate avg on columns"""
type api_candles_history_1min_avg_fields {
  close_price_usd: Float
  high_price_usd: Float
  low_price_usd: Float
  open_price_usd: Float
  volume_usd: Float
}

"""
Boolean expression to filter rows from the table "api.candles_history_1min". All fields are combined with a logical 'AND'.
"""
input api_candles_history_1min_bool_exp {
  _and: [api_candles_history_1min_bool_exp!]
  _not: api_candles_history_1min_bool_exp
  _or: [api_candles_history_1min_bool_exp!]
  bucket: timestamptz_comparison_exp
  close_price_usd: numeric_comparison_exp
  high_price_usd: numeric_comparison_exp
  low_price_usd: numeric_comparison_exp
  open_price_usd: numeric_comparison_exp
  token_metadata: token_metadata_scalar_comparison_exp
  token_mint: String_comparison_exp
  volume_usd: numeric_comparison_exp
}

"""aggregate max on columns"""
type api_candles_history_1min_max_fields {
  bucket: timestamptz
  close_price_usd: numeric
  high_price_usd: numeric
  low_price_usd: numeric
  open_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  volume_usd: numeric
}

"""aggregate min on columns"""
type api_candles_history_1min_min_fields {
  bucket: timestamptz
  close_price_usd: numeric
  high_price_usd: numeric
  low_price_usd: numeric
  open_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  volume_usd: numeric
}

"""Ordering options when selecting data from "api.candles_history_1min"."""
input api_candles_history_1min_order_by {
  bucket: order_by
  close_price_usd: order_by
  high_price_usd: order_by
  low_price_usd: order_by
  open_price_usd: order_by
  token_metadata: order_by
  token_mint: order_by
  volume_usd: order_by
}

"""
select columns of table "api.candles_history_1min"
"""
enum api_candles_history_1min_select_column {
  """column name"""
  bucket

  """column name"""
  close_price_usd

  """column name"""
  high_price_usd

  """column name"""
  low_price_usd

  """column name"""
  open_price_usd

  """column name"""
  token_metadata

  """column name"""
  token_mint

  """column name"""
  volume_usd
}

"""aggregate stddev on columns"""
type api_candles_history_1min_stddev_fields {
  close_price_usd: Float
  high_price_usd: Float
  low_price_usd: Float
  open_price_usd: Float
  volume_usd: Float
}

"""aggregate stddev_pop on columns"""
type api_candles_history_1min_stddev_pop_fields {
  close_price_usd: Float
  high_price_usd: Float
  low_price_usd: Float
  open_price_usd: Float
  volume_usd: Float
}

"""aggregate stddev_samp on columns"""
type api_candles_history_1min_stddev_samp_fields {
  close_price_usd: Float
  high_price_usd: Float
  low_price_usd: Float
  open_price_usd: Float
  volume_usd: Float
}

"""
Streaming cursor of the table "api_candles_history_1min"
"""
input api_candles_history_1min_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: api_candles_history_1min_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input api_candles_history_1min_stream_cursor_value_input {
  bucket: timestamptz
  close_price_usd: numeric
  high_price_usd: numeric
  low_price_usd: numeric
  open_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  volume_usd: numeric
}

"""aggregate sum on columns"""
type api_candles_history_1min_sum_fields {
  close_price_usd: numeric
  high_price_usd: numeric
  low_price_usd: numeric
  open_price_usd: numeric
  volume_usd: numeric
}

"""aggregate var_pop on columns"""
type api_candles_history_1min_var_pop_fields {
  close_price_usd: Float
  high_price_usd: Float
  low_price_usd: Float
  open_price_usd: Float
  volume_usd: Float
}

"""aggregate var_samp on columns"""
type api_candles_history_1min_var_samp_fields {
  close_price_usd: Float
  high_price_usd: Float
  low_price_usd: Float
  open_price_usd: Float
  volume_usd: Float
}

"""aggregate variance on columns"""
type api_candles_history_1min_variance_fields {
  close_price_usd: Float
  high_price_usd: Float
  low_price_usd: Float
  open_price_usd: Float
  volume_usd: Float
}

"""
columns and relationships of "api.token_stats_1h"
"""
type api_token_stats_1h {
  initial_price_usd: numeric
  latest_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  total_trades: numeric
  total_volume_usd: numeric
  ts_bucket: timestamptz
}

"""
aggregated selection of "api.token_stats_1h"
"""
type api_token_stats_1h_aggregate {
  aggregate: api_token_stats_1h_aggregate_fields
  nodes: [api_token_stats_1h!]!
}

"""
aggregate fields of "api.token_stats_1h"
"""
type api_token_stats_1h_aggregate_fields {
  avg: api_token_stats_1h_avg_fields
  count(columns: [api_token_stats_1h_select_column!], distinct: Boolean): Int!
  max: api_token_stats_1h_max_fields
  min: api_token_stats_1h_min_fields
  stddev: api_token_stats_1h_stddev_fields
  stddev_pop: api_token_stats_1h_stddev_pop_fields
  stddev_samp: api_token_stats_1h_stddev_samp_fields
  sum: api_token_stats_1h_sum_fields
  var_pop: api_token_stats_1h_var_pop_fields
  var_samp: api_token_stats_1h_var_samp_fields
  variance: api_token_stats_1h_variance_fields
}

"""aggregate avg on columns"""
type api_token_stats_1h_avg_fields {
  initial_price_usd: Float
  latest_price_usd: Float
  total_trades: Float
  total_volume_usd: Float
}

"""
Boolean expression to filter rows from the table "api.token_stats_1h". All fields are combined with a logical 'AND'.
"""
input api_token_stats_1h_bool_exp {
  _and: [api_token_stats_1h_bool_exp!]
  _not: api_token_stats_1h_bool_exp
  _or: [api_token_stats_1h_bool_exp!]
  initial_price_usd: numeric_comparison_exp
  latest_price_usd: numeric_comparison_exp
  token_metadata: token_metadata_scalar_comparison_exp
  token_mint: String_comparison_exp
  total_trades: numeric_comparison_exp
  total_volume_usd: numeric_comparison_exp
  ts_bucket: timestamptz_comparison_exp
}

"""aggregate max on columns"""
type api_token_stats_1h_max_fields {
  initial_price_usd: numeric
  latest_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  total_trades: numeric
  total_volume_usd: numeric
  ts_bucket: timestamptz
}

"""aggregate min on columns"""
type api_token_stats_1h_min_fields {
  initial_price_usd: numeric
  latest_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  total_trades: numeric
  total_volume_usd: numeric
  ts_bucket: timestamptz
}

"""Ordering options when selecting data from "api.token_stats_1h"."""
input api_token_stats_1h_order_by {
  initial_price_usd: order_by
  latest_price_usd: order_by
  token_metadata: order_by
  token_mint: order_by
  total_trades: order_by
  total_volume_usd: order_by
  ts_bucket: order_by
}

"""
select columns of table "api.token_stats_1h"
"""
enum api_token_stats_1h_select_column {
  """column name"""
  initial_price_usd

  """column name"""
  latest_price_usd

  """column name"""
  token_metadata

  """column name"""
  token_mint

  """column name"""
  total_trades

  """column name"""
  total_volume_usd

  """column name"""
  ts_bucket
}

"""aggregate stddev on columns"""
type api_token_stats_1h_stddev_fields {
  initial_price_usd: Float
  latest_price_usd: Float
  total_trades: Float
  total_volume_usd: Float
}

"""aggregate stddev_pop on columns"""
type api_token_stats_1h_stddev_pop_fields {
  initial_price_usd: Float
  latest_price_usd: Float
  total_trades: Float
  total_volume_usd: Float
}

"""aggregate stddev_samp on columns"""
type api_token_stats_1h_stddev_samp_fields {
  initial_price_usd: Float
  latest_price_usd: Float
  total_trades: Float
  total_volume_usd: Float
}

"""
Streaming cursor of the table "api_token_stats_1h"
"""
input api_token_stats_1h_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: api_token_stats_1h_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input api_token_stats_1h_stream_cursor_value_input {
  initial_price_usd: numeric
  latest_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  total_trades: numeric
  total_volume_usd: numeric
  ts_bucket: timestamptz
}

"""aggregate sum on columns"""
type api_token_stats_1h_sum_fields {
  initial_price_usd: numeric
  latest_price_usd: numeric
  total_trades: numeric
  total_volume_usd: numeric
}

"""aggregate var_pop on columns"""
type api_token_stats_1h_var_pop_fields {
  initial_price_usd: Float
  latest_price_usd: Float
  total_trades: Float
  total_volume_usd: Float
}

"""aggregate var_samp on columns"""
type api_token_stats_1h_var_samp_fields {
  initial_price_usd: Float
  latest_price_usd: Float
  total_trades: Float
  total_volume_usd: Float
}

"""aggregate variance on columns"""
type api_token_stats_1h_variance_fields {
  initial_price_usd: Float
  latest_price_usd: Float
  total_trades: Float
  total_volume_usd: Float
}

"""History of trades on subscribed accounts from the indexer."""
type api_trade_history {
  created_at: timestamptz!
  id: uuid!
  token_metadata: token_metadata_scalar!
  token_mint: String!
  token_price_usd: numeric!
  volume_usd: numeric!
}

"""
columns and relationships of "api.trade_history_1min"
"""
type api_trade_history_1min {
  avg_price_usd: numeric
  bucket: timestamptz
  id: uuid
  latest_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  total_volume_usd: numeric
  trade_count: bigint
}

"""
aggregated selection of "api.trade_history_1min"
"""
type api_trade_history_1min_aggregate {
  aggregate: api_trade_history_1min_aggregate_fields
  nodes: [api_trade_history_1min!]!
}

"""
aggregate fields of "api.trade_history_1min"
"""
type api_trade_history_1min_aggregate_fields {
  avg: api_trade_history_1min_avg_fields
  count(columns: [api_trade_history_1min_select_column!], distinct: Boolean): Int!
  max: api_trade_history_1min_max_fields
  min: api_trade_history_1min_min_fields
  stddev: api_trade_history_1min_stddev_fields
  stddev_pop: api_trade_history_1min_stddev_pop_fields
  stddev_samp: api_trade_history_1min_stddev_samp_fields
  sum: api_trade_history_1min_sum_fields
  var_pop: api_trade_history_1min_var_pop_fields
  var_samp: api_trade_history_1min_var_samp_fields
  variance: api_trade_history_1min_variance_fields
}

"""aggregate avg on columns"""
type api_trade_history_1min_avg_fields {
  avg_price_usd: Float
  latest_price_usd: Float
  total_volume_usd: Float
  trade_count: Float
}

"""
Boolean expression to filter rows from the table "api.trade_history_1min". All fields are combined with a logical 'AND'.
"""
input api_trade_history_1min_bool_exp {
  _and: [api_trade_history_1min_bool_exp!]
  _not: api_trade_history_1min_bool_exp
  _or: [api_trade_history_1min_bool_exp!]
  avg_price_usd: numeric_comparison_exp
  bucket: timestamptz_comparison_exp
  id: uuid_comparison_exp
  latest_price_usd: numeric_comparison_exp
  token_metadata: token_metadata_scalar_comparison_exp
  token_mint: String_comparison_exp
  total_volume_usd: numeric_comparison_exp
  trade_count: bigint_comparison_exp
}

"""aggregate max on columns"""
type api_trade_history_1min_max_fields {
  avg_price_usd: numeric
  bucket: timestamptz
  id: uuid
  latest_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  total_volume_usd: numeric
  trade_count: bigint
}

"""aggregate min on columns"""
type api_trade_history_1min_min_fields {
  avg_price_usd: numeric
  bucket: timestamptz
  id: uuid
  latest_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  total_volume_usd: numeric
  trade_count: bigint
}

"""Ordering options when selecting data from "api.trade_history_1min"."""
input api_trade_history_1min_order_by {
  avg_price_usd: order_by
  bucket: order_by
  id: order_by
  latest_price_usd: order_by
  token_metadata: order_by
  token_mint: order_by
  total_volume_usd: order_by
  trade_count: order_by
}

"""
select columns of table "api.trade_history_1min"
"""
enum api_trade_history_1min_select_column {
  """column name"""
  avg_price_usd

  """column name"""
  bucket

  """column name"""
  id

  """column name"""
  latest_price_usd

  """column name"""
  token_metadata

  """column name"""
  token_mint

  """column name"""
  total_volume_usd

  """column name"""
  trade_count
}

"""aggregate stddev on columns"""
type api_trade_history_1min_stddev_fields {
  avg_price_usd: Float
  latest_price_usd: Float
  total_volume_usd: Float
  trade_count: Float
}

"""aggregate stddev_pop on columns"""
type api_trade_history_1min_stddev_pop_fields {
  avg_price_usd: Float
  latest_price_usd: Float
  total_volume_usd: Float
  trade_count: Float
}

"""aggregate stddev_samp on columns"""
type api_trade_history_1min_stddev_samp_fields {
  avg_price_usd: Float
  latest_price_usd: Float
  total_volume_usd: Float
  trade_count: Float
}

"""
Streaming cursor of the table "api_trade_history_1min"
"""
input api_trade_history_1min_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: api_trade_history_1min_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input api_trade_history_1min_stream_cursor_value_input {
  avg_price_usd: numeric
  bucket: timestamptz
  id: uuid
  latest_price_usd: numeric
  token_metadata: token_metadata_scalar
  token_mint: String
  total_volume_usd: numeric
  trade_count: bigint
}

"""aggregate sum on columns"""
type api_trade_history_1min_sum_fields {
  avg_price_usd: numeric
  latest_price_usd: numeric
  total_volume_usd: numeric
  trade_count: bigint
}

"""aggregate var_pop on columns"""
type api_trade_history_1min_var_pop_fields {
  avg_price_usd: Float
  latest_price_usd: Float
  total_volume_usd: Float
  trade_count: Float
}

"""aggregate var_samp on columns"""
type api_trade_history_1min_var_samp_fields {
  avg_price_usd: Float
  latest_price_usd: Float
  total_volume_usd: Float
  trade_count: Float
}

"""aggregate variance on columns"""
type api_trade_history_1min_variance_fields {
  avg_price_usd: Float
  latest_price_usd: Float
  total_volume_usd: Float
  trade_count: Float
}

"""
aggregated selection of "api.trade_history"
"""
type api_trade_history_aggregate {
  aggregate: api_trade_history_aggregate_fields
  nodes: [api_trade_history!]!
}

"""
aggregate fields of "api.trade_history"
"""
type api_trade_history_aggregate_fields {
  avg: api_trade_history_avg_fields
  count(columns: [api_trade_history_select_column!], distinct: Boolean): Int!
  max: api_trade_history_max_fields
  min: api_trade_history_min_fields
  stddev: api_trade_history_stddev_fields
  stddev_pop: api_trade_history_stddev_pop_fields
  stddev_samp: api_trade_history_stddev_samp_fields
  sum: api_trade_history_sum_fields
  var_pop: api_trade_history_var_pop_fields
  var_samp: api_trade_history_var_samp_fields
  variance: api_trade_history_variance_fields
}

"""aggregate avg on columns"""
type api_trade_history_avg_fields {
  token_price_usd: Float
  volume_usd: Float
}

"""
Boolean expression to filter rows from the table "api.trade_history". All fields are combined with a logical 'AND'.
"""
input api_trade_history_bool_exp {
  _and: [api_trade_history_bool_exp!]
  _not: api_trade_history_bool_exp
  _or: [api_trade_history_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  token_metadata: token_metadata_scalar_comparison_exp
  token_mint: String_comparison_exp
  token_price_usd: numeric_comparison_exp
  volume_usd: numeric_comparison_exp
}

"""
unique or primary key constraints on table "api.trade_history"
"""
enum api_trade_history_constraint {
  """
  unique or primary key constraint on columns "created_at", "id", "token_mint"
  """
  trade_history_pkey
}

"""
input type for incrementing numeric columns in table "api.trade_history"
"""
input api_trade_history_inc_input {
  token_price_usd: numeric
  volume_usd: numeric
}

"""
input type for inserting data into table "api.trade_history"
"""
input api_trade_history_insert_input {
  created_at: timestamptz
  id: uuid
  token_metadata: token_metadata_scalar
  token_mint: String
  token_price_usd: numeric
  volume_usd: numeric
}

"""aggregate max on columns"""
type api_trade_history_max_fields {
  created_at: timestamptz
  id: uuid
  token_metadata: token_metadata_scalar
  token_mint: String
  token_price_usd: numeric
  volume_usd: numeric
}

"""aggregate min on columns"""
type api_trade_history_min_fields {
  created_at: timestamptz
  id: uuid
  token_metadata: token_metadata_scalar
  token_mint: String
  token_price_usd: numeric
  volume_usd: numeric
}

"""
response of any mutation on the table "api.trade_history"
"""
type api_trade_history_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [api_trade_history!]!
}

"""
on_conflict condition type for table "api.trade_history"
"""
input api_trade_history_on_conflict {
  constraint: api_trade_history_constraint!
  update_columns: [api_trade_history_update_column!]! = []
  where: api_trade_history_bool_exp
}

"""Ordering options when selecting data from "api.trade_history"."""
input api_trade_history_order_by {
  created_at: order_by
  id: order_by
  token_metadata: order_by
  token_mint: order_by
  token_price_usd: order_by
  volume_usd: order_by
}

"""primary key columns input for table: api.trade_history"""
input api_trade_history_pk_columns_input {
  created_at: timestamptz!
  id: uuid!
  token_mint: String!
}

"""
select columns of table "api.trade_history"
"""
enum api_trade_history_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  token_metadata

  """column name"""
  token_mint

  """column name"""
  token_price_usd

  """column name"""
  volume_usd
}

"""
input type for updating data in table "api.trade_history"
"""
input api_trade_history_set_input {
  created_at: timestamptz
  id: uuid
  token_metadata: token_metadata_scalar
  token_mint: String
  token_price_usd: numeric
  volume_usd: numeric
}

"""aggregate stddev on columns"""
type api_trade_history_stddev_fields {
  token_price_usd: Float
  volume_usd: Float
}

"""aggregate stddev_pop on columns"""
type api_trade_history_stddev_pop_fields {
  token_price_usd: Float
  volume_usd: Float
}

"""aggregate stddev_samp on columns"""
type api_trade_history_stddev_samp_fields {
  token_price_usd: Float
  volume_usd: Float
}

"""
Streaming cursor of the table "api_trade_history"
"""
input api_trade_history_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: api_trade_history_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input api_trade_history_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  token_metadata: token_metadata_scalar
  token_mint: String
  token_price_usd: numeric
  volume_usd: numeric
}

"""aggregate sum on columns"""
type api_trade_history_sum_fields {
  token_price_usd: numeric
  volume_usd: numeric
}

"""
update columns of table "api.trade_history"
"""
enum api_trade_history_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  token_metadata

  """column name"""
  token_mint

  """column name"""
  token_price_usd

  """column name"""
  volume_usd
}

input api_trade_history_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: api_trade_history_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: api_trade_history_set_input

  """filter the rows which have to be updated"""
  where: api_trade_history_bool_exp!
}

"""aggregate var_pop on columns"""
type api_trade_history_var_pop_fields {
  token_price_usd: Float
  volume_usd: Float
}

"""aggregate var_samp on columns"""
type api_trade_history_var_samp_fields {
  token_price_usd: Float
  volume_usd: Float
}

"""aggregate variance on columns"""
type api_trade_history_variance_fields {
  token_price_usd: Float
  volume_usd: Float
}

"""
columns and relationships of "app_dwell_time"
"""
type app_dwell_time {
  build: String
  created_at: timestamptz!
  dwell_time_ms: numeric!
  error_details: String
  id: uuid!
  source: String
  user_agent: String!
  user_wallet: String!
}

"""
aggregated selection of "app_dwell_time"
"""
type app_dwell_time_aggregate {
  aggregate: app_dwell_time_aggregate_fields
  nodes: [app_dwell_time!]!
}

"""
aggregate fields of "app_dwell_time"
"""
type app_dwell_time_aggregate_fields {
  avg: app_dwell_time_avg_fields
  count(columns: [app_dwell_time_select_column!], distinct: Boolean): Int!
  max: app_dwell_time_max_fields
  min: app_dwell_time_min_fields
  stddev: app_dwell_time_stddev_fields
  stddev_pop: app_dwell_time_stddev_pop_fields
  stddev_samp: app_dwell_time_stddev_samp_fields
  sum: app_dwell_time_sum_fields
  var_pop: app_dwell_time_var_pop_fields
  var_samp: app_dwell_time_var_samp_fields
  variance: app_dwell_time_variance_fields
}

"""aggregate avg on columns"""
type app_dwell_time_avg_fields {
  dwell_time_ms: Float
}

"""
Boolean expression to filter rows from the table "app_dwell_time". All fields are combined with a logical 'AND'.
"""
input app_dwell_time_bool_exp {
  _and: [app_dwell_time_bool_exp!]
  _not: app_dwell_time_bool_exp
  _or: [app_dwell_time_bool_exp!]
  build: String_comparison_exp
  created_at: timestamptz_comparison_exp
  dwell_time_ms: numeric_comparison_exp
  error_details: String_comparison_exp
  id: uuid_comparison_exp
  source: String_comparison_exp
  user_agent: String_comparison_exp
  user_wallet: String_comparison_exp
}

"""
unique or primary key constraints on table "app_dwell_time"
"""
enum app_dwell_time_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  app_dwell_time_pkey
}

"""
input type for incrementing numeric columns in table "app_dwell_time"
"""
input app_dwell_time_inc_input {
  dwell_time_ms: numeric
}

"""
input type for inserting data into table "app_dwell_time"
"""
input app_dwell_time_insert_input {
  build: String
  created_at: timestamptz
  dwell_time_ms: numeric
  error_details: String
  id: uuid
  source: String
  user_agent: String
  user_wallet: String
}

"""aggregate max on columns"""
type app_dwell_time_max_fields {
  build: String
  created_at: timestamptz
  dwell_time_ms: numeric
  error_details: String
  id: uuid
  source: String
  user_agent: String
  user_wallet: String
}

"""aggregate min on columns"""
type app_dwell_time_min_fields {
  build: String
  created_at: timestamptz
  dwell_time_ms: numeric
  error_details: String
  id: uuid
  source: String
  user_agent: String
  user_wallet: String
}

"""
response of any mutation on the table "app_dwell_time"
"""
type app_dwell_time_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_dwell_time!]!
}

"""
on_conflict condition type for table "app_dwell_time"
"""
input app_dwell_time_on_conflict {
  constraint: app_dwell_time_constraint!
  update_columns: [app_dwell_time_update_column!]! = []
  where: app_dwell_time_bool_exp
}

"""Ordering options when selecting data from "app_dwell_time"."""
input app_dwell_time_order_by {
  build: order_by
  created_at: order_by
  dwell_time_ms: order_by
  error_details: order_by
  id: order_by
  source: order_by
  user_agent: order_by
  user_wallet: order_by
}

"""primary key columns input for table: app_dwell_time"""
input app_dwell_time_pk_columns_input {
  id: uuid!
}

"""
select columns of table "app_dwell_time"
"""
enum app_dwell_time_select_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  dwell_time_ms

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  source

  """column name"""
  user_agent

  """column name"""
  user_wallet
}

"""
input type for updating data in table "app_dwell_time"
"""
input app_dwell_time_set_input {
  build: String
  created_at: timestamptz
  dwell_time_ms: numeric
  error_details: String
  id: uuid
  source: String
  user_agent: String
  user_wallet: String
}

"""aggregate stddev on columns"""
type app_dwell_time_stddev_fields {
  dwell_time_ms: Float
}

"""aggregate stddev_pop on columns"""
type app_dwell_time_stddev_pop_fields {
  dwell_time_ms: Float
}

"""aggregate stddev_samp on columns"""
type app_dwell_time_stddev_samp_fields {
  dwell_time_ms: Float
}

"""
Streaming cursor of the table "app_dwell_time"
"""
input app_dwell_time_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: app_dwell_time_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input app_dwell_time_stream_cursor_value_input {
  build: String
  created_at: timestamptz
  dwell_time_ms: numeric
  error_details: String
  id: uuid
  source: String
  user_agent: String
  user_wallet: String
}

"""aggregate sum on columns"""
type app_dwell_time_sum_fields {
  dwell_time_ms: numeric
}

"""
update columns of table "app_dwell_time"
"""
enum app_dwell_time_update_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  dwell_time_ms

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  source

  """column name"""
  user_agent

  """column name"""
  user_wallet
}

input app_dwell_time_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: app_dwell_time_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: app_dwell_time_set_input

  """filter the rows which have to be updated"""
  where: app_dwell_time_bool_exp!
}

"""aggregate var_pop on columns"""
type app_dwell_time_var_pop_fields {
  dwell_time_ms: Float
}

"""aggregate var_samp on columns"""
type app_dwell_time_var_samp_fields {
  dwell_time_ms: Float
}

"""aggregate variance on columns"""
type app_dwell_time_variance_fields {
  dwell_time_ms: Float
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

type candles_history_model {
  bucket: timestamptz!
  close_price_usd: numeric!
  high_price_usd: numeric!
  low_price_usd: numeric!
  open_price_usd: numeric!
  token_mint: String!
  volume_usd: numeric!
}

"""
Boolean expression to filter rows from the logical model for "candles_history_model". All fields are combined with a logical 'AND'.
"""
input candles_history_model_bool_exp_bool_exp {
  _and: [candles_history_model_bool_exp_bool_exp!]
  _not: candles_history_model_bool_exp_bool_exp
  _or: [candles_history_model_bool_exp_bool_exp!]
  bucket: timestamptz_comparison_exp
  close_price_usd: numeric_comparison_exp
  high_price_usd: numeric_comparison_exp
  low_price_usd: numeric_comparison_exp
  open_price_usd: numeric_comparison_exp
  token_mint: String_comparison_exp
  volume_usd: numeric_comparison_exp
}

enum candles_history_model_enum_name {
  """column name"""
  bucket

  """column name"""
  close_price_usd

  """column name"""
  high_price_usd

  """column name"""
  low_price_usd

  """column name"""
  open_price_usd

  """column name"""
  token_mint

  """column name"""
  volume_usd
}

"""Ordering options when selecting data from "candles_history_model"."""
input candles_history_model_order_by {
  bucket: order_by
  close_price_usd: order_by
  high_price_usd: order_by
  low_price_usd: order_by
  open_price_usd: order_by
  token_mint: order_by
  volume_usd: order_by
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar interval

"""
columns and relationships of "loading_time"
"""
type loading_time {
  attempt_number: Int!
  average_time_ms: numeric!
  build: String
  created_at: timestamptz!
  error_details: String
  id: uuid!
  identifier: String!
  source: String
  time_elapsed_ms: numeric!
  total_time_ms: numeric!
  user_agent: String!
  user_wallet: String!
}

"""
aggregated selection of "loading_time"
"""
type loading_time_aggregate {
  aggregate: loading_time_aggregate_fields
  nodes: [loading_time!]!
}

"""
aggregate fields of "loading_time"
"""
type loading_time_aggregate_fields {
  avg: loading_time_avg_fields
  count(columns: [loading_time_select_column!], distinct: Boolean): Int!
  max: loading_time_max_fields
  min: loading_time_min_fields
  stddev: loading_time_stddev_fields
  stddev_pop: loading_time_stddev_pop_fields
  stddev_samp: loading_time_stddev_samp_fields
  sum: loading_time_sum_fields
  var_pop: loading_time_var_pop_fields
  var_samp: loading_time_var_samp_fields
  variance: loading_time_variance_fields
}

"""aggregate avg on columns"""
type loading_time_avg_fields {
  attempt_number: Float
  average_time_ms: Float
  time_elapsed_ms: Float
  total_time_ms: Float
}

"""
Boolean expression to filter rows from the table "loading_time". All fields are combined with a logical 'AND'.
"""
input loading_time_bool_exp {
  _and: [loading_time_bool_exp!]
  _not: loading_time_bool_exp
  _or: [loading_time_bool_exp!]
  attempt_number: Int_comparison_exp
  average_time_ms: numeric_comparison_exp
  build: String_comparison_exp
  created_at: timestamptz_comparison_exp
  error_details: String_comparison_exp
  id: uuid_comparison_exp
  identifier: String_comparison_exp
  source: String_comparison_exp
  time_elapsed_ms: numeric_comparison_exp
  total_time_ms: numeric_comparison_exp
  user_agent: String_comparison_exp
  user_wallet: String_comparison_exp
}

"""
unique or primary key constraints on table "loading_time"
"""
enum loading_time_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  loading_time_id_key

  """
  unique or primary key constraint on columns "id"
  """
  loading_time_pkey
}

"""
input type for incrementing numeric columns in table "loading_time"
"""
input loading_time_inc_input {
  attempt_number: Int
  average_time_ms: numeric
  time_elapsed_ms: numeric
  total_time_ms: numeric
}

"""
input type for inserting data into table "loading_time"
"""
input loading_time_insert_input {
  attempt_number: Int
  average_time_ms: numeric
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  identifier: String
  source: String
  time_elapsed_ms: numeric
  total_time_ms: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate max on columns"""
type loading_time_max_fields {
  attempt_number: Int
  average_time_ms: numeric
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  identifier: String
  source: String
  time_elapsed_ms: numeric
  total_time_ms: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate min on columns"""
type loading_time_min_fields {
  attempt_number: Int
  average_time_ms: numeric
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  identifier: String
  source: String
  time_elapsed_ms: numeric
  total_time_ms: numeric
  user_agent: String
  user_wallet: String
}

"""
response of any mutation on the table "loading_time"
"""
type loading_time_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [loading_time!]!
}

"""
on_conflict condition type for table "loading_time"
"""
input loading_time_on_conflict {
  constraint: loading_time_constraint!
  update_columns: [loading_time_update_column!]! = []
  where: loading_time_bool_exp
}

"""Ordering options when selecting data from "loading_time"."""
input loading_time_order_by {
  attempt_number: order_by
  average_time_ms: order_by
  build: order_by
  created_at: order_by
  error_details: order_by
  id: order_by
  identifier: order_by
  source: order_by
  time_elapsed_ms: order_by
  total_time_ms: order_by
  user_agent: order_by
  user_wallet: order_by
}

"""primary key columns input for table: loading_time"""
input loading_time_pk_columns_input {
  id: uuid!
}

"""
select columns of table "loading_time"
"""
enum loading_time_select_column {
  """column name"""
  attempt_number

  """column name"""
  average_time_ms

  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  identifier

  """column name"""
  source

  """column name"""
  time_elapsed_ms

  """column name"""
  total_time_ms

  """column name"""
  user_agent

  """column name"""
  user_wallet
}

"""
input type for updating data in table "loading_time"
"""
input loading_time_set_input {
  attempt_number: Int
  average_time_ms: numeric
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  identifier: String
  source: String
  time_elapsed_ms: numeric
  total_time_ms: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate stddev on columns"""
type loading_time_stddev_fields {
  attempt_number: Float
  average_time_ms: Float
  time_elapsed_ms: Float
  total_time_ms: Float
}

"""aggregate stddev_pop on columns"""
type loading_time_stddev_pop_fields {
  attempt_number: Float
  average_time_ms: Float
  time_elapsed_ms: Float
  total_time_ms: Float
}

"""aggregate stddev_samp on columns"""
type loading_time_stddev_samp_fields {
  attempt_number: Float
  average_time_ms: Float
  time_elapsed_ms: Float
  total_time_ms: Float
}

"""
Streaming cursor of the table "loading_time"
"""
input loading_time_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: loading_time_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input loading_time_stream_cursor_value_input {
  attempt_number: Int
  average_time_ms: numeric
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  identifier: String
  source: String
  time_elapsed_ms: numeric
  total_time_ms: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate sum on columns"""
type loading_time_sum_fields {
  attempt_number: Int
  average_time_ms: numeric
  time_elapsed_ms: numeric
  total_time_ms: numeric
}

"""
update columns of table "loading_time"
"""
enum loading_time_update_column {
  """column name"""
  attempt_number

  """column name"""
  average_time_ms

  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  identifier

  """column name"""
  source

  """column name"""
  time_elapsed_ms

  """column name"""
  total_time_ms

  """column name"""
  user_agent

  """column name"""
  user_wallet
}

input loading_time_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: loading_time_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: loading_time_set_input

  """filter the rows which have to be updated"""
  where: loading_time_bool_exp!
}

"""aggregate var_pop on columns"""
type loading_time_var_pop_fields {
  attempt_number: Float
  average_time_ms: Float
  time_elapsed_ms: Float
  total_time_ms: Float
}

"""aggregate var_samp on columns"""
type loading_time_var_samp_fields {
  attempt_number: Float
  average_time_ms: Float
  time_elapsed_ms: Float
  total_time_ms: Float
}

"""aggregate variance on columns"""
type loading_time_variance_fields {
  attempt_number: Float
  average_time_ms: Float
  time_elapsed_ms: Float
  total_time_ms: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "api.trade_history"
  """
  delete_api_trade_history(
    """filter the rows which have to be deleted"""
    where: api_trade_history_bool_exp!
  ): api_trade_history_mutation_response

  """
  delete single row from the table: "api.trade_history"
  """
  delete_api_trade_history_by_pk(created_at: timestamptz!, id: uuid!, token_mint: String!): api_trade_history

  """
  delete data from the table: "app_dwell_time"
  """
  delete_app_dwell_time(
    """filter the rows which have to be deleted"""
    where: app_dwell_time_bool_exp!
  ): app_dwell_time_mutation_response

  """
  delete single row from the table: "app_dwell_time"
  """
  delete_app_dwell_time_by_pk(id: uuid!): app_dwell_time

  """
  delete data from the table: "loading_time"
  """
  delete_loading_time(
    """filter the rows which have to be deleted"""
    where: loading_time_bool_exp!
  ): loading_time_mutation_response

  """
  delete single row from the table: "loading_time"
  """
  delete_loading_time_by_pk(id: uuid!): loading_time

  """
  delete data from the table: "token_dwell_time"
  """
  delete_token_dwell_time(
    """filter the rows which have to be deleted"""
    where: token_dwell_time_bool_exp!
  ): token_dwell_time_mutation_response

  """
  delete single row from the table: "token_dwell_time"
  """
  delete_token_dwell_time_by_pk(id: uuid!): token_dwell_time

  """
  delete data from the table: "token_purchase"
  """
  delete_token_purchase(
    """filter the rows which have to be deleted"""
    where: token_purchase_bool_exp!
  ): token_purchase_mutation_response

  """
  delete single row from the table: "token_purchase"
  """
  delete_token_purchase_by_pk(id: uuid!): token_purchase

  """
  delete data from the table: "token_sale"
  """
  delete_token_sale(
    """filter the rows which have to be deleted"""
    where: token_sale_bool_exp!
  ): token_sale_mutation_response

  """
  delete single row from the table: "token_sale"
  """
  delete_token_sale_by_pk(id: uuid!): token_sale

  """
  insert data into the table: "api.trade_history"
  """
  insert_api_trade_history(
    """the rows to be inserted"""
    objects: [api_trade_history_insert_input!]!

    """upsert condition"""
    on_conflict: api_trade_history_on_conflict
  ): api_trade_history_mutation_response

  """
  insert a single row into the table: "api.trade_history"
  """
  insert_api_trade_history_one(
    """the row to be inserted"""
    object: api_trade_history_insert_input!

    """upsert condition"""
    on_conflict: api_trade_history_on_conflict
  ): api_trade_history

  """
  insert data into the table: "app_dwell_time"
  """
  insert_app_dwell_time(
    """the rows to be inserted"""
    objects: [app_dwell_time_insert_input!]!

    """upsert condition"""
    on_conflict: app_dwell_time_on_conflict
  ): app_dwell_time_mutation_response

  """
  insert a single row into the table: "app_dwell_time"
  """
  insert_app_dwell_time_one(
    """the row to be inserted"""
    object: app_dwell_time_insert_input!

    """upsert condition"""
    on_conflict: app_dwell_time_on_conflict
  ): app_dwell_time

  """
  insert data into the table: "loading_time"
  """
  insert_loading_time(
    """the rows to be inserted"""
    objects: [loading_time_insert_input!]!

    """upsert condition"""
    on_conflict: loading_time_on_conflict
  ): loading_time_mutation_response

  """
  insert a single row into the table: "loading_time"
  """
  insert_loading_time_one(
    """the row to be inserted"""
    object: loading_time_insert_input!

    """upsert condition"""
    on_conflict: loading_time_on_conflict
  ): loading_time

  """
  insert data into the table: "token_dwell_time"
  """
  insert_token_dwell_time(
    """the rows to be inserted"""
    objects: [token_dwell_time_insert_input!]!

    """upsert condition"""
    on_conflict: token_dwell_time_on_conflict
  ): token_dwell_time_mutation_response

  """
  insert a single row into the table: "token_dwell_time"
  """
  insert_token_dwell_time_one(
    """the row to be inserted"""
    object: token_dwell_time_insert_input!

    """upsert condition"""
    on_conflict: token_dwell_time_on_conflict
  ): token_dwell_time

  """
  insert data into the table: "token_purchase"
  """
  insert_token_purchase(
    """the rows to be inserted"""
    objects: [token_purchase_insert_input!]!

    """upsert condition"""
    on_conflict: token_purchase_on_conflict
  ): token_purchase_mutation_response

  """
  insert a single row into the table: "token_purchase"
  """
  insert_token_purchase_one(
    """the row to be inserted"""
    object: token_purchase_insert_input!

    """upsert condition"""
    on_conflict: token_purchase_on_conflict
  ): token_purchase

  """
  insert data into the table: "token_sale"
  """
  insert_token_sale(
    """the rows to be inserted"""
    objects: [token_sale_insert_input!]!

    """upsert condition"""
    on_conflict: token_sale_on_conflict
  ): token_sale_mutation_response

  """
  insert a single row into the table: "token_sale"
  """
  insert_token_sale_one(
    """the row to be inserted"""
    object: token_sale_insert_input!

    """upsert condition"""
    on_conflict: token_sale_on_conflict
  ): token_sale

  """
  update data of the table: "api.trade_history"
  """
  update_api_trade_history(
    """increments the numeric columns with given value of the filtered values"""
    _inc: api_trade_history_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: api_trade_history_set_input

    """filter the rows which have to be updated"""
    where: api_trade_history_bool_exp!
  ): api_trade_history_mutation_response

  """
  update single row of the table: "api.trade_history"
  """
  update_api_trade_history_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: api_trade_history_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: api_trade_history_set_input
    pk_columns: api_trade_history_pk_columns_input!
  ): api_trade_history

  """
  update multiples rows of table: "api.trade_history"
  """
  update_api_trade_history_many(
    """updates to execute, in order"""
    updates: [api_trade_history_updates!]!
  ): [api_trade_history_mutation_response]

  """
  update data of the table: "app_dwell_time"
  """
  update_app_dwell_time(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_dwell_time_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_dwell_time_set_input

    """filter the rows which have to be updated"""
    where: app_dwell_time_bool_exp!
  ): app_dwell_time_mutation_response

  """
  update single row of the table: "app_dwell_time"
  """
  update_app_dwell_time_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_dwell_time_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_dwell_time_set_input
    pk_columns: app_dwell_time_pk_columns_input!
  ): app_dwell_time

  """
  update multiples rows of table: "app_dwell_time"
  """
  update_app_dwell_time_many(
    """updates to execute, in order"""
    updates: [app_dwell_time_updates!]!
  ): [app_dwell_time_mutation_response]

  """
  update data of the table: "loading_time"
  """
  update_loading_time(
    """increments the numeric columns with given value of the filtered values"""
    _inc: loading_time_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: loading_time_set_input

    """filter the rows which have to be updated"""
    where: loading_time_bool_exp!
  ): loading_time_mutation_response

  """
  update single row of the table: "loading_time"
  """
  update_loading_time_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: loading_time_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: loading_time_set_input
    pk_columns: loading_time_pk_columns_input!
  ): loading_time

  """
  update multiples rows of table: "loading_time"
  """
  update_loading_time_many(
    """updates to execute, in order"""
    updates: [loading_time_updates!]!
  ): [loading_time_mutation_response]

  """
  update data of the table: "token_dwell_time"
  """
  update_token_dwell_time(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_dwell_time_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_dwell_time_set_input

    """filter the rows which have to be updated"""
    where: token_dwell_time_bool_exp!
  ): token_dwell_time_mutation_response

  """
  update single row of the table: "token_dwell_time"
  """
  update_token_dwell_time_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_dwell_time_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_dwell_time_set_input
    pk_columns: token_dwell_time_pk_columns_input!
  ): token_dwell_time

  """
  update multiples rows of table: "token_dwell_time"
  """
  update_token_dwell_time_many(
    """updates to execute, in order"""
    updates: [token_dwell_time_updates!]!
  ): [token_dwell_time_mutation_response]

  """
  update data of the table: "token_purchase"
  """
  update_token_purchase(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_purchase_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_purchase_set_input

    """filter the rows which have to be updated"""
    where: token_purchase_bool_exp!
  ): token_purchase_mutation_response

  """
  update single row of the table: "token_purchase"
  """
  update_token_purchase_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_purchase_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_purchase_set_input
    pk_columns: token_purchase_pk_columns_input!
  ): token_purchase

  """
  update multiples rows of table: "token_purchase"
  """
  update_token_purchase_many(
    """updates to execute, in order"""
    updates: [token_purchase_updates!]!
  ): [token_purchase_mutation_response]

  """
  update data of the table: "token_sale"
  """
  update_token_sale(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_sale_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_sale_set_input

    """filter the rows which have to be updated"""
    where: token_sale_bool_exp!
  ): token_sale_mutation_response

  """
  update single row of the table: "token_sale"
  """
  update_token_sale_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_sale_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_sale_set_input
    pk_columns: token_sale_pk_columns_input!
  ): token_sale

  """
  update multiples rows of table: "token_sale"
  """
  update_token_sale_many(
    """updates to execute, in order"""
    updates: [token_sale_updates!]!
  ): [token_sale_mutation_response]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "api.candles_history_1min"
  """
  api_candles_history_1min(
    """distinct select on columns"""
    distinct_on: [api_candles_history_1min_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_candles_history_1min_order_by!]

    """filter the rows returned"""
    where: api_candles_history_1min_bool_exp
  ): [api_candles_history_1min!]!

  """
  fetch aggregated fields from the table: "api.candles_history_1min"
  """
  api_candles_history_1min_aggregate(
    """distinct select on columns"""
    distinct_on: [api_candles_history_1min_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_candles_history_1min_order_by!]

    """filter the rows returned"""
    where: api_candles_history_1min_bool_exp
  ): api_candles_history_1min_aggregate!

  """
  fetch data from the table: "api.token_stats_1h"
  """
  api_token_stats_1h(
    """distinct select on columns"""
    distinct_on: [api_token_stats_1h_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_token_stats_1h_order_by!]

    """filter the rows returned"""
    where: api_token_stats_1h_bool_exp
  ): [api_token_stats_1h!]!

  """
  fetch aggregated fields from the table: "api.token_stats_1h"
  """
  api_token_stats_1h_aggregate(
    """distinct select on columns"""
    distinct_on: [api_token_stats_1h_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_token_stats_1h_order_by!]

    """filter the rows returned"""
    where: api_token_stats_1h_bool_exp
  ): api_token_stats_1h_aggregate!

  """
  fetch data from the table: "api.trade_history"
  """
  api_trade_history(
    """distinct select on columns"""
    distinct_on: [api_trade_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_order_by!]

    """filter the rows returned"""
    where: api_trade_history_bool_exp
  ): [api_trade_history!]!

  """
  fetch data from the table: "api.trade_history_1min"
  """
  api_trade_history_1min(
    """distinct select on columns"""
    distinct_on: [api_trade_history_1min_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_1min_order_by!]

    """filter the rows returned"""
    where: api_trade_history_1min_bool_exp
  ): [api_trade_history_1min!]!

  """
  fetch aggregated fields from the table: "api.trade_history_1min"
  """
  api_trade_history_1min_aggregate(
    """distinct select on columns"""
    distinct_on: [api_trade_history_1min_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_1min_order_by!]

    """filter the rows returned"""
    where: api_trade_history_1min_bool_exp
  ): api_trade_history_1min_aggregate!

  """
  fetch aggregated fields from the table: "api.trade_history"
  """
  api_trade_history_aggregate(
    """distinct select on columns"""
    distinct_on: [api_trade_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_order_by!]

    """filter the rows returned"""
    where: api_trade_history_bool_exp
  ): api_trade_history_aggregate!

  """
  fetch data from the table: "api.trade_history" using primary key columns
  """
  api_trade_history_by_pk(created_at: timestamptz!, id: uuid!, token_mint: String!): api_trade_history

  """
  fetch data from the table: "app_dwell_time"
  """
  app_dwell_time(
    """distinct select on columns"""
    distinct_on: [app_dwell_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_dwell_time_order_by!]

    """filter the rows returned"""
    where: app_dwell_time_bool_exp
  ): [app_dwell_time!]!

  """
  fetch aggregated fields from the table: "app_dwell_time"
  """
  app_dwell_time_aggregate(
    """distinct select on columns"""
    distinct_on: [app_dwell_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_dwell_time_order_by!]

    """filter the rows returned"""
    where: app_dwell_time_bool_exp
  ): app_dwell_time_aggregate!

  """fetch data from the table: "app_dwell_time" using primary key columns"""
  app_dwell_time_by_pk(id: uuid!): app_dwell_time

  """
  fetch data from the table: "loading_time"
  """
  loading_time(
    """distinct select on columns"""
    distinct_on: [loading_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [loading_time_order_by!]

    """filter the rows returned"""
    where: loading_time_bool_exp
  ): [loading_time!]!

  """
  fetch aggregated fields from the table: "loading_time"
  """
  loading_time_aggregate(
    """distinct select on columns"""
    distinct_on: [loading_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [loading_time_order_by!]

    """filter the rows returned"""
    where: loading_time_bool_exp
  ): loading_time_aggregate!

  """fetch data from the table: "loading_time" using primary key columns"""
  loading_time_by_pk(id: uuid!): loading_time
  token_candles_history_1min(
    """token_candles_history_1minNative Query Arguments"""
    args: token_candles_history_1min_arguments!

    """distinct select on columns"""
    distinct_on: [candles_history_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [candles_history_model_order_by!]

    """filter the rows returned"""
    where: candles_history_model_bool_exp_bool_exp
  ): [candles_history_model!]!

  """
  fetch data from the table: "token_dwell_time"
  """
  token_dwell_time(
    """distinct select on columns"""
    distinct_on: [token_dwell_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_dwell_time_order_by!]

    """filter the rows returned"""
    where: token_dwell_time_bool_exp
  ): [token_dwell_time!]!

  """
  fetch aggregated fields from the table: "token_dwell_time"
  """
  token_dwell_time_aggregate(
    """distinct select on columns"""
    distinct_on: [token_dwell_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_dwell_time_order_by!]

    """filter the rows returned"""
    where: token_dwell_time_bool_exp
  ): token_dwell_time_aggregate!

  """
  fetch data from the table: "token_dwell_time" using primary key columns
  """
  token_dwell_time_by_pk(id: uuid!): token_dwell_time
  token_metadata_formatted(
    """distinct select on columns"""
    distinct_on: [token_metadata_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_metadata_model_order_by!]

    """filter the rows returned"""
    where: token_metadata_model_bool_exp_bool_exp
  ): [token_metadata_model!]!

  """
  fetch data from the table: "token_purchase"
  """
  token_purchase(
    """distinct select on columns"""
    distinct_on: [token_purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_purchase_order_by!]

    """filter the rows returned"""
    where: token_purchase_bool_exp
  ): [token_purchase!]!

  """
  fetch aggregated fields from the table: "token_purchase"
  """
  token_purchase_aggregate(
    """distinct select on columns"""
    distinct_on: [token_purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_purchase_order_by!]

    """filter the rows returned"""
    where: token_purchase_bool_exp
  ): token_purchase_aggregate!

  """fetch data from the table: "token_purchase" using primary key columns"""
  token_purchase_by_pk(id: uuid!): token_purchase

  """
  fetch data from the table: "token_sale"
  """
  token_sale(
    """distinct select on columns"""
    distinct_on: [token_sale_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_sale_order_by!]

    """filter the rows returned"""
    where: token_sale_bool_exp
  ): [token_sale!]!

  """
  fetch aggregated fields from the table: "token_sale"
  """
  token_sale_aggregate(
    """distinct select on columns"""
    distinct_on: [token_sale_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_sale_order_by!]

    """filter the rows returned"""
    where: token_sale_bool_exp
  ): token_sale_aggregate!

  """fetch data from the table: "token_sale" using primary key columns"""
  token_sale_by_pk(id: uuid!): token_sale
  token_stats_interval_agg(
    """token_stats_interval_aggNative Query Arguments"""
    args: token_stats_interval_agg_arguments!

    """distinct select on columns"""
    distinct_on: [token_stats_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_stats_model_order_by!]

    """filter the rows returned"""
    where: token_stats_model_bool_exp_bool_exp
  ): [token_stats_model!]!
  token_stats_interval_cache(
    """token_stats_interval_cacheNative Query Arguments"""
    args: token_stats_interval_cache_arguments!

    """distinct select on columns"""
    distinct_on: [token_stats_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_stats_model_order_by!]

    """filter the rows returned"""
    where: token_stats_model_bool_exp_bool_exp
  ): [token_stats_model!]!
  token_stats_interval_comp(
    """token_stats_interval_compNative Query Arguments"""
    args: token_stats_interval_comp_arguments!

    """distinct select on columns"""
    distinct_on: [token_stats_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_stats_model_order_by!]

    """filter the rows returned"""
    where: token_stats_model_bool_exp_bool_exp
  ): [token_stats_model!]!
  transactions(
    """distinct select on columns"""
    distinct_on: [transaction_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_model_order_by!]

    """filter the rows returned"""
    where: transaction_model_bool_exp_bool_exp
  ): [transaction_model!]!
  transactions_value_aggregate(
    """distinct select on columns"""
    distinct_on: [wallet_token_pnl_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wallet_token_pnl_model_order_by!]

    """filter the rows returned"""
    where: wallet_token_pnl_model_bool_exp_bool_exp
  ): [wallet_token_pnl_model!]!
}

type subscription_root {
  """
  fetch data from the table: "api.candles_history_1min"
  """
  api_candles_history_1min(
    """distinct select on columns"""
    distinct_on: [api_candles_history_1min_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_candles_history_1min_order_by!]

    """filter the rows returned"""
    where: api_candles_history_1min_bool_exp
  ): [api_candles_history_1min!]!

  """
  fetch aggregated fields from the table: "api.candles_history_1min"
  """
  api_candles_history_1min_aggregate(
    """distinct select on columns"""
    distinct_on: [api_candles_history_1min_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_candles_history_1min_order_by!]

    """filter the rows returned"""
    where: api_candles_history_1min_bool_exp
  ): api_candles_history_1min_aggregate!

  """
  fetch data from the table in a streaming manner: "api.candles_history_1min"
  """
  api_candles_history_1min_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [api_candles_history_1min_stream_cursor_input]!

    """filter the rows returned"""
    where: api_candles_history_1min_bool_exp
  ): [api_candles_history_1min!]!

  """
  fetch data from the table: "api.token_stats_1h"
  """
  api_token_stats_1h(
    """distinct select on columns"""
    distinct_on: [api_token_stats_1h_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_token_stats_1h_order_by!]

    """filter the rows returned"""
    where: api_token_stats_1h_bool_exp
  ): [api_token_stats_1h!]!

  """
  fetch aggregated fields from the table: "api.token_stats_1h"
  """
  api_token_stats_1h_aggregate(
    """distinct select on columns"""
    distinct_on: [api_token_stats_1h_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_token_stats_1h_order_by!]

    """filter the rows returned"""
    where: api_token_stats_1h_bool_exp
  ): api_token_stats_1h_aggregate!

  """
  fetch data from the table in a streaming manner: "api.token_stats_1h"
  """
  api_token_stats_1h_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [api_token_stats_1h_stream_cursor_input]!

    """filter the rows returned"""
    where: api_token_stats_1h_bool_exp
  ): [api_token_stats_1h!]!

  """
  fetch data from the table: "api.trade_history"
  """
  api_trade_history(
    """distinct select on columns"""
    distinct_on: [api_trade_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_order_by!]

    """filter the rows returned"""
    where: api_trade_history_bool_exp
  ): [api_trade_history!]!

  """
  fetch data from the table: "api.trade_history_1min"
  """
  api_trade_history_1min(
    """distinct select on columns"""
    distinct_on: [api_trade_history_1min_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_1min_order_by!]

    """filter the rows returned"""
    where: api_trade_history_1min_bool_exp
  ): [api_trade_history_1min!]!

  """
  fetch aggregated fields from the table: "api.trade_history_1min"
  """
  api_trade_history_1min_aggregate(
    """distinct select on columns"""
    distinct_on: [api_trade_history_1min_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_1min_order_by!]

    """filter the rows returned"""
    where: api_trade_history_1min_bool_exp
  ): api_trade_history_1min_aggregate!

  """
  fetch data from the table in a streaming manner: "api.trade_history_1min"
  """
  api_trade_history_1min_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [api_trade_history_1min_stream_cursor_input]!

    """filter the rows returned"""
    where: api_trade_history_1min_bool_exp
  ): [api_trade_history_1min!]!

  """
  fetch aggregated fields from the table: "api.trade_history"
  """
  api_trade_history_aggregate(
    """distinct select on columns"""
    distinct_on: [api_trade_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [api_trade_history_order_by!]

    """filter the rows returned"""
    where: api_trade_history_bool_exp
  ): api_trade_history_aggregate!

  """
  fetch data from the table: "api.trade_history" using primary key columns
  """
  api_trade_history_by_pk(created_at: timestamptz!, id: uuid!, token_mint: String!): api_trade_history

  """
  fetch data from the table in a streaming manner: "api.trade_history"
  """
  api_trade_history_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [api_trade_history_stream_cursor_input]!

    """filter the rows returned"""
    where: api_trade_history_bool_exp
  ): [api_trade_history!]!

  """
  fetch data from the table: "app_dwell_time"
  """
  app_dwell_time(
    """distinct select on columns"""
    distinct_on: [app_dwell_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_dwell_time_order_by!]

    """filter the rows returned"""
    where: app_dwell_time_bool_exp
  ): [app_dwell_time!]!

  """
  fetch aggregated fields from the table: "app_dwell_time"
  """
  app_dwell_time_aggregate(
    """distinct select on columns"""
    distinct_on: [app_dwell_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_dwell_time_order_by!]

    """filter the rows returned"""
    where: app_dwell_time_bool_exp
  ): app_dwell_time_aggregate!

  """fetch data from the table: "app_dwell_time" using primary key columns"""
  app_dwell_time_by_pk(id: uuid!): app_dwell_time

  """
  fetch data from the table in a streaming manner: "app_dwell_time"
  """
  app_dwell_time_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [app_dwell_time_stream_cursor_input]!

    """filter the rows returned"""
    where: app_dwell_time_bool_exp
  ): [app_dwell_time!]!

  """
  fetch data from the table: "loading_time"
  """
  loading_time(
    """distinct select on columns"""
    distinct_on: [loading_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [loading_time_order_by!]

    """filter the rows returned"""
    where: loading_time_bool_exp
  ): [loading_time!]!

  """
  fetch aggregated fields from the table: "loading_time"
  """
  loading_time_aggregate(
    """distinct select on columns"""
    distinct_on: [loading_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [loading_time_order_by!]

    """filter the rows returned"""
    where: loading_time_bool_exp
  ): loading_time_aggregate!

  """fetch data from the table: "loading_time" using primary key columns"""
  loading_time_by_pk(id: uuid!): loading_time

  """
  fetch data from the table in a streaming manner: "loading_time"
  """
  loading_time_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [loading_time_stream_cursor_input]!

    """filter the rows returned"""
    where: loading_time_bool_exp
  ): [loading_time!]!
  token_candles_history_1min(
    """token_candles_history_1minNative Query Arguments"""
    args: token_candles_history_1min_arguments!

    """distinct select on columns"""
    distinct_on: [candles_history_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [candles_history_model_order_by!]

    """filter the rows returned"""
    where: candles_history_model_bool_exp_bool_exp
  ): [candles_history_model!]!

  """
  fetch data from the table: "token_dwell_time"
  """
  token_dwell_time(
    """distinct select on columns"""
    distinct_on: [token_dwell_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_dwell_time_order_by!]

    """filter the rows returned"""
    where: token_dwell_time_bool_exp
  ): [token_dwell_time!]!

  """
  fetch aggregated fields from the table: "token_dwell_time"
  """
  token_dwell_time_aggregate(
    """distinct select on columns"""
    distinct_on: [token_dwell_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_dwell_time_order_by!]

    """filter the rows returned"""
    where: token_dwell_time_bool_exp
  ): token_dwell_time_aggregate!

  """
  fetch data from the table: "token_dwell_time" using primary key columns
  """
  token_dwell_time_by_pk(id: uuid!): token_dwell_time

  """
  fetch data from the table in a streaming manner: "token_dwell_time"
  """
  token_dwell_time_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_dwell_time_stream_cursor_input]!

    """filter the rows returned"""
    where: token_dwell_time_bool_exp
  ): [token_dwell_time!]!
  token_metadata_formatted(
    """distinct select on columns"""
    distinct_on: [token_metadata_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_metadata_model_order_by!]

    """filter the rows returned"""
    where: token_metadata_model_bool_exp_bool_exp
  ): [token_metadata_model!]!

  """
  fetch data from the table: "token_purchase"
  """
  token_purchase(
    """distinct select on columns"""
    distinct_on: [token_purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_purchase_order_by!]

    """filter the rows returned"""
    where: token_purchase_bool_exp
  ): [token_purchase!]!

  """
  fetch aggregated fields from the table: "token_purchase"
  """
  token_purchase_aggregate(
    """distinct select on columns"""
    distinct_on: [token_purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_purchase_order_by!]

    """filter the rows returned"""
    where: token_purchase_bool_exp
  ): token_purchase_aggregate!

  """fetch data from the table: "token_purchase" using primary key columns"""
  token_purchase_by_pk(id: uuid!): token_purchase

  """
  fetch data from the table in a streaming manner: "token_purchase"
  """
  token_purchase_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_purchase_stream_cursor_input]!

    """filter the rows returned"""
    where: token_purchase_bool_exp
  ): [token_purchase!]!

  """
  fetch data from the table: "token_sale"
  """
  token_sale(
    """distinct select on columns"""
    distinct_on: [token_sale_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_sale_order_by!]

    """filter the rows returned"""
    where: token_sale_bool_exp
  ): [token_sale!]!

  """
  fetch aggregated fields from the table: "token_sale"
  """
  token_sale_aggregate(
    """distinct select on columns"""
    distinct_on: [token_sale_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_sale_order_by!]

    """filter the rows returned"""
    where: token_sale_bool_exp
  ): token_sale_aggregate!

  """fetch data from the table: "token_sale" using primary key columns"""
  token_sale_by_pk(id: uuid!): token_sale

  """
  fetch data from the table in a streaming manner: "token_sale"
  """
  token_sale_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_sale_stream_cursor_input]!

    """filter the rows returned"""
    where: token_sale_bool_exp
  ): [token_sale!]!
  token_stats_interval_agg(
    """token_stats_interval_aggNative Query Arguments"""
    args: token_stats_interval_agg_arguments!

    """distinct select on columns"""
    distinct_on: [token_stats_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_stats_model_order_by!]

    """filter the rows returned"""
    where: token_stats_model_bool_exp_bool_exp
  ): [token_stats_model!]!
  token_stats_interval_cache(
    """token_stats_interval_cacheNative Query Arguments"""
    args: token_stats_interval_cache_arguments!

    """distinct select on columns"""
    distinct_on: [token_stats_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_stats_model_order_by!]

    """filter the rows returned"""
    where: token_stats_model_bool_exp_bool_exp
  ): [token_stats_model!]!
  token_stats_interval_comp(
    """token_stats_interval_compNative Query Arguments"""
    args: token_stats_interval_comp_arguments!

    """distinct select on columns"""
    distinct_on: [token_stats_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_stats_model_order_by!]

    """filter the rows returned"""
    where: token_stats_model_bool_exp_bool_exp
  ): [token_stats_model!]!
  transactions(
    """distinct select on columns"""
    distinct_on: [transaction_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_model_order_by!]

    """filter the rows returned"""
    where: transaction_model_bool_exp_bool_exp
  ): [transaction_model!]!
  transactions_value_aggregate(
    """distinct select on columns"""
    distinct_on: [wallet_token_pnl_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wallet_token_pnl_model_order_by!]

    """filter the rows returned"""
    where: wallet_token_pnl_model_bool_exp_bool_exp
  ): [wallet_token_pnl_model!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""token_candles_history_1minNative Query Arguments"""
input token_candles_history_1min_arguments {
  """"""
  start: timestamptz!

  """"""
  token_mint: String!
}

"""
columns and relationships of "token_dwell_time"
"""
type token_dwell_time {
  build: String
  created_at: timestamptz!
  dwell_time_ms: numeric!
  error_details: String
  id: uuid!
  source: String
  token_mint: String!
  user_agent: String!
  user_wallet: String!
}

"""
aggregated selection of "token_dwell_time"
"""
type token_dwell_time_aggregate {
  aggregate: token_dwell_time_aggregate_fields
  nodes: [token_dwell_time!]!
}

"""
aggregate fields of "token_dwell_time"
"""
type token_dwell_time_aggregate_fields {
  avg: token_dwell_time_avg_fields
  count(columns: [token_dwell_time_select_column!], distinct: Boolean): Int!
  max: token_dwell_time_max_fields
  min: token_dwell_time_min_fields
  stddev: token_dwell_time_stddev_fields
  stddev_pop: token_dwell_time_stddev_pop_fields
  stddev_samp: token_dwell_time_stddev_samp_fields
  sum: token_dwell_time_sum_fields
  var_pop: token_dwell_time_var_pop_fields
  var_samp: token_dwell_time_var_samp_fields
  variance: token_dwell_time_variance_fields
}

"""aggregate avg on columns"""
type token_dwell_time_avg_fields {
  dwell_time_ms: Float
}

"""
Boolean expression to filter rows from the table "token_dwell_time". All fields are combined with a logical 'AND'.
"""
input token_dwell_time_bool_exp {
  _and: [token_dwell_time_bool_exp!]
  _not: token_dwell_time_bool_exp
  _or: [token_dwell_time_bool_exp!]
  build: String_comparison_exp
  created_at: timestamptz_comparison_exp
  dwell_time_ms: numeric_comparison_exp
  error_details: String_comparison_exp
  id: uuid_comparison_exp
  source: String_comparison_exp
  token_mint: String_comparison_exp
  user_agent: String_comparison_exp
  user_wallet: String_comparison_exp
}

"""
unique or primary key constraints on table "token_dwell_time"
"""
enum token_dwell_time_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  token_dwell_time_pkey
}

"""
input type for incrementing numeric columns in table "token_dwell_time"
"""
input token_dwell_time_inc_input {
  dwell_time_ms: numeric
}

"""
input type for inserting data into table "token_dwell_time"
"""
input token_dwell_time_insert_input {
  build: String
  created_at: timestamptz
  dwell_time_ms: numeric
  error_details: String
  id: uuid
  source: String
  token_mint: String
  user_agent: String
  user_wallet: String
}

"""aggregate max on columns"""
type token_dwell_time_max_fields {
  build: String
  created_at: timestamptz
  dwell_time_ms: numeric
  error_details: String
  id: uuid
  source: String
  token_mint: String
  user_agent: String
  user_wallet: String
}

"""aggregate min on columns"""
type token_dwell_time_min_fields {
  build: String
  created_at: timestamptz
  dwell_time_ms: numeric
  error_details: String
  id: uuid
  source: String
  token_mint: String
  user_agent: String
  user_wallet: String
}

"""
response of any mutation on the table "token_dwell_time"
"""
type token_dwell_time_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [token_dwell_time!]!
}

"""
on_conflict condition type for table "token_dwell_time"
"""
input token_dwell_time_on_conflict {
  constraint: token_dwell_time_constraint!
  update_columns: [token_dwell_time_update_column!]! = []
  where: token_dwell_time_bool_exp
}

"""Ordering options when selecting data from "token_dwell_time"."""
input token_dwell_time_order_by {
  build: order_by
  created_at: order_by
  dwell_time_ms: order_by
  error_details: order_by
  id: order_by
  source: order_by
  token_mint: order_by
  user_agent: order_by
  user_wallet: order_by
}

"""primary key columns input for table: token_dwell_time"""
input token_dwell_time_pk_columns_input {
  id: uuid!
}

"""
select columns of table "token_dwell_time"
"""
enum token_dwell_time_select_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  dwell_time_ms

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  source

  """column name"""
  token_mint

  """column name"""
  user_agent

  """column name"""
  user_wallet
}

"""
input type for updating data in table "token_dwell_time"
"""
input token_dwell_time_set_input {
  build: String
  created_at: timestamptz
  dwell_time_ms: numeric
  error_details: String
  id: uuid
  source: String
  token_mint: String
  user_agent: String
  user_wallet: String
}

"""aggregate stddev on columns"""
type token_dwell_time_stddev_fields {
  dwell_time_ms: Float
}

"""aggregate stddev_pop on columns"""
type token_dwell_time_stddev_pop_fields {
  dwell_time_ms: Float
}

"""aggregate stddev_samp on columns"""
type token_dwell_time_stddev_samp_fields {
  dwell_time_ms: Float
}

"""
Streaming cursor of the table "token_dwell_time"
"""
input token_dwell_time_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_dwell_time_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_dwell_time_stream_cursor_value_input {
  build: String
  created_at: timestamptz
  dwell_time_ms: numeric
  error_details: String
  id: uuid
  source: String
  token_mint: String
  user_agent: String
  user_wallet: String
}

"""aggregate sum on columns"""
type token_dwell_time_sum_fields {
  dwell_time_ms: numeric
}

"""
update columns of table "token_dwell_time"
"""
enum token_dwell_time_update_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  dwell_time_ms

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  source

  """column name"""
  token_mint

  """column name"""
  user_agent

  """column name"""
  user_wallet
}

input token_dwell_time_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: token_dwell_time_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: token_dwell_time_set_input

  """filter the rows which have to be updated"""
  where: token_dwell_time_bool_exp!
}

"""aggregate var_pop on columns"""
type token_dwell_time_var_pop_fields {
  dwell_time_ms: Float
}

"""aggregate var_samp on columns"""
type token_dwell_time_var_samp_fields {
  dwell_time_ms: Float
}

"""aggregate variance on columns"""
type token_dwell_time_variance_fields {
  dwell_time_ms: Float
}

type token_metadata_model {
  decimals: numeric
  description: String!
  external_url: String
  image_uri: String
  is_pump_token: Boolean!
  mint: String!
  name: String!
  supply: numeric
  symbol: String!
}

"""
Boolean expression to filter rows from the logical model for "token_metadata_model". All fields are combined with a logical 'AND'.
"""
input token_metadata_model_bool_exp_bool_exp {
  _and: [token_metadata_model_bool_exp_bool_exp!]
  _not: token_metadata_model_bool_exp_bool_exp
  _or: [token_metadata_model_bool_exp_bool_exp!]
  decimals: numeric_comparison_exp
  description: String_comparison_exp
  external_url: String_comparison_exp
  image_uri: String_comparison_exp
  is_pump_token: Boolean_comparison_exp
  mint: String_comparison_exp
  name: String_comparison_exp
  supply: numeric_comparison_exp
  symbol: String_comparison_exp
}

enum token_metadata_model_enum_name {
  """column name"""
  decimals

  """column name"""
  description

  """column name"""
  external_url

  """column name"""
  image_uri

  """column name"""
  is_pump_token

  """column name"""
  mint

  """column name"""
  name

  """column name"""
  supply

  """column name"""
  symbol
}

"""Ordering options when selecting data from "token_metadata_model"."""
input token_metadata_model_order_by {
  decimals: order_by
  description: order_by
  external_url: order_by
  image_uri: order_by
  is_pump_token: order_by
  mint: order_by
  name: order_by
  supply: order_by
  symbol: order_by
}

scalar token_metadata_scalar

"""
Boolean expression to compare columns of type "token_metadata_scalar". All fields are combined with logical 'AND'.
"""
input token_metadata_scalar_comparison_exp {
  _eq: token_metadata_scalar
  _gt: token_metadata_scalar
  _gte: token_metadata_scalar
  _in: [token_metadata_scalar!]
  _is_null: Boolean
  _lt: token_metadata_scalar
  _lte: token_metadata_scalar
  _neq: token_metadata_scalar
  _nin: [token_metadata_scalar!]
}

"""
columns and relationships of "token_purchase"
"""
type token_purchase {
  build: String
  created_at: timestamptz!
  error_details: String
  id: uuid!
  source: String
  token_amount: numeric!
  token_mint: String!
  token_price_usd: numeric!
  user_agent: String!
  user_wallet: String!
}

"""
aggregated selection of "token_purchase"
"""
type token_purchase_aggregate {
  aggregate: token_purchase_aggregate_fields
  nodes: [token_purchase!]!
}

"""
aggregate fields of "token_purchase"
"""
type token_purchase_aggregate_fields {
  avg: token_purchase_avg_fields
  count(columns: [token_purchase_select_column!], distinct: Boolean): Int!
  max: token_purchase_max_fields
  min: token_purchase_min_fields
  stddev: token_purchase_stddev_fields
  stddev_pop: token_purchase_stddev_pop_fields
  stddev_samp: token_purchase_stddev_samp_fields
  sum: token_purchase_sum_fields
  var_pop: token_purchase_var_pop_fields
  var_samp: token_purchase_var_samp_fields
  variance: token_purchase_variance_fields
}

"""aggregate avg on columns"""
type token_purchase_avg_fields {
  token_amount: Float
  token_price_usd: Float
}

"""
Boolean expression to filter rows from the table "token_purchase". All fields are combined with a logical 'AND'.
"""
input token_purchase_bool_exp {
  _and: [token_purchase_bool_exp!]
  _not: token_purchase_bool_exp
  _or: [token_purchase_bool_exp!]
  build: String_comparison_exp
  created_at: timestamptz_comparison_exp
  error_details: String_comparison_exp
  id: uuid_comparison_exp
  source: String_comparison_exp
  token_amount: numeric_comparison_exp
  token_mint: String_comparison_exp
  token_price_usd: numeric_comparison_exp
  user_agent: String_comparison_exp
  user_wallet: String_comparison_exp
}

"""
unique or primary key constraints on table "token_purchase"
"""
enum token_purchase_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  token_purchase_id_key

  """
  unique or primary key constraint on columns "id"
  """
  token_purchase_pkey
}

"""
input type for incrementing numeric columns in table "token_purchase"
"""
input token_purchase_inc_input {
  token_amount: numeric
  token_price_usd: numeric
}

"""
input type for inserting data into table "token_purchase"
"""
input token_purchase_insert_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate max on columns"""
type token_purchase_max_fields {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate min on columns"""
type token_purchase_min_fields {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""
response of any mutation on the table "token_purchase"
"""
type token_purchase_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [token_purchase!]!
}

"""
on_conflict condition type for table "token_purchase"
"""
input token_purchase_on_conflict {
  constraint: token_purchase_constraint!
  update_columns: [token_purchase_update_column!]! = []
  where: token_purchase_bool_exp
}

"""Ordering options when selecting data from "token_purchase"."""
input token_purchase_order_by {
  build: order_by
  created_at: order_by
  error_details: order_by
  id: order_by
  source: order_by
  token_amount: order_by
  token_mint: order_by
  token_price_usd: order_by
  user_agent: order_by
  user_wallet: order_by
}

"""primary key columns input for table: token_purchase"""
input token_purchase_pk_columns_input {
  id: uuid!
}

"""
select columns of table "token_purchase"
"""
enum token_purchase_select_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  source

  """column name"""
  token_amount

  """column name"""
  token_mint

  """column name"""
  token_price_usd

  """column name"""
  user_agent

  """column name"""
  user_wallet
}

"""
input type for updating data in table "token_purchase"
"""
input token_purchase_set_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate stddev on columns"""
type token_purchase_stddev_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate stddev_pop on columns"""
type token_purchase_stddev_pop_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate stddev_samp on columns"""
type token_purchase_stddev_samp_fields {
  token_amount: Float
  token_price_usd: Float
}

"""
Streaming cursor of the table "token_purchase"
"""
input token_purchase_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_purchase_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_purchase_stream_cursor_value_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate sum on columns"""
type token_purchase_sum_fields {
  token_amount: numeric
  token_price_usd: numeric
}

"""
update columns of table "token_purchase"
"""
enum token_purchase_update_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  source

  """column name"""
  token_amount

  """column name"""
  token_mint

  """column name"""
  token_price_usd

  """column name"""
  user_agent

  """column name"""
  user_wallet
}

input token_purchase_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: token_purchase_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: token_purchase_set_input

  """filter the rows which have to be updated"""
  where: token_purchase_bool_exp!
}

"""aggregate var_pop on columns"""
type token_purchase_var_pop_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate var_samp on columns"""
type token_purchase_var_samp_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate variance on columns"""
type token_purchase_variance_fields {
  token_amount: Float
  token_price_usd: Float
}

"""
columns and relationships of "token_sale"
"""
type token_sale {
  build: String
  created_at: timestamptz!
  error_details: String
  id: uuid!
  source: String
  token_amount: numeric!
  token_mint: String!
  token_price_usd: numeric!
  user_agent: String!
  user_wallet: String!
}

"""
aggregated selection of "token_sale"
"""
type token_sale_aggregate {
  aggregate: token_sale_aggregate_fields
  nodes: [token_sale!]!
}

"""
aggregate fields of "token_sale"
"""
type token_sale_aggregate_fields {
  avg: token_sale_avg_fields
  count(columns: [token_sale_select_column!], distinct: Boolean): Int!
  max: token_sale_max_fields
  min: token_sale_min_fields
  stddev: token_sale_stddev_fields
  stddev_pop: token_sale_stddev_pop_fields
  stddev_samp: token_sale_stddev_samp_fields
  sum: token_sale_sum_fields
  var_pop: token_sale_var_pop_fields
  var_samp: token_sale_var_samp_fields
  variance: token_sale_variance_fields
}

"""aggregate avg on columns"""
type token_sale_avg_fields {
  token_amount: Float
  token_price_usd: Float
}

"""
Boolean expression to filter rows from the table "token_sale". All fields are combined with a logical 'AND'.
"""
input token_sale_bool_exp {
  _and: [token_sale_bool_exp!]
  _not: token_sale_bool_exp
  _or: [token_sale_bool_exp!]
  build: String_comparison_exp
  created_at: timestamptz_comparison_exp
  error_details: String_comparison_exp
  id: uuid_comparison_exp
  source: String_comparison_exp
  token_amount: numeric_comparison_exp
  token_mint: String_comparison_exp
  token_price_usd: numeric_comparison_exp
  user_agent: String_comparison_exp
  user_wallet: String_comparison_exp
}

"""
unique or primary key constraints on table "token_sale"
"""
enum token_sale_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  token_sale_id_key

  """
  unique or primary key constraint on columns "id"
  """
  token_sale_pkey
}

"""
input type for incrementing numeric columns in table "token_sale"
"""
input token_sale_inc_input {
  token_amount: numeric
  token_price_usd: numeric
}

"""
input type for inserting data into table "token_sale"
"""
input token_sale_insert_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate max on columns"""
type token_sale_max_fields {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate min on columns"""
type token_sale_min_fields {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""
response of any mutation on the table "token_sale"
"""
type token_sale_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [token_sale!]!
}

"""
on_conflict condition type for table "token_sale"
"""
input token_sale_on_conflict {
  constraint: token_sale_constraint!
  update_columns: [token_sale_update_column!]! = []
  where: token_sale_bool_exp
}

"""Ordering options when selecting data from "token_sale"."""
input token_sale_order_by {
  build: order_by
  created_at: order_by
  error_details: order_by
  id: order_by
  source: order_by
  token_amount: order_by
  token_mint: order_by
  token_price_usd: order_by
  user_agent: order_by
  user_wallet: order_by
}

"""primary key columns input for table: token_sale"""
input token_sale_pk_columns_input {
  id: uuid!
}

"""
select columns of table "token_sale"
"""
enum token_sale_select_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  source

  """column name"""
  token_amount

  """column name"""
  token_mint

  """column name"""
  token_price_usd

  """column name"""
  user_agent

  """column name"""
  user_wallet
}

"""
input type for updating data in table "token_sale"
"""
input token_sale_set_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate stddev on columns"""
type token_sale_stddev_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate stddev_pop on columns"""
type token_sale_stddev_pop_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate stddev_samp on columns"""
type token_sale_stddev_samp_fields {
  token_amount: Float
  token_price_usd: Float
}

"""
Streaming cursor of the table "token_sale"
"""
input token_sale_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_sale_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_sale_stream_cursor_value_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate sum on columns"""
type token_sale_sum_fields {
  token_amount: numeric
  token_price_usd: numeric
}

"""
update columns of table "token_sale"
"""
enum token_sale_update_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  source

  """column name"""
  token_amount

  """column name"""
  token_mint

  """column name"""
  token_price_usd

  """column name"""
  user_agent

  """column name"""
  user_wallet
}

input token_sale_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: token_sale_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: token_sale_set_input

  """filter the rows which have to be updated"""
  where: token_sale_bool_exp!
}

"""aggregate var_pop on columns"""
type token_sale_var_pop_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate var_samp on columns"""
type token_sale_var_samp_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate variance on columns"""
type token_sale_variance_fields {
  token_amount: Float
  token_price_usd: Float
}

"""token_stats_interval_aggNative Query Arguments"""
input token_stats_interval_agg_arguments {
  """Main interval for total stats"""
  interval: interval!

  """Additional interval to get recent stats on a different timeframe"""
  recent_interval: interval!
}

"""token_stats_interval_cacheNative Query Arguments"""
input token_stats_interval_cache_arguments {
  """Main interval for total stats (<=1h)"""
  interval: interval!

  """Additional interval for recent stats (<=interval)"""
  recent_interval: interval!
}

"""token_stats_interval_compNative Query Arguments"""
input token_stats_interval_comp_arguments {
  """Main interval for total stats"""
  interval: interval!

  """Additional interval to get recent stats on a different timeframe"""
  recent_interval: interval!
}

type token_stats_model {
  avg_price_usd: numeric!
  latest_price_usd: numeric!
  price_change_pct: numeric!
  recent_price_change_pct: numeric!
  recent_trades: numeric!
  recent_volume_usd: numeric!
  token_metadata_decimals: numeric
  token_metadata_description: String!
  token_metadata_external_url: String
  token_metadata_image_uri: String
  token_metadata_is_pump_token: Boolean!
  token_metadata_name: String!
  token_metadata_supply: numeric
  token_metadata_symbol: String!
  token_mint: String!
  total_trades: numeric!
  total_volume_usd: numeric!
}

"""
Boolean expression to filter rows from the logical model for "token_stats_model". All fields are combined with a logical 'AND'.
"""
input token_stats_model_bool_exp_bool_exp {
  _and: [token_stats_model_bool_exp_bool_exp!]
  _not: token_stats_model_bool_exp_bool_exp
  _or: [token_stats_model_bool_exp_bool_exp!]
  avg_price_usd: numeric_comparison_exp
  latest_price_usd: numeric_comparison_exp
  price_change_pct: numeric_comparison_exp
  recent_price_change_pct: numeric_comparison_exp
  recent_trades: numeric_comparison_exp
  recent_volume_usd: numeric_comparison_exp
  token_metadata_decimals: numeric_comparison_exp
  token_metadata_description: String_comparison_exp
  token_metadata_external_url: String_comparison_exp
  token_metadata_image_uri: String_comparison_exp
  token_metadata_is_pump_token: Boolean_comparison_exp
  token_metadata_name: String_comparison_exp
  token_metadata_supply: numeric_comparison_exp
  token_metadata_symbol: String_comparison_exp
  token_mint: String_comparison_exp
  total_trades: numeric_comparison_exp
  total_volume_usd: numeric_comparison_exp
}

enum token_stats_model_enum_name {
  """column name"""
  avg_price_usd

  """column name"""
  latest_price_usd

  """column name"""
  price_change_pct

  """column name"""
  recent_price_change_pct

  """column name"""
  recent_trades

  """column name"""
  recent_volume_usd

  """column name"""
  token_metadata_decimals

  """column name"""
  token_metadata_description

  """column name"""
  token_metadata_external_url

  """column name"""
  token_metadata_image_uri

  """column name"""
  token_metadata_is_pump_token

  """column name"""
  token_metadata_name

  """column name"""
  token_metadata_supply

  """column name"""
  token_metadata_symbol

  """column name"""
  token_mint

  """column name"""
  total_trades

  """column name"""
  total_volume_usd
}

"""Ordering options when selecting data from "token_stats_model"."""
input token_stats_model_order_by {
  avg_price_usd: order_by
  latest_price_usd: order_by
  price_change_pct: order_by
  recent_price_change_pct: order_by
  recent_trades: order_by
  recent_volume_usd: order_by
  token_metadata_decimals: order_by
  token_metadata_description: order_by
  token_metadata_external_url: order_by
  token_metadata_image_uri: order_by
  token_metadata_is_pump_token: order_by
  token_metadata_name: order_by
  token_metadata_supply: order_by
  token_metadata_symbol: order_by
  token_mint: order_by
  total_trades: order_by
  total_volume_usd: order_by
}

type transaction_model {
  created_at: timestamptz!
  id: uuid!
  success: Boolean!
  token_amount: numeric!
  token_mint: String!
  token_price_usd: numeric!
  token_value_usd: numeric!
  user_wallet: String!
}

"""
Boolean expression to filter rows from the logical model for "transaction_model". All fields are combined with a logical 'AND'.
"""
input transaction_model_bool_exp_bool_exp {
  _and: [transaction_model_bool_exp_bool_exp!]
  _not: transaction_model_bool_exp_bool_exp
  _or: [transaction_model_bool_exp_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  success: Boolean_comparison_exp
  token_amount: numeric_comparison_exp
  token_mint: String_comparison_exp
  token_price_usd: numeric_comparison_exp
  token_value_usd: numeric_comparison_exp
  user_wallet: String_comparison_exp
}

enum transaction_model_enum_name {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  success

  """column name"""
  token_amount

  """column name"""
  token_mint

  """column name"""
  token_price_usd

  """column name"""
  token_value_usd

  """column name"""
  user_wallet
}

"""Ordering options when selecting data from "transaction_model"."""
input transaction_model_order_by {
  created_at: order_by
  id: order_by
  success: order_by
  token_amount: order_by
  token_mint: order_by
  token_price_usd: order_by
  token_value_usd: order_by
  user_wallet: order_by
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

type wallet_token_pnl_model {
  token_mint: String!
  total_value_usd: numeric!
  user_wallet: String!
}

"""
Boolean expression to filter rows from the logical model for "wallet_token_pnl_model". All fields are combined with a logical 'AND'.
"""
input wallet_token_pnl_model_bool_exp_bool_exp {
  _and: [wallet_token_pnl_model_bool_exp_bool_exp!]
  _not: wallet_token_pnl_model_bool_exp_bool_exp
  _or: [wallet_token_pnl_model_bool_exp_bool_exp!]
  token_mint: String_comparison_exp
  total_value_usd: numeric_comparison_exp
  user_wallet: String_comparison_exp
}

enum wallet_token_pnl_model_enum_name {
  """column name"""
  token_mint

  """column name"""
  total_value_usd

  """column name"""
  user_wallet
}

"""Ordering options when selecting data from "wallet_token_pnl_model"."""
input wallet_token_pnl_model_order_by {
  token_mint: order_by
  total_value_usd: order_by
  user_wallet: order_by
}