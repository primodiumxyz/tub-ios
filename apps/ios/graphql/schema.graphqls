schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "analytics_client_event"
"""
type analytics_client_event {
  build: String
  created_at: timestamptz!
  error_details: String
  id: uuid!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  name: String!
  source: String
  user: String!
  user_agent: String!
}

"""
aggregated selection of "analytics_client_event"
"""
type analytics_client_event_aggregate {
  aggregate: analytics_client_event_aggregate_fields
  nodes: [analytics_client_event!]!
}

"""
aggregate fields of "analytics_client_event"
"""
type analytics_client_event_aggregate_fields {
  count(columns: [analytics_client_event_select_column!], distinct: Boolean): Int!
  max: analytics_client_event_max_fields
  min: analytics_client_event_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input analytics_client_event_append_input {
  metadata: jsonb
}

"""
Boolean expression to filter rows from the table "analytics_client_event". All fields are combined with a logical 'AND'.
"""
input analytics_client_event_bool_exp {
  _and: [analytics_client_event_bool_exp!]
  _not: analytics_client_event_bool_exp
  _or: [analytics_client_event_bool_exp!]
  build: String_comparison_exp
  created_at: timestamptz_comparison_exp
  error_details: String_comparison_exp
  id: uuid_comparison_exp
  metadata: jsonb_comparison_exp
  name: String_comparison_exp
  source: String_comparison_exp
  user: String_comparison_exp
  user_agent: String_comparison_exp
}

"""
unique or primary key constraints on table "analytics_client_event"
"""
enum analytics_client_event_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  analytics_client_events_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input analytics_client_event_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input analytics_client_event_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input analytics_client_event_delete_key_input {
  metadata: String
}

"""
input type for inserting data into table "analytics_client_event"
"""
input analytics_client_event_insert_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  metadata: jsonb
  name: String
  source: String
  user: String
  user_agent: String
}

"""aggregate max on columns"""
type analytics_client_event_max_fields {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  name: String
  source: String
  user: String
  user_agent: String
}

"""aggregate min on columns"""
type analytics_client_event_min_fields {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  name: String
  source: String
  user: String
  user_agent: String
}

"""
response of any mutation on the table "analytics_client_event"
"""
type analytics_client_event_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [analytics_client_event!]!
}

"""
on_conflict condition type for table "analytics_client_event"
"""
input analytics_client_event_on_conflict {
  constraint: analytics_client_event_constraint!
  update_columns: [analytics_client_event_update_column!]! = []
  where: analytics_client_event_bool_exp
}

"""Ordering options when selecting data from "analytics_client_event"."""
input analytics_client_event_order_by {
  build: order_by
  created_at: order_by
  error_details: order_by
  id: order_by
  metadata: order_by
  name: order_by
  source: order_by
  user: order_by
  user_agent: order_by
}

"""primary key columns input for table: analytics_client_event"""
input analytics_client_event_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input analytics_client_event_prepend_input {
  metadata: jsonb
}

"""
select columns of table "analytics_client_event"
"""
enum analytics_client_event_select_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  name

  """column name"""
  source

  """column name"""
  user

  """column name"""
  user_agent
}

"""
input type for updating data in table "analytics_client_event"
"""
input analytics_client_event_set_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  metadata: jsonb
  name: String
  source: String
  user: String
  user_agent: String
}

"""
Streaming cursor of the table "analytics_client_event"
"""
input analytics_client_event_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: analytics_client_event_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input analytics_client_event_stream_cursor_value_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  metadata: jsonb
  name: String
  source: String
  user: String
  user_agent: String
}

"""
update columns of table "analytics_client_event"
"""
enum analytics_client_event_update_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  name

  """column name"""
  source

  """column name"""
  user

  """column name"""
  user_agent
}

input analytics_client_event_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: analytics_client_event_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: analytics_client_event_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: analytics_client_event_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: analytics_client_event_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: analytics_client_event_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: analytics_client_event_set_input

  """filter the rows which have to be updated"""
  where: analytics_client_event_bool_exp!
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "analytics_client_event"
  """
  delete_analytics_client_event(
    """filter the rows which have to be deleted"""
    where: analytics_client_event_bool_exp!
  ): analytics_client_event_mutation_response

  """
  delete single row from the table: "analytics_client_event"
  """
  delete_analytics_client_event_by_pk(id: uuid!): analytics_client_event

  """
  delete data from the table: "token_purchase"
  """
  delete_token_purchase(
    """filter the rows which have to be deleted"""
    where: token_purchase_bool_exp!
  ): token_purchase_mutation_response

  """
  delete single row from the table: "token_purchase"
  """
  delete_token_purchase_by_pk(id: uuid!): token_purchase

  """
  delete data from the table: "token_sale"
  """
  delete_token_sale(
    """filter the rows which have to be deleted"""
    where: token_sale_bool_exp!
  ): token_sale_mutation_response

  """
  delete single row from the table: "token_sale"
  """
  delete_token_sale_by_pk(id: uuid!): token_sale

  """
  insert data into the table: "analytics_client_event"
  """
  insert_analytics_client_event(
    """the rows to be inserted"""
    objects: [analytics_client_event_insert_input!]!

    """upsert condition"""
    on_conflict: analytics_client_event_on_conflict
  ): analytics_client_event_mutation_response

  """
  insert a single row into the table: "analytics_client_event"
  """
  insert_analytics_client_event_one(
    """the row to be inserted"""
    object: analytics_client_event_insert_input!

    """upsert condition"""
    on_conflict: analytics_client_event_on_conflict
  ): analytics_client_event

  """
  insert data into the table: "token_purchase"
  """
  insert_token_purchase(
    """the rows to be inserted"""
    objects: [token_purchase_insert_input!]!

    """upsert condition"""
    on_conflict: token_purchase_on_conflict
  ): token_purchase_mutation_response

  """
  insert a single row into the table: "token_purchase"
  """
  insert_token_purchase_one(
    """the row to be inserted"""
    object: token_purchase_insert_input!

    """upsert condition"""
    on_conflict: token_purchase_on_conflict
  ): token_purchase

  """
  insert data into the table: "token_sale"
  """
  insert_token_sale(
    """the rows to be inserted"""
    objects: [token_sale_insert_input!]!

    """upsert condition"""
    on_conflict: token_sale_on_conflict
  ): token_sale_mutation_response

  """
  insert a single row into the table: "token_sale"
  """
  insert_token_sale_one(
    """the row to be inserted"""
    object: token_sale_insert_input!

    """upsert condition"""
    on_conflict: token_sale_on_conflict
  ): token_sale

  """
  update data of the table: "analytics_client_event"
  """
  update_analytics_client_event(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: analytics_client_event_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: analytics_client_event_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: analytics_client_event_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: analytics_client_event_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: analytics_client_event_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: analytics_client_event_set_input

    """filter the rows which have to be updated"""
    where: analytics_client_event_bool_exp!
  ): analytics_client_event_mutation_response

  """
  update single row of the table: "analytics_client_event"
  """
  update_analytics_client_event_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: analytics_client_event_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: analytics_client_event_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: analytics_client_event_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: analytics_client_event_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: analytics_client_event_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: analytics_client_event_set_input
    pk_columns: analytics_client_event_pk_columns_input!
  ): analytics_client_event

  """
  update multiples rows of table: "analytics_client_event"
  """
  update_analytics_client_event_many(
    """updates to execute, in order"""
    updates: [analytics_client_event_updates!]!
  ): [analytics_client_event_mutation_response]

  """
  update data of the table: "token_purchase"
  """
  update_token_purchase(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_purchase_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_purchase_set_input

    """filter the rows which have to be updated"""
    where: token_purchase_bool_exp!
  ): token_purchase_mutation_response

  """
  update single row of the table: "token_purchase"
  """
  update_token_purchase_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_purchase_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_purchase_set_input
    pk_columns: token_purchase_pk_columns_input!
  ): token_purchase

  """
  update multiples rows of table: "token_purchase"
  """
  update_token_purchase_many(
    """updates to execute, in order"""
    updates: [token_purchase_updates!]!
  ): [token_purchase_mutation_response]

  """
  update data of the table: "token_sale"
  """
  update_token_sale(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_sale_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_sale_set_input

    """filter the rows which have to be updated"""
    where: token_sale_bool_exp!
  ): token_sale_mutation_response

  """
  update single row of the table: "token_sale"
  """
  update_token_sale_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_sale_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_sale_set_input
    pk_columns: token_sale_pk_columns_input!
  ): token_sale

  """
  update multiples rows of table: "token_sale"
  """
  update_token_sale_many(
    """updates to execute, in order"""
    updates: [token_sale_updates!]!
  ): [token_sale_mutation_response]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "analytics_client_event"
  """
  analytics_client_event(
    """distinct select on columns"""
    distinct_on: [analytics_client_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [analytics_client_event_order_by!]

    """filter the rows returned"""
    where: analytics_client_event_bool_exp
  ): [analytics_client_event!]!

  """
  fetch aggregated fields from the table: "analytics_client_event"
  """
  analytics_client_event_aggregate(
    """distinct select on columns"""
    distinct_on: [analytics_client_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [analytics_client_event_order_by!]

    """filter the rows returned"""
    where: analytics_client_event_bool_exp
  ): analytics_client_event_aggregate!

  """
  fetch data from the table: "analytics_client_event" using primary key columns
  """
  analytics_client_event_by_pk(id: uuid!): analytics_client_event

  """
  fetch data from the table: "token_purchase"
  """
  token_purchase(
    """distinct select on columns"""
    distinct_on: [token_purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_purchase_order_by!]

    """filter the rows returned"""
    where: token_purchase_bool_exp
  ): [token_purchase!]!

  """
  fetch aggregated fields from the table: "token_purchase"
  """
  token_purchase_aggregate(
    """distinct select on columns"""
    distinct_on: [token_purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_purchase_order_by!]

    """filter the rows returned"""
    where: token_purchase_bool_exp
  ): token_purchase_aggregate!

  """fetch data from the table: "token_purchase" using primary key columns"""
  token_purchase_by_pk(id: uuid!): token_purchase

  """
  fetch data from the table: "token_sale"
  """
  token_sale(
    """distinct select on columns"""
    distinct_on: [token_sale_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_sale_order_by!]

    """filter the rows returned"""
    where: token_sale_bool_exp
  ): [token_sale!]!

  """
  fetch aggregated fields from the table: "token_sale"
  """
  token_sale_aggregate(
    """distinct select on columns"""
    distinct_on: [token_sale_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_sale_order_by!]

    """filter the rows returned"""
    where: token_sale_bool_exp
  ): token_sale_aggregate!

  """fetch data from the table: "token_sale" using primary key columns"""
  token_sale_by_pk(id: uuid!): token_sale
  transactions(
    """distinct select on columns"""
    distinct_on: [transaction_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_model_order_by!]

    """filter the rows returned"""
    where: transaction_model_bool_exp_bool_exp
  ): [transaction_model!]!
}

type subscription_root {
  """
  fetch data from the table: "analytics_client_event"
  """
  analytics_client_event(
    """distinct select on columns"""
    distinct_on: [analytics_client_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [analytics_client_event_order_by!]

    """filter the rows returned"""
    where: analytics_client_event_bool_exp
  ): [analytics_client_event!]!

  """
  fetch aggregated fields from the table: "analytics_client_event"
  """
  analytics_client_event_aggregate(
    """distinct select on columns"""
    distinct_on: [analytics_client_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [analytics_client_event_order_by!]

    """filter the rows returned"""
    where: analytics_client_event_bool_exp
  ): analytics_client_event_aggregate!

  """
  fetch data from the table: "analytics_client_event" using primary key columns
  """
  analytics_client_event_by_pk(id: uuid!): analytics_client_event

  """
  fetch data from the table in a streaming manner: "analytics_client_event"
  """
  analytics_client_event_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [analytics_client_event_stream_cursor_input]!

    """filter the rows returned"""
    where: analytics_client_event_bool_exp
  ): [analytics_client_event!]!

  """
  fetch data from the table: "token_purchase"
  """
  token_purchase(
    """distinct select on columns"""
    distinct_on: [token_purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_purchase_order_by!]

    """filter the rows returned"""
    where: token_purchase_bool_exp
  ): [token_purchase!]!

  """
  fetch aggregated fields from the table: "token_purchase"
  """
  token_purchase_aggregate(
    """distinct select on columns"""
    distinct_on: [token_purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_purchase_order_by!]

    """filter the rows returned"""
    where: token_purchase_bool_exp
  ): token_purchase_aggregate!

  """fetch data from the table: "token_purchase" using primary key columns"""
  token_purchase_by_pk(id: uuid!): token_purchase

  """
  fetch data from the table in a streaming manner: "token_purchase"
  """
  token_purchase_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_purchase_stream_cursor_input]!

    """filter the rows returned"""
    where: token_purchase_bool_exp
  ): [token_purchase!]!

  """
  fetch data from the table: "token_sale"
  """
  token_sale(
    """distinct select on columns"""
    distinct_on: [token_sale_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_sale_order_by!]

    """filter the rows returned"""
    where: token_sale_bool_exp
  ): [token_sale!]!

  """
  fetch aggregated fields from the table: "token_sale"
  """
  token_sale_aggregate(
    """distinct select on columns"""
    distinct_on: [token_sale_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_sale_order_by!]

    """filter the rows returned"""
    where: token_sale_bool_exp
  ): token_sale_aggregate!

  """fetch data from the table: "token_sale" using primary key columns"""
  token_sale_by_pk(id: uuid!): token_sale

  """
  fetch data from the table in a streaming manner: "token_sale"
  """
  token_sale_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_sale_stream_cursor_input]!

    """filter the rows returned"""
    where: token_sale_bool_exp
  ): [token_sale!]!
  transactions(
    """distinct select on columns"""
    distinct_on: [transaction_model_enum_name!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_model_order_by!]

    """filter the rows returned"""
    where: transaction_model_bool_exp_bool_exp
  ): [transaction_model!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "token_purchase"
"""
type token_purchase {
  build: String
  created_at: timestamptz!
  error_details: String
  id: uuid!
  source: String
  token_amount: numeric!
  token_mint: String!
  token_price_usd: numeric!
  user_agent: String!
  user_wallet: String!
}

"""
aggregated selection of "token_purchase"
"""
type token_purchase_aggregate {
  aggregate: token_purchase_aggregate_fields
  nodes: [token_purchase!]!
}

"""
aggregate fields of "token_purchase"
"""
type token_purchase_aggregate_fields {
  avg: token_purchase_avg_fields
  count(columns: [token_purchase_select_column!], distinct: Boolean): Int!
  max: token_purchase_max_fields
  min: token_purchase_min_fields
  stddev: token_purchase_stddev_fields
  stddev_pop: token_purchase_stddev_pop_fields
  stddev_samp: token_purchase_stddev_samp_fields
  sum: token_purchase_sum_fields
  var_pop: token_purchase_var_pop_fields
  var_samp: token_purchase_var_samp_fields
  variance: token_purchase_variance_fields
}

"""aggregate avg on columns"""
type token_purchase_avg_fields {
  token_amount: Float
  token_price_usd: Float
}

"""
Boolean expression to filter rows from the table "token_purchase". All fields are combined with a logical 'AND'.
"""
input token_purchase_bool_exp {
  _and: [token_purchase_bool_exp!]
  _not: token_purchase_bool_exp
  _or: [token_purchase_bool_exp!]
  build: String_comparison_exp
  created_at: timestamptz_comparison_exp
  error_details: String_comparison_exp
  id: uuid_comparison_exp
  source: String_comparison_exp
  token_amount: numeric_comparison_exp
  token_mint: String_comparison_exp
  token_price_usd: numeric_comparison_exp
  user_agent: String_comparison_exp
  user_wallet: String_comparison_exp
}

"""
unique or primary key constraints on table "token_purchase"
"""
enum token_purchase_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  token_purchase_pkey
}

"""
input type for incrementing numeric columns in table "token_purchase"
"""
input token_purchase_inc_input {
  token_amount: numeric
  token_price_usd: numeric
}

"""
input type for inserting data into table "token_purchase"
"""
input token_purchase_insert_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate max on columns"""
type token_purchase_max_fields {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate min on columns"""
type token_purchase_min_fields {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""
response of any mutation on the table "token_purchase"
"""
type token_purchase_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [token_purchase!]!
}

"""
on_conflict condition type for table "token_purchase"
"""
input token_purchase_on_conflict {
  constraint: token_purchase_constraint!
  update_columns: [token_purchase_update_column!]! = []
  where: token_purchase_bool_exp
}

"""Ordering options when selecting data from "token_purchase"."""
input token_purchase_order_by {
  build: order_by
  created_at: order_by
  error_details: order_by
  id: order_by
  source: order_by
  token_amount: order_by
  token_mint: order_by
  token_price_usd: order_by
  user_agent: order_by
  user_wallet: order_by
}

"""primary key columns input for table: token_purchase"""
input token_purchase_pk_columns_input {
  id: uuid!
}

"""
select columns of table "token_purchase"
"""
enum token_purchase_select_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  source

  """column name"""
  token_amount

  """column name"""
  token_mint

  """column name"""
  token_price_usd

  """column name"""
  user_agent

  """column name"""
  user_wallet
}

"""
input type for updating data in table "token_purchase"
"""
input token_purchase_set_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate stddev on columns"""
type token_purchase_stddev_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate stddev_pop on columns"""
type token_purchase_stddev_pop_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate stddev_samp on columns"""
type token_purchase_stddev_samp_fields {
  token_amount: Float
  token_price_usd: Float
}

"""
Streaming cursor of the table "token_purchase"
"""
input token_purchase_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_purchase_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_purchase_stream_cursor_value_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate sum on columns"""
type token_purchase_sum_fields {
  token_amount: numeric
  token_price_usd: numeric
}

"""
update columns of table "token_purchase"
"""
enum token_purchase_update_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  source

  """column name"""
  token_amount

  """column name"""
  token_mint

  """column name"""
  token_price_usd

  """column name"""
  user_agent

  """column name"""
  user_wallet
}

input token_purchase_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: token_purchase_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: token_purchase_set_input

  """filter the rows which have to be updated"""
  where: token_purchase_bool_exp!
}

"""aggregate var_pop on columns"""
type token_purchase_var_pop_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate var_samp on columns"""
type token_purchase_var_samp_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate variance on columns"""
type token_purchase_variance_fields {
  token_amount: Float
  token_price_usd: Float
}

"""
columns and relationships of "token_sale"
"""
type token_sale {
  build: String
  created_at: timestamptz!
  error_details: String
  id: uuid!
  source: String
  token_amount: numeric!
  token_mint: String!
  token_price_usd: numeric!
  user_agent: String!
  user_wallet: String!
}

"""
aggregated selection of "token_sale"
"""
type token_sale_aggregate {
  aggregate: token_sale_aggregate_fields
  nodes: [token_sale!]!
}

"""
aggregate fields of "token_sale"
"""
type token_sale_aggregate_fields {
  avg: token_sale_avg_fields
  count(columns: [token_sale_select_column!], distinct: Boolean): Int!
  max: token_sale_max_fields
  min: token_sale_min_fields
  stddev: token_sale_stddev_fields
  stddev_pop: token_sale_stddev_pop_fields
  stddev_samp: token_sale_stddev_samp_fields
  sum: token_sale_sum_fields
  var_pop: token_sale_var_pop_fields
  var_samp: token_sale_var_samp_fields
  variance: token_sale_variance_fields
}

"""aggregate avg on columns"""
type token_sale_avg_fields {
  token_amount: Float
  token_price_usd: Float
}

"""
Boolean expression to filter rows from the table "token_sale". All fields are combined with a logical 'AND'.
"""
input token_sale_bool_exp {
  _and: [token_sale_bool_exp!]
  _not: token_sale_bool_exp
  _or: [token_sale_bool_exp!]
  build: String_comparison_exp
  created_at: timestamptz_comparison_exp
  error_details: String_comparison_exp
  id: uuid_comparison_exp
  source: String_comparison_exp
  token_amount: numeric_comparison_exp
  token_mint: String_comparison_exp
  token_price_usd: numeric_comparison_exp
  user_agent: String_comparison_exp
  user_wallet: String_comparison_exp
}

"""
unique or primary key constraints on table "token_sale"
"""
enum token_sale_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  token_sale_pkey
}

"""
input type for incrementing numeric columns in table "token_sale"
"""
input token_sale_inc_input {
  token_amount: numeric
  token_price_usd: numeric
}

"""
input type for inserting data into table "token_sale"
"""
input token_sale_insert_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate max on columns"""
type token_sale_max_fields {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate min on columns"""
type token_sale_min_fields {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""
response of any mutation on the table "token_sale"
"""
type token_sale_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [token_sale!]!
}

"""
on_conflict condition type for table "token_sale"
"""
input token_sale_on_conflict {
  constraint: token_sale_constraint!
  update_columns: [token_sale_update_column!]! = []
  where: token_sale_bool_exp
}

"""Ordering options when selecting data from "token_sale"."""
input token_sale_order_by {
  build: order_by
  created_at: order_by
  error_details: order_by
  id: order_by
  source: order_by
  token_amount: order_by
  token_mint: order_by
  token_price_usd: order_by
  user_agent: order_by
  user_wallet: order_by
}

"""primary key columns input for table: token_sale"""
input token_sale_pk_columns_input {
  id: uuid!
}

"""
select columns of table "token_sale"
"""
enum token_sale_select_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  source

  """column name"""
  token_amount

  """column name"""
  token_mint

  """column name"""
  token_price_usd

  """column name"""
  user_agent

  """column name"""
  user_wallet
}

"""
input type for updating data in table "token_sale"
"""
input token_sale_set_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate stddev on columns"""
type token_sale_stddev_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate stddev_pop on columns"""
type token_sale_stddev_pop_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate stddev_samp on columns"""
type token_sale_stddev_samp_fields {
  token_amount: Float
  token_price_usd: Float
}

"""
Streaming cursor of the table "token_sale"
"""
input token_sale_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_sale_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_sale_stream_cursor_value_input {
  build: String
  created_at: timestamptz
  error_details: String
  id: uuid
  source: String
  token_amount: numeric
  token_mint: String
  token_price_usd: numeric
  user_agent: String
  user_wallet: String
}

"""aggregate sum on columns"""
type token_sale_sum_fields {
  token_amount: numeric
  token_price_usd: numeric
}

"""
update columns of table "token_sale"
"""
enum token_sale_update_column {
  """column name"""
  build

  """column name"""
  created_at

  """column name"""
  error_details

  """column name"""
  id

  """column name"""
  source

  """column name"""
  token_amount

  """column name"""
  token_mint

  """column name"""
  token_price_usd

  """column name"""
  user_agent

  """column name"""
  user_wallet
}

input token_sale_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: token_sale_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: token_sale_set_input

  """filter the rows which have to be updated"""
  where: token_sale_bool_exp!
}

"""aggregate var_pop on columns"""
type token_sale_var_pop_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate var_samp on columns"""
type token_sale_var_samp_fields {
  token_amount: Float
  token_price_usd: Float
}

"""aggregate variance on columns"""
type token_sale_variance_fields {
  token_amount: Float
  token_price_usd: Float
}

type transaction_model {
  created_at: timestamptz!
  id: uuid!
  success: Boolean!
  token_amount: numeric!
  token_mint: String!
  token_price_usd: numeric!
  user_wallet: String!
}

"""
Boolean expression to filter rows from the logical model for "transaction_model". All fields are combined with a logical 'AND'.
"""
input transaction_model_bool_exp_bool_exp {
  _and: [transaction_model_bool_exp_bool_exp!]
  _not: transaction_model_bool_exp_bool_exp
  _or: [transaction_model_bool_exp_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  success: Boolean_comparison_exp
  token_amount: numeric_comparison_exp
  token_mint: String_comparison_exp
  token_price_usd: numeric_comparison_exp
  user_wallet: String_comparison_exp
}

enum transaction_model_enum_name {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  success

  """column name"""
  token_amount

  """column name"""
  token_mint

  """column name"""
  token_price_usd

  """column name"""
  user_wallet
}

"""Ordering options when selecting data from "transaction_model"."""
input transaction_model_order_by {
  created_at: order_by
  id: order_by
  success: order_by
  token_amount: order_by
  token_mint: order_by
  token_price_usd: order_by
  user_wallet: order_by
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}