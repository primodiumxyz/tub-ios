subscription SubWalletTokenBalance(
  $wallet: String!
  $token: String!
  $start: timestamptz = "now()"
) {
  balance: wallet_token_balance_ignore_interval(
    args: { wallet: $wallet, interval: "0", start: $start, token: $token }
  ) {
    value: balance
  }
}

subscription SubWalletTokenBalanceIgnoreInterval(
  $wallet: String!
  $start: timestamptz = "now()"
  $interval: interval = "0"
  $token: String!
) {
  balance: wallet_token_balance_ignore_interval(
    args: { wallet: $wallet, interval: $interval, start: $start, token: $token }
  ) {
    value: balance
  }
}

subscription SubWalletBalance($wallet: String!, $start: timestamptz = "now()") {
  balance: wallet_balance_ignore_interval(
    args: { wallet: $wallet, interval: "0", start: $start }
  ) {
    value: balance
  }
}

subscription SubWalletBalanceIgnoreInterval(
  $wallet: String!
  $start: timestamptz = "now()"
  $interval: interval = "0"
) {
  balance: wallet_balance_ignore_interval(
    args: { wallet: $wallet, interval: $interval, start: $start }
  ) {
    value: balance
  }
}

subscription SubTopTokensByVolume(
  $interval: interval = "30m"
  $recentInterval: interval = "20s"
  $minRecentTrades: numeric = 0
  $minRecentVolume: numeric = 0
) {
  token_stats_interval_comp(
    args: { interval: $interval, recent_interval: $recentInterval }
    where: {
      token_metadata_is_pump_token: { _eq: true }
      recent_trades: { _gte: $minRecentTrades }
      recent_volume_usd: { _gte: $minRecentVolume }
    }
    order_by: { total_volume_usd: desc }
    limit: 50
  ) {
    token_mint
    latest_price_usd
    total_volume_usd
    total_trades
    price_change_pct
    recent_volume_usd
    recent_trades
    recent_price_change_pct
    token_metadata_name
    token_metadata_symbol
    token_metadata_description
    token_metadata_image_uri
    token_metadata_external_url
    token_metadata_supply
  }
}

subscription SubTokenPricesSince(
  $token: String!
  $since: timestamptz = "now()"
) {
  api_trade_history(
    where: { token_mint: { _eq: $token }, created_at: { _gte: $since } }
    order_by: { created_at: asc }
  ) {
    token_price_usd
    created_at
  }
}

subscription SubTokenCandles(
  $token: String!
  $since: timestamptz = "now()"
  $candle_interval: interval = "1m"
) {
  token_trade_history_candles(
    args: { candle_interval: $candle_interval }
    where: { token_mint: { _eq: $token }, bucket: { _gte: $since } }
  ) {
    bucket
    open_price_usd
    close_price_usd
    high_price_usd
    low_price_usd
    volume_usd
  }
}
