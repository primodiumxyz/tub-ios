subscription SubLatestMockTokens($limit: Int = 10) {
  token(where: { mint: { _is_null: true } }, order_by: { updated_at: desc }, limit: $limit) {
    id
    symbol
    supply
    name
    uri
    updated_at
  }
}

subscription SubTokenPriceHistorySince($tokenId: uuid!, $since: timestamptz!) {
  token_price_history(
    where: { token: { _eq: $tokenId }, created_at: { _gte: $since } }
    limit: 100
    order_by: { created_at: desc }
  ) {
    created_at
    id
    price
    token
  }
}

subscription SubLatestTokenPrice($tokenId: uuid!) {
  token_price_history(where: { token: { _eq: $tokenId } }, limit: 1, order_by: { created_at: desc }) {
    created_at
    price
  }
}

subscription SubAllOnchainTokensPriceHistorySince($since: timestamptz!) {
  token_price_history(
    where: { token_relationship: { mint: { _is_null: false } }, created_at: { _gte: $since } }
    order_by: { created_at: desc }
  ) {
    created_at
    id
    price
    token_relationship {
      mint
      name
    }
  }
}

subscription SubFilteredTokens($since: timestamptz!, $minTrades: bigint!, $minIncreasePct: float8!) {
  get_formatted_tokens_since(
    args: { since: $since }
    where: { trades: { _gte: $minTrades }, increase_pct: { _gte: $minIncreasePct } }
  ) {
    token_id
    mint
    decimals
    name
    platform
    symbol
    latest_price
    increase_pct
    trades
    created_at
  }
}

subscription SubFilteredTokensInterval(
  $interval: interval = "30s"
  $minTrades: bigint!
  $minIncreasePct: float8!
  $mintFilter: String = "%"
) {
  get_formatted_tokens_interval(
    args: { interval: $interval }
    where: { trades: { _gte: $minTrades }, increase_pct: { _gte: $minIncreasePct }, mint: { _ilike: $mintFilter } }
  ) {
    token_id
    mint
    decimals
    name
    platform
    symbol
    latest_price
    increase_pct
    trades
    created_at
  }
}

subscription SubWalletTokenBalance($wallet: String!, $token: uuid!, $start: timestamptz = "now()") {
  balance: wallet_token_balance_ignore_interval(
    args: { wallet: $wallet, interval: "0", start: $start, token: $token }
  ) {
    value: balance
  }
}

subscription SubWalletTokenBalanceIgnoreInterval(
  $wallet: String!
  $start: timestamptz = "now()"
  $interval: interval = "0"
  $token: uuid!
) {
  balance: wallet_token_balance_ignore_interval(
    args: { wallet: $wallet, interval: $interval, start: $start, token: $token }
  ) {
    value: balance
  }
}

subscription SubWalletBalance($wallet: String!, $start: timestamptz = "now()") {
  balance: wallet_balance_ignore_interval(args: { wallet: $wallet, interval: "0", start: $start }) {
    value: balance
  }
}

subscription SubWalletBalanceIgnoreInterval(
  $wallet: String!
  $start: timestamptz = "now()"
  $interval: interval = "0"
) {
  balance: wallet_balance_ignore_interval(args: { wallet: $wallet, interval: $interval, start: $start }) {
    value: balance
  }
}

subscription SubTokenPriceHistoryInterval($token: uuid!, $start: timestamptz = "now()", $interval: interval = "30m") {
  token_price_history_offset(
    args: { offset: $interval }
    where: { created_at_offset: { _gte: $start }, token: { _eq: $token } }
    order_by: { created_at: asc }
  ) {
    created_at
    price
  }
}

subscription SubTokenPriceHistoryIgnoreInterval(
  $token: uuid!
  $start: timestamptz = "now()"
  $interval: interval = "30s"
) {
  token_price_history_offset(
    args: { offset: $interval }
    where: { created_at_offset: { _lte: $start }, token: { _eq: $token } }
    order_by: { created_at: asc }
  ) {
    created_at
    price
  }
}