subscription SubLatestMockTokens($limit: Int = 10) {
  token(where: { mint: { _is_null: true } }, order_by: { updated_at: desc }, limit: $limit) {
    id
    symbol
    supply
    name
    uri
    updated_at
  }
}

subscription SubTokenPriceHistorySince($tokenId: uuid!, $since: timestamptz!) {
  token_price_history(
    where: { token: { _eq: $tokenId }, created_at: { _gte: $since } }
    limit: 100
    order_by: { created_at: desc }
  ) {
    created_at
    id
    price
    token
  }
}

subscription SubLatestTokenPrice($tokenId: uuid!) {
  token_price_history(where: { token: { _eq: $tokenId } }, limit: 1, order_by: { created_at: desc }) {
    created_at
    price
  }
}

subscription SubAllOnchainTokensPriceHistorySince($since: timestamptz!) {
  token_price_history(
    where: { token_relationship: { mint: { _is_null: false } }, created_at: { _gte: $since } }
    order_by: { created_at: desc }
  ) {
    created_at
    id
    price
    token_relationship {
      mint
      name
    }
  }
}

subscription SubFilteredTokens($since: timestamptz!, $minTrades: bigint!, $minIncreasePct: float8!) {
  GetFormattedTokens(
    where: { created_at: { _gte: $since }, trades: { _gte: $minTrades }, increase_pct: { _gte: $minIncreasePct } }
  ) {
    token_id
    mint
    name
    symbol
    latest_price
    increase_pct
    trades
    created_at
  }
}

subscription SubAccountBalanceCredit($accountId: uuid!) {
  account_transaction_aggregate(where: { account: { _eq: $accountId }, transaction_type: { _eq: "credit" } }) {
    aggregate {
      sum {
        amount
      }
    }
  }
}

subscription SubAccountBalanceDebit($accountId: uuid!) {
  account_transaction_aggregate(where: { account: { _eq: $accountId }, transaction_type: { _eq: "debit" } }) {
    aggregate {
      sum {
        amount
      }
    }
  }
}

subscription SubAccountTokenBalanceCredit($accountId: uuid!, $tokenId: uuid!) {
  token_transaction_aggregate(
    where: {
      account_transaction_data: { account: { _eq: $accountId } }
      token: { _eq: $tokenId }
      transaction_type: { _eq: "credit" }
    }
  ) {
    aggregate {
      sum {
        amount
      }
    }
  }
}

subscription SubAccountTokenBalanceDebit($accountId: uuid!, $tokenId: uuid!) {
  token_transaction_aggregate(
    where: {
      account_transaction_data: { account: { _eq: $accountId } }
      token: { _eq: $tokenId }
      transaction_type: { _eq: "debit" }
    }
  ) {
    aggregate {
      sum {
        amount
      }
    }
  }
}
